"use strict";
(function() {
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __commonJS = function(cb, mod) {
    return function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
  };

  // node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js": function(exports, module) {
      function _interopRequireDefault2(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/internals/global.js
  var require_global = __commonJS({
    "node_modules/core-js-pure/internals/global.js": function(exports, module) {
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
        return this;
      }() || Function("return this")();
    }
  });

  // node_modules/core-js-pure/internals/fails.js
  var require_fails = __commonJS({
    "node_modules/core-js-pure/internals/fails.js": function(exports, module) {
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/function-bind-native.js
  var require_function_bind_native = __commonJS({
    "node_modules/core-js-pure/internals/function-bind-native.js": function(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        var test = function() {
        }.bind();
        return typeof test != "function" || test.hasOwnProperty("prototype");
      });
    }
  });

  // node_modules/core-js-pure/internals/function-apply.js
  var require_function_apply = __commonJS({
    "node_modules/core-js-pure/internals/function-apply.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var apply = FunctionPrototype.apply;
      var call = FunctionPrototype.call;
      module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
        return call.apply(apply, arguments);
      });
    }
  });

  // node_modules/core-js-pure/internals/function-uncurry-this.js
  var require_function_uncurry_this = __commonJS({
    "node_modules/core-js-pure/internals/function-uncurry-this.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var call = FunctionPrototype.call;
      var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
      module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
        return function() {
          return call.apply(fn, arguments);
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "node_modules/core-js-pure/internals/classof-raw.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // node_modules/core-js-pure/internals/function-uncurry-this-clause.js
  var require_function_uncurry_this_clause = __commonJS({
    "node_modules/core-js-pure/internals/function-uncurry-this-clause.js": function(exports, module) {
      var classofRaw = require_classof_raw();
      var uncurryThis = require_function_uncurry_this();
      module.exports = function(fn) {
        if (classofRaw(fn) === "Function")
          return uncurryThis(fn);
      };
    }
  });

  // node_modules/core-js-pure/internals/document-all.js
  var require_document_all = __commonJS({
    "node_modules/core-js-pure/internals/document-all.js": function(exports, module) {
      var documentAll = typeof document == "object" && document.all;
      var IS_HTMLDDA = typeof documentAll == "undefined" && documentAll !== void 0;
      module.exports = {
        all: documentAll,
        IS_HTMLDDA: IS_HTMLDDA
      };
    }
  });

  // node_modules/core-js-pure/internals/is-callable.js
  var require_is_callable = __commonJS({
    "node_modules/core-js-pure/internals/is-callable.js": function(exports, module) {
      var $documentAll = require_document_all();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(argument) {
        return typeof argument == "function" || argument === documentAll;
      } : function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // node_modules/core-js-pure/internals/descriptors.js
  var require_descriptors = __commonJS({
    "node_modules/core-js-pure/internals/descriptors.js": function(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // node_modules/core-js-pure/internals/function-call.js
  var require_function_call = __commonJS({
    "node_modules/core-js-pure/internals/function-call.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native();
      var call = Function.prototype.call;
      module.exports = NATIVE_BIND ? call.bind(call) : function() {
        return call.apply(call, arguments);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "node_modules/core-js-pure/internals/object-property-is-enumerable.js": function(exports) {
      "use strict";
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // node_modules/core-js-pure/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "node_modules/core-js-pure/internals/create-property-descriptor.js": function(exports, module) {
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "node_modules/core-js-pure/internals/indexed-object.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var classof = require_classof_raw();
      var $Object = Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !$Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split(it, "") : $Object(it);
      } : $Object;
    }
  });

  // node_modules/core-js-pure/internals/is-null-or-undefined.js
  var require_is_null_or_undefined = __commonJS({
    "node_modules/core-js-pure/internals/is-null-or-undefined.js": function(exports, module) {
      module.exports = function(it) {
        return it === null || it === void 0;
      };
    }
  });

  // node_modules/core-js-pure/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "node_modules/core-js-pure/internals/require-object-coercible.js": function(exports, module) {
      var isNullOrUndefined = require_is_null_or_undefined();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isNullOrUndefined(it))
          throw $TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // node_modules/core-js-pure/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "node_modules/core-js-pure/internals/to-indexed-object.js": function(exports, module) {
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/is-object.js
  var require_is_object = __commonJS({
    "node_modules/core-js-pure/internals/is-object.js": function(exports, module) {
      var isCallable = require_is_callable();
      var $documentAll = require_document_all();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(it) {
        return typeof it == "object" ? it !== null : isCallable(it) || it === documentAll;
      } : function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // node_modules/core-js-pure/internals/path.js
  var require_path = __commonJS({
    "node_modules/core-js-pure/internals/path.js": function(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "node_modules/core-js-pure/internals/get-built-in.js": function(exports, module) {
      var path = require_path();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var aFunction = function(variable) {
        return isCallable(variable) ? variable : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
      };
    }
  });

  // node_modules/core-js-pure/internals/object-is-prototype-of.js
  var require_object_is_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-is-prototype-of.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // node_modules/core-js-pure/internals/engine-user-agent.js
  var require_engine_user_agent = __commonJS({
    "node_modules/core-js-pure/internals/engine-user-agent.js": function(exports, module) {
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // node_modules/core-js-pure/internals/engine-v8-version.js
  var require_engine_v8_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-v8-version.js": function(exports, module) {
      var global2 = require_global();
      var userAgent = require_engine_user_agent();
      var process2 = global2.process;
      var Deno2 = global2.Deno;
      var versions = process2 && process2.versions || Deno2 && Deno2.version;
      var v8 = versions && versions.v8;
      var match;
      var version;
      if (v8) {
        match = v8.split(".");
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version = +match[1];
        }
      }
      module.exports = version;
    }
  });

  // node_modules/core-js-pure/internals/symbol-constructor-detection.js
  var require_symbol_constructor_detection = __commonJS({
    "node_modules/core-js-pure/internals/symbol-constructor-detection.js": function(exports, module) {
      var V8_VERSION = require_engine_v8_version();
      var fails = require_fails();
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // node_modules/core-js-pure/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "node_modules/core-js-pure/internals/use-symbol-as-uid.js": function(exports, module) {
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // node_modules/core-js-pure/internals/is-symbol.js
  var require_is_symbol = __commonJS({
    "node_modules/core-js-pure/internals/is-symbol.js": function(exports, module) {
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var $Object = Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/try-to-string.js
  var require_try_to_string = __commonJS({
    "node_modules/core-js-pure/internals/try-to-string.js": function(exports, module) {
      var $String = String;
      module.exports = function(argument) {
        try {
          return $String(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/a-callable.js
  var require_a_callable = __commonJS({
    "node_modules/core-js-pure/internals/a-callable.js": function(exports, module) {
      var isCallable = require_is_callable();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isCallable(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a function");
      };
    }
  });

  // node_modules/core-js-pure/internals/get-method.js
  var require_get_method = __commonJS({
    "node_modules/core-js-pure/internals/get-method.js": function(exports, module) {
      var aCallable = require_a_callable();
      var isNullOrUndefined = require_is_null_or_undefined();
      module.exports = function(V, P) {
        var func = V[P];
        return isNullOrUndefined(func) ? void 0 : aCallable(func);
      };
    }
  });

  // node_modules/core-js-pure/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive = __commonJS({
    "node_modules/core-js-pure/internals/ordinary-to-primitive.js": function(exports, module) {
      var call = require_function_call();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var $TypeError = TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
          return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        throw $TypeError("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js-pure/internals/is-pure.js
  var require_is_pure = __commonJS({
    "node_modules/core-js-pure/internals/is-pure.js": function(exports, module) {
      module.exports = true;
    }
  });

  // node_modules/core-js-pure/internals/define-global-property.js
  var require_define_global_property = __commonJS({
    "node_modules/core-js-pure/internals/define-global-property.js": function(exports, module) {
      var global2 = require_global();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(global2, key, { value: value, configurable: true, writable: true });
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // node_modules/core-js-pure/internals/shared-store.js
  var require_shared_store = __commonJS({
    "node_modules/core-js-pure/internals/shared-store.js": function(exports, module) {
      var global2 = require_global();
      var defineGlobalProperty = require_define_global_property();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
      module.exports = store;
    }
  });

  // node_modules/core-js-pure/internals/shared.js
  var require_shared = __commonJS({
    "node_modules/core-js-pure/internals/shared.js": function(exports, module) {
      var IS_PURE = require_is_pure();
      var store = require_shared_store();
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.26.1",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // node_modules/core-js-pure/internals/to-object.js
  var require_to_object = __commonJS({
    "node_modules/core-js-pure/internals/to-object.js": function(exports, module) {
      var requireObjectCoercible = require_require_object_coercible();
      var $Object = Object;
      module.exports = function(argument) {
        return $Object(requireObjectCoercible(argument));
      };
    }
  });

  // node_modules/core-js-pure/internals/has-own-property.js
  var require_has_own_property = __commonJS({
    "node_modules/core-js-pure/internals/has-own-property.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var hasOwnProperty = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
    }
  });

  // node_modules/core-js-pure/internals/uid.js
  var require_uid = __commonJS({
    "node_modules/core-js-pure/internals/uid.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var id = 0;
      var postfix = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
    }
  });

  // node_modules/core-js-pure/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "node_modules/core-js-pure/internals/well-known-symbol.js": function(exports, module) {
      var global2 = require_global();
      var shared = require_shared();
      var hasOwn = require_has_own_property();
      var uid = require_uid();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var symbolFor = Symbol2 && Symbol2["for"];
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
            WellKnownSymbolsStore[name] = Symbol2[name];
          } else if (USE_SYMBOL_AS_UID && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // node_modules/core-js-pure/internals/to-primitive.js
  var require_to_primitive = __commonJS({
    "node_modules/core-js-pure/internals/to-primitive.js": function(exports, module) {
      var call = require_function_call();
      var isObject = require_is_object();
      var isSymbol = require_is_symbol();
      var getMethod = require_get_method();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var $TypeError = TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject(input) || isSymbol(input))
          return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0)
            pref = "default";
          result = call(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result))
            return result;
          throw $TypeError("Can't convert object to primitive value");
        }
        if (pref === void 0)
          pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-property-key.js
  var require_to_property_key = __commonJS({
    "node_modules/core-js-pure/internals/to-property-key.js": function(exports, module) {
      var toPrimitive = require_to_primitive();
      var isSymbol = require_is_symbol();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // node_modules/core-js-pure/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "node_modules/core-js-pure/internals/document-create-element.js": function(exports, module) {
      var global2 = require_global();
      var isObject = require_is_object();
      var document2 = global2.document;
      var EXISTS = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js-pure/internals/ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "node_modules/core-js-pure/internals/ie8-dom-define.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var createElement = require_document_create_element();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js": function(exports) {
      var DESCRIPTORS = require_descriptors();
      var call = require_function_call();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE)
          try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (hasOwn(O, P))
          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // node_modules/core-js-pure/internals/is-forced.js
  var require_is_forced = __commonJS({
    "node_modules/core-js-pure/internals/is-forced.js": function(exports, module) {
      var fails = require_fails();
      var isCallable = require_is_callable();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // node_modules/core-js-pure/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "node_modules/core-js-pure/internals/function-bind-context.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this_clause();
      var aCallable = require_a_callable();
      var NATIVE_BIND = require_function_bind_native();
      var bind = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js-pure/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug = __commonJS({
    "node_modules/core-js-pure/internals/v8-prototype-define-bug.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
    }
  });

  // node_modules/core-js-pure/internals/an-object.js
  var require_an_object = __commonJS({
    "node_modules/core-js-pure/internals/an-object.js": function(exports, module) {
      var isObject = require_is_object();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isObject(argument))
          return argument;
        throw $TypeError($String(argument) + " is not an object");
      };
    }
  });

  // node_modules/core-js-pure/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "node_modules/core-js-pure/internals/object-define-property.js": function(exports) {
      var DESCRIPTORS = require_descriptors();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var anObject = require_an_object();
      var toPropertyKey = require_to_property_key();
      var $TypeError = TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw $TypeError("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js-pure/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "node_modules/core-js-pure/internals/create-non-enumerable-property.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // node_modules/core-js-pure/internals/export.js
  var require_export = __commonJS({
    "node_modules/core-js-pure/internals/export.js": function(exports, module) {
      "use strict";
      var global2 = require_global();
      var apply = require_function_apply();
      var uncurryThis = require_function_uncurry_this_clause();
      var isCallable = require_is_callable();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var isForced = require_is_forced();
      var path = require_path();
      var bind = require_function_bind_context();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var wrapConstructor = function(NativeConstructor) {
        var Wrapper = function(a, b, c) {
          if (this instanceof Wrapper) {
            switch (arguments.length) {
              case 0:
                return new NativeConstructor();
              case 1:
                return new NativeConstructor(a);
              case 2:
                return new NativeConstructor(a, b);
            }
            return new NativeConstructor(a, b, c);
          }
          return apply(NativeConstructor, this, arguments);
        };
        Wrapper.prototype = NativeConstructor.prototype;
        return Wrapper;
      };
      module.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var PROTO = options.proto;
        var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
        var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
        var targetPrototype = target.prototype;
        var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
        var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
        for (key in source) {
          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
          USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
          targetProperty = target[key];
          if (USE_NATIVE)
            if (options.dontCallGetSet) {
              descriptor = getOwnPropertyDescriptor(nativeSource, key);
              nativeProperty = descriptor && descriptor.value;
            } else
              nativeProperty = nativeSource[key];
          sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
          if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
            continue;
          if (options.bind && USE_NATIVE)
            resultProperty = bind(sourceProperty, global2);
          else if (options.wrap && USE_NATIVE)
            resultProperty = wrapConstructor(sourceProperty);
          else if (PROTO && isCallable(sourceProperty))
            resultProperty = uncurryThis(sourceProperty);
          else
            resultProperty = sourceProperty;
          if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(resultProperty, "sham", true);
          }
          createNonEnumerableProperty(target, key, resultProperty);
          if (PROTO) {
            VIRTUAL_PROTOTYPE = TARGET + "Prototype";
            if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
              createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
            }
            createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
            if (options.real && targetPrototype && !targetPrototype[key]) {
              createNonEnumerableProperty(targetPrototype, key, sourceProperty);
            }
          }
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/is-array.js
  var require_is_array = __commonJS({
    "node_modules/core-js-pure/internals/is-array.js": function(exports, module) {
      var classof = require_classof_raw();
      module.exports = Array.isArray || function isArray(argument) {
        return classof(argument) == "Array";
      };
    }
  });

  // node_modules/core-js-pure/internals/math-trunc.js
  var require_math_trunc = __commonJS({
    "node_modules/core-js-pure/internals/math-trunc.js": function(exports, module) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor : ceil)(n);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity = __commonJS({
    "node_modules/core-js-pure/internals/to-integer-or-infinity.js": function(exports, module) {
      var trunc = require_math_trunc();
      module.exports = function(argument) {
        var number = +argument;
        return number !== number || number === 0 ? 0 : trunc(number);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-length.js
  var require_to_length = __commonJS({
    "node_modules/core-js-pure/internals/to-length.js": function(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var min = Math.min;
      module.exports = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js-pure/internals/length-of-array-like.js
  var require_length_of_array_like = __commonJS({
    "node_modules/core-js-pure/internals/length-of-array-like.js": function(exports, module) {
      var toLength = require_to_length();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js
  var require_does_not_exceed_safe_integer = __commonJS({
    "node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js": function(exports, module) {
      var $TypeError = TypeError;
      var MAX_SAFE_INTEGER = 9007199254740991;
      module.exports = function(it) {
        if (it > MAX_SAFE_INTEGER)
          throw $TypeError("Maximum allowed index exceeded");
        return it;
      };
    }
  });

  // node_modules/core-js-pure/internals/create-property.js
  var require_create_property = __commonJS({
    "node_modules/core-js-pure/internals/create-property.js": function(exports, module) {
      "use strict";
      var toPropertyKey = require_to_property_key();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = function(object, key, value) {
        var propertyKey = toPropertyKey(key);
        if (propertyKey in object)
          definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
        else
          object[propertyKey] = value;
      };
    }
  });

  // node_modules/core-js-pure/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "node_modules/core-js-pure/internals/to-string-tag-support.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module.exports = String(test) === "[object z]";
    }
  });

  // node_modules/core-js-pure/internals/classof.js
  var require_classof = __commonJS({
    "node_modules/core-js-pure/internals/classof.js": function(exports, module) {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var isCallable = require_is_callable();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Object = Object;
      var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // node_modules/core-js-pure/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "node_modules/core-js-pure/internals/inspect-source.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var store = require_shared_store();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // node_modules/core-js-pure/internals/is-constructor.js
  var require_is_constructor = __commonJS({
    "node_modules/core-js-pure/internals/is-constructor.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var classof = require_classof();
      var getBuiltIn = require_get_built_in();
      var inspectSource = require_inspect_source();
      var noop = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        try {
          construct(noop, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // node_modules/core-js-pure/internals/array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "node_modules/core-js-pure/internals/array-species-constructor.js": function(exports, module) {
      var isArray = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      module.exports = function(originalArray) {
        var C;
        if (isArray(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
            C = void 0;
          else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return C === void 0 ? $Array : C;
      };
    }
  });

  // node_modules/core-js-pure/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "node_modules/core-js-pure/internals/array-species-create.js": function(exports, module) {
      var arraySpeciesConstructor = require_array_species_constructor();
      module.exports = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
    }
  });

  // node_modules/core-js-pure/internals/array-method-has-species-support.js
  var require_array_method_has_species_support = __commonJS({
    "node_modules/core-js-pure/internals/array-method-has-species-support.js": function(exports, module) {
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(METHOD_NAME) {
        return V8_VERSION >= 51 || !fails(function() {
          var array = [];
          var constructor = array.constructor = {};
          constructor[SPECIES] = function() {
            return { foo: 1 };
          };
          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.concat.js
  var require_es_array_concat = __commonJS({
    "node_modules/core-js-pure/modules/es.array.concat.js": function() {
      "use strict";
      var $ = require_export();
      var fails = require_fails();
      var isArray = require_is_array();
      var isObject = require_is_object();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
      var createProperty = require_create_property();
      var arraySpeciesCreate = require_array_species_create();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
      var isConcatSpreadable = function(O) {
        if (!isObject(O))
          return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== void 0 ? !!spreadable : isArray(O);
      };
      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
      $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
        concat: function concat(arg) {
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;
          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
              len = lengthOfArrayLike(E);
              doesNotExceedSafeInteger(n + len);
              for (k = 0; k < len; k++, n++)
                if (k in E)
                  createProperty(A, n, E[k]);
            } else {
              doesNotExceedSafeInteger(n + 1);
              createProperty(A, n++, E);
            }
          }
          A.length = n;
          return A;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.object.to-string.js
  var require_es_object_to_string = __commonJS({
    "node_modules/core-js-pure/modules/es.object.to-string.js": function() {
    }
  });

  // node_modules/core-js-pure/internals/to-string.js
  var require_to_string = __commonJS({
    "node_modules/core-js-pure/internals/to-string.js": function(exports, module) {
      var classof = require_classof();
      var $String = String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return $String(argument);
      };
    }
  });

  // node_modules/core-js-pure/internals/to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "node_modules/core-js-pure/internals/to-absolute-index.js": function(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // node_modules/core-js-pure/internals/array-includes.js
  var require_array_includes = __commonJS({
    "node_modules/core-js-pure/internals/array-includes.js": function(exports, module) {
      var toIndexedObject = require_to_indexed_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        includes: createMethod(true),
        indexOf: createMethod(false)
      };
    }
  });

  // node_modules/core-js-pure/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "node_modules/core-js-pure/internals/hidden-keys.js": function(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "node_modules/core-js-pure/internals/object-keys-internal.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes().indexOf;
      var hiddenKeys = require_hidden_keys();
      var push = uncurryThis([].push);
      module.exports = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names.length > i)
          if (hasOwn(O, key = names[i++])) {
            ~indexOf(result, key) || push(result, key);
          }
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "node_modules/core-js-pure/internals/enum-bug-keys.js": function(exports, module) {
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // node_modules/core-js-pure/internals/object-keys.js
  var require_object_keys = __commonJS({
    "node_modules/core-js-pure/internals/object-keys.js": function(exports, module) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "node_modules/core-js-pure/internals/object-define-properties.js": function(exports) {
      var DESCRIPTORS = require_descriptors();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object();
      var toIndexedObject = require_to_indexed_object();
      var objectKeys = require_object_keys();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], props[key]);
        return O;
      };
    }
  });

  // node_modules/core-js-pure/internals/html.js
  var require_html = __commonJS({
    "node_modules/core-js-pure/internals/html.js": function(exports, module) {
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // node_modules/core-js-pure/internals/shared-key.js
  var require_shared_key = __commonJS({
    "node_modules/core-js-pure/internals/shared-key.js": function(exports, module) {
      var shared = require_shared();
      var uid = require_uid();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // node_modules/core-js-pure/internals/object-create.js
  var require_object_create = __commonJS({
    "node_modules/core-js-pure/internals/object-create.js": function(exports, module) {
      var anObject = require_an_object();
      var definePropertiesModule = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = require_hidden_keys();
      var html = require_html();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-names.js": function(exports) {
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js-pure/internals/array-slice-simple.js
  var require_array_slice_simple = __commonJS({
    "node_modules/core-js-pure/internals/array-slice-simple.js": function(exports, module) {
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property();
      var $Array = Array;
      var max = Math.max;
      module.exports = function(O, start, end) {
        var length = lengthOfArrayLike(O);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var result = $Array(max(fin - k, 0));
        for (var n = 0; k < fin; k++, n++)
          createProperty(result, n, O[k]);
        result.length = n;
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-names-external.js
  var require_object_get_own_property_names_external = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-names-external.js": function(exports, module) {
      var classof = require_classof_raw();
      var toIndexedObject = require_to_indexed_object();
      var $getOwnPropertyNames = require_object_get_own_property_names().f;
      var arraySlice = require_array_slice_simple();
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return $getOwnPropertyNames(it);
        } catch (error) {
          return arraySlice(windowNames);
        }
      };
      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
      };
    }
  });

  // node_modules/core-js-pure/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js-pure/internals/object-get-own-property-symbols.js": function(exports) {
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js-pure/internals/define-built-in.js
  var require_define_built_in = __commonJS({
    "node_modules/core-js-pure/internals/define-built-in.js": function(exports, module) {
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      module.exports = function(target, key, value, options) {
        if (options && options.enumerable)
          target[key] = value;
        else
          createNonEnumerableProperty(target, key, value);
        return target;
      };
    }
  });

  // node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
  var require_well_known_symbol_wrapped = __commonJS({
    "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js": function(exports) {
      var wellKnownSymbol = require_well_known_symbol();
      exports.f = wellKnownSymbol;
    }
  });

  // node_modules/core-js-pure/internals/well-known-symbol-define.js
  var require_well_known_symbol_define = __commonJS({
    "node_modules/core-js-pure/internals/well-known-symbol-define.js": function(exports, module) {
      var path = require_path();
      var hasOwn = require_has_own_property();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineProperty = require_object_define_property().f;
      module.exports = function(NAME) {
        var Symbol2 = path.Symbol || (path.Symbol = {});
        if (!hasOwn(Symbol2, NAME))
          defineProperty(Symbol2, NAME, {
            value: wrappedWellKnownSymbolModule.f(NAME)
          });
      };
    }
  });

  // node_modules/core-js-pure/internals/symbol-define-to-primitive.js
  var require_symbol_define_to_primitive = __commonJS({
    "node_modules/core-js-pure/internals/symbol-define-to-primitive.js": function(exports, module) {
      var call = require_function_call();
      var getBuiltIn = require_get_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var defineBuiltIn = require_define_built_in();
      module.exports = function() {
        var Symbol2 = getBuiltIn("Symbol");
        var SymbolPrototype = Symbol2 && Symbol2.prototype;
        var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
        var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
        if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
          defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
            return call(valueOf, this);
          }, { arity: 1 });
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/object-to-string.js
  var require_object_to_string = __commonJS({
    "node_modules/core-js-pure/internals/object-to-string.js": function(exports, module) {
      "use strict";
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var classof = require_classof();
      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return "[object " + classof(this) + "]";
      };
    }
  });

  // node_modules/core-js-pure/internals/set-to-string-tag.js
  var require_set_to_string_tag = __commonJS({
    "node_modules/core-js-pure/internals/set-to-string-tag.js": function(exports, module) {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var defineProperty = require_object_define_property().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var toString = require_object_to_string();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      module.exports = function(it, TAG, STATIC, SET_METHOD) {
        if (it) {
          var target = STATIC ? it : it.prototype;
          if (!hasOwn(target, TO_STRING_TAG)) {
            defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
          }
          if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
            createNonEnumerableProperty(target, "toString", toString);
          }
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/weak-map-basic-detection.js
  var require_weak_map_basic_detection = __commonJS({
    "node_modules/core-js-pure/internals/weak-map-basic-detection.js": function(exports, module) {
      var global2 = require_global();
      var isCallable = require_is_callable();
      var WeakMap2 = global2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
    }
  });

  // node_modules/core-js-pure/internals/internal-state.js
  var require_internal_state = __commonJS({
    "node_modules/core-js-pure/internals/internal-state.js": function(exports, module) {
      var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
      var global2 = require_global();
      var isObject = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var shared = require_shared_store();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = global2.TypeError;
      var WeakMap2 = global2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        store.get = store.get;
        store.has = store.has;
        store.set = store.set;
        set = function(it, metadata) {
          if (store.has(it))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          store.set(it, metadata);
          return metadata;
        };
        get = function(it) {
          return store.get(it) || {};
        };
        has = function(it) {
          return store.has(it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var STATE;
      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
      };
    }
  });

  // node_modules/core-js-pure/internals/array-iteration.js
  var require_array_iteration = __commonJS({
    "node_modules/core-js-pure/internals/array-iteration.js": function(exports, module) {
      var bind = require_function_bind_context();
      var uncurryThis = require_function_uncurry_this();
      var IndexedObject = require_indexed_object();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      var push = uncurryThis([].push);
      var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self2 = IndexedObject(O);
          var boundFunction = bind(callbackfn, that);
          var length = lengthOfArrayLike(self2);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
          var value, result;
          for (; length > index; index++)
            if (NO_HOLES || index in self2) {
              value = self2[index];
              result = boundFunction(value, index, O);
              if (TYPE) {
                if (IS_MAP)
                  target[index] = result;
                else if (result)
                  switch (TYPE) {
                    case 3:
                      return true;
                    case 5:
                      return value;
                    case 6:
                      return index;
                    case 2:
                      push(target, value);
                  }
                else
                  switch (TYPE) {
                    case 4:
                      return false;
                    case 7:
                      push(target, value);
                  }
              }
            }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      module.exports = {
        forEach: createMethod(0),
        map: createMethod(1),
        filter: createMethod(2),
        some: createMethod(3),
        every: createMethod(4),
        find: createMethod(5),
        findIndex: createMethod(6),
        filterReject: createMethod(7)
      };
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.constructor.js
  var require_es_symbol_constructor = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.constructor.js": function() {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var fails = require_fails();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var anObject = require_an_object();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var $toString = require_to_string();
      var createPropertyDescriptor = require_create_property_descriptor();
      var nativeObjectCreate = require_object_create();
      var objectKeys = require_object_keys();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      var definePropertiesModule = require_object_define_properties();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var defineBuiltIn = require_define_built_in();
      var shared = require_shared();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var uid = require_uid();
      var wellKnownSymbol = require_well_known_symbol();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineWellKnownSymbol = require_well_known_symbol_define();
      var defineSymbolToPrimitive = require_symbol_define_to_primitive();
      var setToStringTag = require_set_to_string_tag();
      var InternalStateModule = require_internal_state();
      var $forEach = require_array_iteration().forEach;
      var HIDDEN = sharedKey("hidden");
      var SYMBOL = "Symbol";
      var PROTOTYPE = "prototype";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global2.Symbol;
      var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
      var TypeError2 = global2.TypeError;
      var QObject = global2.QObject;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var push = uncurryThis([].push);
      var AllSymbols = shared("symbols");
      var ObjectPrototypeSymbols = shared("op-symbols");
      var WellKnownSymbolsStore = shared("wks");
      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDescriptor = DESCRIPTORS && fails(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
          get: function() {
            return nativeDefineProperty(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor)
          delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;
      var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
        setInternalState(symbol, {
          type: SYMBOL,
          tag: tag,
          description: description
        });
        if (!DESCRIPTORS)
          symbol.description = description;
        return symbol;
      };
      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype)
          $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPropertyKey(P);
        anObject(Attributes);
        if (hasOwn(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!hasOwn(O, HIDDEN))
              nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (hasOwn(O, HIDDEN) && O[HIDDEN][key])
              O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
          }
          return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
      };
      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
          if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
            $defineProperty(O, key, properties[key]);
        });
        return O;
      };
      var $create = function create(O, Properties) {
        return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = call(nativePropertyIsEnumerable, this, P);
        if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P))
          return false;
        return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
          return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }
        return descriptor;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
            push(result, key);
        });
        return result;
      };
      var $getOwnPropertySymbols = function(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
            push(result, AllSymbols[key]);
          }
        });
        return result;
      };
      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol2() {
          if (isPrototypeOf(SymbolPrototype, this))
            throw TypeError2("Symbol is not a constructor");
          var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
          var tag = uid(description);
          var setter = function(value) {
            if (this === ObjectPrototype)
              call(setter, ObjectPrototypeSymbols, value);
            if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };
          if (DESCRIPTORS && USE_SETTER)
            setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
          return wrap(tag, description);
        };
        SymbolPrototype = $Symbol[PROTOTYPE];
        defineBuiltIn(SymbolPrototype, "toString", function toString() {
          return getInternalState(this).tag;
        });
        defineBuiltIn($Symbol, "withoutSetter", function(description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        definePropertiesModule.f = $defineProperties;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
          return wrap(wellKnownSymbol(name), name);
        };
        if (DESCRIPTORS) {
          nativeDefineProperty(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });
          if (!IS_PURE) {
            defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
          }
        }
      }
      $({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol(name);
      });
      $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
        useSetter: function() {
          USE_SETTER = true;
        },
        useSimple: function() {
          USE_SETTER = false;
        }
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
        getOwnPropertyNames: $getOwnPropertyNames
      });
      defineSymbolToPrimitive();
      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
    }
  });

  // node_modules/core-js-pure/internals/symbol-registry-detection.js
  var require_symbol_registry_detection = __commonJS({
    "node_modules/core-js-pure/internals/symbol-registry-detection.js": function(exports, module) {
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      module.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.for.js
  var require_es_symbol_for = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.for.js": function() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var hasOwn = require_has_own_property();
      var toString = require_to_string();
      var shared = require_shared();
      var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
      var StringToSymbolRegistry = shared("string-to-symbol-registry");
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
        "for": function(key) {
          var string = toString(key);
          if (hasOwn(StringToSymbolRegistry, string))
            return StringToSymbolRegistry[string];
          var symbol = getBuiltIn("Symbol")(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.key-for.js
  var require_es_symbol_key_for = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.key-for.js": function() {
      var $ = require_export();
      var hasOwn = require_has_own_property();
      var isSymbol = require_is_symbol();
      var tryToString = require_try_to_string();
      var shared = require_shared();
      var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError(tryToString(sym) + " is not a symbol");
          if (hasOwn(SymbolToStringRegistry, sym))
            return SymbolToStringRegistry[sym];
        }
      });
    }
  });

  // node_modules/core-js-pure/internals/array-slice.js
  var require_array_slice = __commonJS({
    "node_modules/core-js-pure/internals/array-slice.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis([].slice);
    }
  });

  // node_modules/core-js-pure/modules/es.json.stringify.js
  var require_es_json_stringify = __commonJS({
    "node_modules/core-js-pure/modules/es.json.stringify.js": function() {
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isArray = require_is_array();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var isSymbol = require_is_symbol();
      var arraySlice = require_array_slice();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var $stringify = getBuiltIn("JSON", "stringify");
      var exec = uncurryThis(/./.exec);
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var replace = uncurryThis("".replace);
      var numberToString = uncurryThis(1 .toString);
      var tester = /[\uD800-\uDFFF]/g;
      var low = /^[\uD800-\uDBFF]$/;
      var hi = /^[\uDC00-\uDFFF]$/;
      var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
        var symbol = getBuiltIn("Symbol")();
        return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
      });
      var ILL_FORMED_UNICODE = fails(function() {
        return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
      });
      var stringifyWithSymbolsFix = function(it, replacer) {
        var args = arraySlice(arguments);
        var $replacer = replacer;
        if (!isObject(replacer) && it === void 0 || isSymbol(it))
          return;
        if (!isArray(replacer))
          replacer = function(key, value) {
            if (isCallable($replacer))
              value = call($replacer, this, key, value);
            if (!isSymbol(value))
              return value;
          };
        args[1] = replacer;
        return apply($stringify, null, args);
      };
      var fixIllFormed = function(match, offset, string) {
        var prev = charAt(string, offset - 1);
        var next = charAt(string, offset + 1);
        if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
          return "\\u" + numberToString(charCodeAt(match, 0), 16);
        }
        return match;
      };
      if ($stringify) {
        $({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
          stringify: function stringify(it, replacer, space) {
            var args = arraySlice(arguments);
            var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
            return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
          }
        });
      }
    }
  });

  // node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js
  var require_es_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js": function() {
      var $ = require_export();
      var NATIVE_SYMBOL = require_symbol_constructor_detection();
      var fails = require_fails();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var toObject = require_to_object();
      var FORCED = !NATIVE_SYMBOL || fails(function() {
        getOwnPropertySymbolsModule.f(1);
      });
      $({ target: "Object", stat: true, forced: FORCED }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.js
  var require_es_symbol = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.js": function() {
      require_es_symbol_constructor();
      require_es_symbol_for();
      require_es_symbol_key_for();
      require_es_json_stringify();
      require_es_object_get_own_property_symbols();
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.async-iterator.js
  var require_es_symbol_async_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.async-iterator.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("asyncIterator");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.description.js
  var require_es_symbol_description = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.description.js": function() {
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.has-instance.js
  var require_es_symbol_has_instance = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.has-instance.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("hasInstance");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
  var require_es_symbol_is_concat_spreadable = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("isConcatSpreadable");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.iterator.js
  var require_es_symbol_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.iterator.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("iterator");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.match.js
  var require_es_symbol_match = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.match.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("match");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.match-all.js
  var require_es_symbol_match_all = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.match-all.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("matchAll");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.replace.js
  var require_es_symbol_replace = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.replace.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("replace");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.search.js
  var require_es_symbol_search = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.search.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("search");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.species.js
  var require_es_symbol_species = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.species.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("species");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.split.js
  var require_es_symbol_split = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.split.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("split");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.to-primitive.js
  var require_es_symbol_to_primitive = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.to-primitive.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      var defineSymbolToPrimitive = require_symbol_define_to_primitive();
      defineWellKnownSymbol("toPrimitive");
      defineSymbolToPrimitive();
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
  var require_es_symbol_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js": function() {
      var getBuiltIn = require_get_built_in();
      var defineWellKnownSymbol = require_well_known_symbol_define();
      var setToStringTag = require_set_to_string_tag();
      defineWellKnownSymbol("toStringTag");
      setToStringTag(getBuiltIn("Symbol"), "Symbol");
    }
  });

  // node_modules/core-js-pure/modules/es.symbol.unscopables.js
  var require_es_symbol_unscopables = __commonJS({
    "node_modules/core-js-pure/modules/es.symbol.unscopables.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("unscopables");
    }
  });

  // node_modules/core-js-pure/modules/es.json.to-string-tag.js
  var require_es_json_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.json.to-string-tag.js": function() {
      var global2 = require_global();
      var setToStringTag = require_set_to_string_tag();
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // node_modules/core-js-pure/modules/es.math.to-string-tag.js
  var require_es_math_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.math.to-string-tag.js": function() {
    }
  });

  // node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
  var require_es_reflect_to_string_tag = __commonJS({
    "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js": function() {
    }
  });

  // node_modules/core-js-pure/es/symbol/index.js
  var require_symbol = __commonJS({
    "node_modules/core-js-pure/es/symbol/index.js": function(exports, module) {
      require_es_array_concat();
      require_es_object_to_string();
      require_es_symbol();
      require_es_symbol_async_iterator();
      require_es_symbol_description();
      require_es_symbol_has_instance();
      require_es_symbol_is_concat_spreadable();
      require_es_symbol_iterator();
      require_es_symbol_match();
      require_es_symbol_match_all();
      require_es_symbol_replace();
      require_es_symbol_search();
      require_es_symbol_species();
      require_es_symbol_split();
      require_es_symbol_to_primitive();
      require_es_symbol_to_string_tag();
      require_es_symbol_unscopables();
      require_es_json_to_string_tag();
      require_es_math_to_string_tag();
      require_es_reflect_to_string_tag();
      var path = require_path();
      module.exports = path.Symbol;
    }
  });

  // node_modules/core-js-pure/internals/add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "node_modules/core-js-pure/internals/add-to-unscopables.js": function(exports, module) {
      module.exports = function() {
      };
    }
  });

  // node_modules/core-js-pure/internals/iterators.js
  var require_iterators = __commonJS({
    "node_modules/core-js-pure/internals/iterators.js": function(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/core-js-pure/internals/function-name.js
  var require_function_name = __commonJS({
    "node_modules/core-js-pure/internals/function-name.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var hasOwn = require_has_own_property();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS: EXISTS,
        PROPER: PROPER,
        CONFIGURABLE: CONFIGURABLE
      };
    }
  });

  // node_modules/core-js-pure/internals/correct-prototype-getter.js
  var require_correct_prototype_getter = __commonJS({
    "node_modules/core-js-pure/internals/correct-prototype-getter.js": function(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }
  });

  // node_modules/core-js-pure/internals/object-get-prototype-of.js
  var require_object_get_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-get-prototype-of.js": function(exports, module) {
      var hasOwn = require_has_own_property();
      var isCallable = require_is_callable();
      var toObject = require_to_object();
      var sharedKey = require_shared_key();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var IE_PROTO = sharedKey("IE_PROTO");
      var $Object = Object;
      var ObjectPrototype = $Object.prototype;
      module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
        var object = toObject(O);
        if (hasOwn(object, IE_PROTO))
          return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof $Object ? ObjectPrototype : null;
      };
    }
  });

  // node_modules/core-js-pure/internals/iterators-core.js
  var require_iterators_core = __commonJS({
    "node_modules/core-js-pure/internals/iterators-core.js": function(exports, module) {
      "use strict";
      var fails = require_fails();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var create = require_object_create();
      var getPrototypeOf = require_object_get_prototype_of();
      var defineBuiltIn = require_define_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var IteratorPrototype;
      var PrototypeOfArrayIteratorPrototype;
      var arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator))
          BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
        var test = {};
        return IteratorPrototype[ITERATOR].call(test) !== test;
      });
      if (NEW_ITERATOR_PROTOTYPE)
        IteratorPrototype = {};
      else if (IS_PURE)
        IteratorPrototype = create(IteratorPrototype);
      if (!isCallable(IteratorPrototype[ITERATOR])) {
        defineBuiltIn(IteratorPrototype, ITERATOR, function() {
          return this;
        });
      }
      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
      };
    }
  });

  // node_modules/core-js-pure/internals/iterator-create-constructor.js
  var require_iterator_create_constructor = __commonJS({
    "node_modules/core-js-pure/internals/iterator-create-constructor.js": function(exports, module) {
      "use strict";
      var IteratorPrototype = require_iterators_core().IteratorPrototype;
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var setToStringTag = require_set_to_string_tag();
      var Iterators = require_iterators();
      var returnThis = function() {
        return this;
      };
      module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }
  });

  // node_modules/core-js-pure/internals/a-possible-prototype.js
  var require_a_possible_prototype = __commonJS({
    "node_modules/core-js-pure/internals/a-possible-prototype.js": function(exports, module) {
      var isCallable = require_is_callable();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (typeof argument == "object" || isCallable(argument))
          return argument;
        throw $TypeError("Can't set " + $String(argument) + " as a prototype");
      };
    }
  });

  // node_modules/core-js-pure/internals/object-set-prototype-of.js
  var require_object_set_prototype_of = __commonJS({
    "node_modules/core-js-pure/internals/object-set-prototype-of.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var anObject = require_an_object();
      var aPossiblePrototype = require_a_possible_prototype();
      module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
          setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
          setter(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER)
            setter(O, proto);
          else
            O.__proto__ = proto;
          return O;
        };
      }() : void 0);
    }
  });

  // node_modules/core-js-pure/internals/iterator-define.js
  var require_iterator_define = __commonJS({
    "node_modules/core-js-pure/internals/iterator-define.js": function(exports, module) {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var IS_PURE = require_is_pure();
      var FunctionName = require_function_name();
      var isCallable = require_is_callable();
      var createIteratorConstructor = require_iterator_create_constructor();
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var defineBuiltIn = require_define_built_in();
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators();
      var IteratorsCore = require_iterators_core();
      var PROPER_FUNCTION_NAME = FunctionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator)
            return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
            return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE)
              Iterators[TO_STRING_TAG] = returnThis;
          }
        }
        if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(IterablePrototype, "name", VALUES);
          } else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return call(nativeIterator, this);
            };
          }
        }
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED)
            for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
              }
            }
          else
            $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
        }
        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
        }
        Iterators[NAME] = defaultIterator;
        return methods;
      };
    }
  });

  // node_modules/core-js-pure/internals/create-iter-result-object.js
  var require_create_iter_result_object = __commonJS({
    "node_modules/core-js-pure/internals/create-iter-result-object.js": function(exports, module) {
      module.exports = function(value, done) {
        return { value: value, done: done };
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.iterator.js
  var require_es_array_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.array.iterator.js": function(exports, module) {
      "use strict";
      var toIndexedObject = require_to_indexed_object();
      var addToUnscopables = require_add_to_unscopables();
      var Iterators = require_iterators();
      var InternalStateModule = require_internal_state();
      var defineProperty = require_object_define_property().f;
      var defineIterator = require_iterator_define();
      var createIterResultObject = require_create_iter_result_object();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors();
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
      module.exports = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          index: 0,
          kind: kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return createIterResultObject(void 0, true);
        }
        if (kind == "keys")
          return createIterResultObject(index, false);
        if (kind == "values")
          return createIterResultObject(target[index], false);
        return createIterResultObject([index, target[index]], false);
      }, "values");
      var values = Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
      if (!IS_PURE && DESCRIPTORS && values.name !== "values")
        try {
          defineProperty(values, "name", { value: "values" });
        } catch (error) {
        }
    }
  });

  // node_modules/core-js-pure/internals/dom-iterables.js
  var require_dom_iterables = __commonJS({
    "node_modules/core-js-pure/internals/dom-iterables.js": function(exports, module) {
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    }
  });

  // node_modules/core-js-pure/modules/web.dom-collections.iterator.js
  var require_web_dom_collections_iterator = __commonJS({
    "node_modules/core-js-pure/modules/web.dom-collections.iterator.js": function() {
      require_es_array_iterator();
      var DOMIterables = require_dom_iterables();
      var global2 = require_global();
      var classof = require_classof();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var Iterators = require_iterators();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      for (COLLECTION_NAME in DOMIterables) {
        Collection = global2[COLLECTION_NAME];
        CollectionPrototype = Collection && Collection.prototype;
        if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
          createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
        }
        Iterators[COLLECTION_NAME] = Iterators.Array;
      }
      var Collection;
      var CollectionPrototype;
      var COLLECTION_NAME;
    }
  });

  // node_modules/core-js-pure/stable/symbol/index.js
  var require_symbol2 = __commonJS({
    "node_modules/core-js-pure/stable/symbol/index.js": function(exports, module) {
      var parent = require_symbol();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/symbol/index.js
  var require_symbol3 = __commonJS({
    "node_modules/core-js-pure/actual/symbol/index.js": function(exports, module) {
      var parent = require_symbol2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
  var require_esnext_symbol_async_dispose = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("asyncDispose");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.dispose.js
  var require_esnext_symbol_dispose = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.dispose.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("dispose");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.matcher.js
  var require_esnext_symbol_matcher = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.matcher.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("matcher");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js
  var require_esnext_symbol_metadata_key = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("metadataKey");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.observable.js
  var require_esnext_symbol_observable = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.observable.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("observable");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.metadata.js
  var require_esnext_symbol_metadata = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.metadata.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("metadata");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
  var require_esnext_symbol_pattern_match = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("patternMatch");
    }
  });

  // node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
  var require_esnext_symbol_replace_all = __commonJS({
    "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js": function() {
      var defineWellKnownSymbol = require_well_known_symbol_define();
      defineWellKnownSymbol("replaceAll");
    }
  });

  // node_modules/core-js-pure/full/symbol/index.js
  var require_symbol4 = __commonJS({
    "node_modules/core-js-pure/full/symbol/index.js": function(exports, module) {
      var parent = require_symbol3();
      require_esnext_symbol_async_dispose();
      require_esnext_symbol_dispose();
      require_esnext_symbol_matcher();
      require_esnext_symbol_metadata_key();
      require_esnext_symbol_observable();
      require_esnext_symbol_metadata();
      require_esnext_symbol_pattern_match();
      require_esnext_symbol_replace_all();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/symbol/index.js
  var require_symbol5 = __commonJS({
    "node_modules/core-js-pure/features/symbol/index.js": function(exports, module) {
      module.exports = require_symbol4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/symbol.js
  var require_symbol6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/symbol.js": function(exports, module) {
      module.exports = require_symbol5();
    }
  });

  // node_modules/core-js-pure/internals/string-multibyte.js
  var require_string_multibyte = __commonJS({
    "node_modules/core-js-pure/internals/string-multibyte.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var stringSlice = uncurryThis("".slice);
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size)
            return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module.exports = {
        codeAt: createMethod(false),
        charAt: createMethod(true)
      };
    }
  });

  // node_modules/core-js-pure/modules/es.string.iterator.js
  var require_es_string_iterator = __commonJS({
    "node_modules/core-js-pure/modules/es.string.iterator.js": function() {
      "use strict";
      var charAt = require_string_multibyte().charAt;
      var toString = require_to_string();
      var InternalStateModule = require_internal_state();
      var defineIterator = require_iterator_define();
      var createIterResultObject = require_create_iter_result_object();
      var STRING_ITERATOR = "String Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
      defineIterator(String, "String", function(iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: toString(iterated),
          index: 0
        });
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length)
          return createIterResultObject(void 0, true);
        point = charAt(string, index);
        state.index += point.length;
        return createIterResultObject(point, false);
      });
    }
  });

  // node_modules/core-js-pure/es/symbol/iterator.js
  var require_iterator = __commonJS({
    "node_modules/core-js-pure/es/symbol/iterator.js": function(exports, module) {
      require_es_array_iterator();
      require_es_object_to_string();
      require_es_string_iterator();
      require_es_symbol_iterator();
      var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      module.exports = WrappedWellKnownSymbolModule.f("iterator");
    }
  });

  // node_modules/core-js-pure/stable/symbol/iterator.js
  var require_iterator2 = __commonJS({
    "node_modules/core-js-pure/stable/symbol/iterator.js": function(exports, module) {
      var parent = require_iterator();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/symbol/iterator.js
  var require_iterator3 = __commonJS({
    "node_modules/core-js-pure/actual/symbol/iterator.js": function(exports, module) {
      var parent = require_iterator2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/symbol/iterator.js
  var require_iterator4 = __commonJS({
    "node_modules/core-js-pure/full/symbol/iterator.js": function(exports, module) {
      var parent = require_iterator3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/symbol/iterator.js
  var require_iterator5 = __commonJS({
    "node_modules/core-js-pure/features/symbol/iterator.js": function(exports, module) {
      module.exports = require_iterator4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js
  var require_iterator6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/symbol/iterator.js": function(exports, module) {
      module.exports = require_iterator5();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/typeof.js": function(exports, module) {
      var _Symbol = require_symbol6();
      var _Symbol$iterator = require_iterator6();
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return module.exports = _typeof = typeof _Symbol == "function" && typeof _Symbol$iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof _Symbol == "function" && obj2.constructor === _Symbol && obj2 !== _Symbol.prototype ? "symbol" : typeof obj2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
      }
      module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/internals/define-built-ins.js
  var require_define_built_ins = __commonJS({
    "node_modules/core-js-pure/internals/define-built-ins.js": function(exports, module) {
      var defineBuiltIn = require_define_built_in();
      module.exports = function(target, src, options) {
        for (var key in src) {
          if (options && options.unsafe && target[key])
            target[key] = src[key];
          else
            defineBuiltIn(target, key, src[key], options);
        }
        return target;
      };
    }
  });

  // node_modules/core-js-pure/internals/array-buffer-non-extensible.js
  var require_array_buffer_non_extensible = __commonJS({
    "node_modules/core-js-pure/internals/array-buffer-non-extensible.js": function(exports, module) {
      var fails = require_fails();
      module.exports = fails(function() {
        if (typeof ArrayBuffer == "function") {
          var buffer = new ArrayBuffer(8);
          if (Object.isExtensible(buffer))
            Object.defineProperty(buffer, "a", { value: 8 });
        }
      });
    }
  });

  // node_modules/core-js-pure/internals/object-is-extensible.js
  var require_object_is_extensible = __commonJS({
    "node_modules/core-js-pure/internals/object-is-extensible.js": function(exports, module) {
      var fails = require_fails();
      var isObject = require_is_object();
      var classof = require_classof_raw();
      var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
      var $isExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $isExtensible(1);
      });
      module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
        if (!isObject(it))
          return false;
        if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
          return false;
        return $isExtensible ? $isExtensible(it) : true;
      } : $isExtensible;
    }
  });

  // node_modules/core-js-pure/internals/freezing.js
  var require_freezing = __commonJS({
    "node_modules/core-js-pure/internals/freezing.js": function(exports, module) {
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      });
    }
  });

  // node_modules/core-js-pure/internals/internal-metadata.js
  var require_internal_metadata = __commonJS({
    "node_modules/core-js-pure/internals/internal-metadata.js": function(exports, module) {
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var hiddenKeys = require_hidden_keys();
      var isObject = require_is_object();
      var hasOwn = require_has_own_property();
      var defineProperty = require_object_define_property().f;
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
      var isExtensible = require_object_is_extensible();
      var uid = require_uid();
      var FREEZING = require_freezing();
      var REQUIRED = false;
      var METADATA = uid("meta");
      var id = 0;
      var setMetadata = function(it) {
        defineProperty(it, METADATA, { value: {
          objectID: "O" + id++,
          weakData: {}
        } });
      };
      var fastKey = function(it, create) {
        if (!isObject(it))
          return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!hasOwn(it, METADATA)) {
          if (!isExtensible(it))
            return "F";
          if (!create)
            return "E";
          setMetadata(it);
        }
        return it[METADATA].objectID;
      };
      var getWeakData = function(it, create) {
        if (!hasOwn(it, METADATA)) {
          if (!isExtensible(it))
            return true;
          if (!create)
            return false;
          setMetadata(it);
        }
        return it[METADATA].weakData;
      };
      var onFreeze = function(it) {
        if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
          setMetadata(it);
        return it;
      };
      var enable = function() {
        meta.enable = function() {
        };
        REQUIRED = true;
        var getOwnPropertyNames = getOwnPropertyNamesModule.f;
        var splice = uncurryThis([].splice);
        var test = {};
        test[METADATA] = 1;
        if (getOwnPropertyNames(test).length) {
          getOwnPropertyNamesModule.f = function(it) {
            var result = getOwnPropertyNames(it);
            for (var i = 0, length = result.length; i < length; i++) {
              if (result[i] === METADATA) {
                splice(result, i, 1);
                break;
              }
            }
            return result;
          };
          $({ target: "Object", stat: true, forced: true }, {
            getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
          });
        }
      };
      var meta = module.exports = {
        enable: enable,
        fastKey: fastKey,
        getWeakData: getWeakData,
        onFreeze: onFreeze
      };
      hiddenKeys[METADATA] = true;
    }
  });

  // node_modules/core-js-pure/internals/is-array-iterator-method.js
  var require_is_array_iterator_method = __commonJS({
    "node_modules/core-js-pure/internals/is-array-iterator-method.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators();
      var ITERATOR = wellKnownSymbol("iterator");
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
    }
  });

  // node_modules/core-js-pure/internals/get-iterator-method.js
  var require_get_iterator_method = __commonJS({
    "node_modules/core-js-pure/internals/get-iterator-method.js": function(exports, module) {
      var classof = require_classof();
      var getMethod = require_get_method();
      var isNullOrUndefined = require_is_null_or_undefined();
      var Iterators = require_iterators();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = function(it) {
        if (!isNullOrUndefined(it))
          return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
      };
    }
  });

  // node_modules/core-js-pure/internals/get-iterator.js
  var require_get_iterator = __commonJS({
    "node_modules/core-js-pure/internals/get-iterator.js": function(exports, module) {
      var call = require_function_call();
      var aCallable = require_a_callable();
      var anObject = require_an_object();
      var tryToString = require_try_to_string();
      var getIteratorMethod = require_get_iterator_method();
      var $TypeError = TypeError;
      module.exports = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
        if (aCallable(iteratorMethod))
          return anObject(call(iteratorMethod, argument));
        throw $TypeError(tryToString(argument) + " is not iterable");
      };
    }
  });

  // node_modules/core-js-pure/internals/iterator-close.js
  var require_iterator_close = __commonJS({
    "node_modules/core-js-pure/internals/iterator-close.js": function(exports, module) {
      var call = require_function_call();
      var anObject = require_an_object();
      var getMethod = require_get_method();
      module.exports = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject(iterator);
        try {
          innerResult = getMethod(iterator, "return");
          if (!innerResult) {
            if (kind === "throw")
              throw value;
            return value;
          }
          innerResult = call(innerResult, iterator);
        } catch (error) {
          innerError = true;
          innerResult = error;
        }
        if (kind === "throw")
          throw value;
        if (innerError)
          throw innerResult;
        anObject(innerResult);
        return value;
      };
    }
  });

  // node_modules/core-js-pure/internals/iterate.js
  var require_iterate = __commonJS({
    "node_modules/core-js-pure/internals/iterate.js": function(exports, module) {
      var bind = require_function_bind_context();
      var call = require_function_call();
      var anObject = require_an_object();
      var tryToString = require_try_to_string();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var lengthOfArrayLike = require_length_of_array_like();
      var isPrototypeOf = require_object_is_prototype_of();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var iteratorClose = require_iterator_close();
      var $TypeError = TypeError;
      var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };
      var ResultPrototype = Result.prototype;
      module.exports = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_RECORD = !!(options && options.IS_RECORD);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind(unboundFunction, that);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
          if (iterator)
            iteratorClose(iterator, "normal", condition);
          return new Result(true, condition);
        };
        var callFn = function(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }
          return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_RECORD) {
          iterator = iterable.iterator;
        } else if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (!iterFn)
            throw $TypeError(tryToString(iterable) + " is not iterable");
          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && isPrototypeOf(ResultPrototype, result))
                return result;
            }
            return new Result(false);
          }
          iterator = getIterator(iterable, iterFn);
        }
        next = IS_RECORD ? iterable.next : iterator.next;
        while (!(step = call(next, iterator)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator, "throw", error);
          }
          if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
            return result;
        }
        return new Result(false);
      };
    }
  });

  // node_modules/core-js-pure/internals/an-instance.js
  var require_an_instance = __commonJS({
    "node_modules/core-js-pure/internals/an-instance.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var $TypeError = TypeError;
      module.exports = function(it, Prototype) {
        if (isPrototypeOf(Prototype, it))
          return it;
        throw $TypeError("Incorrect invocation");
      };
    }
  });

  // node_modules/core-js-pure/internals/collection.js
  var require_collection = __commonJS({
    "node_modules/core-js-pure/internals/collection.js": function(exports, module) {
      "use strict";
      var $ = require_export();
      var global2 = require_global();
      var InternalMetadataModule = require_internal_metadata();
      var fails = require_fails();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var iterate = require_iterate();
      var anInstance = require_an_instance();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var setToStringTag = require_set_to_string_tag();
      var defineProperty = require_object_define_property().f;
      var forEach = require_array_iteration().forEach;
      var DESCRIPTORS = require_descriptors();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global2[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var exported = {};
        var Constructor;
        if (!DESCRIPTORS || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
          new NativeConstructor().entries().next();
        }))) {
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          InternalMetadataModule.enable();
        } else {
          Constructor = wrapper(function(target, iterable) {
            setInternalState(anInstance(target, Prototype), {
              type: CONSTRUCTOR_NAME,
              collection: new NativeConstructor()
            });
            if (iterable != void 0)
              iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
          });
          var Prototype = Constructor.prototype;
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
            var IS_ADDER = KEY == "add" || KEY == "set";
            if (KEY in NativePrototype && !(IS_WEAK && KEY == "clear")) {
              createNonEnumerableProperty(Prototype, KEY, function(a, b) {
                var collection = getInternalState(this).collection;
                if (!IS_ADDER && IS_WEAK && !isObject(a))
                  return KEY == "get" ? void 0 : false;
                var result = collection[KEY](a === 0 ? 0 : a, b);
                return IS_ADDER ? this : result;
              });
            }
          });
          IS_WEAK || defineProperty(Prototype, "size", {
            configurable: true,
            get: function() {
              return getInternalState(this).collection.size;
            }
          });
        }
        setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
        exported[CONSTRUCTOR_NAME] = Constructor;
        $({ global: true, forced: true }, exported);
        if (!IS_WEAK)
          common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
    }
  });

  // node_modules/core-js-pure/internals/collection-weak.js
  var require_collection_weak = __commonJS({
    "node_modules/core-js-pure/internals/collection-weak.js": function(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var defineBuiltIns = require_define_built_ins();
      var getWeakData = require_internal_metadata().getWeakData;
      var anInstance = require_an_instance();
      var anObject = require_an_object();
      var isNullOrUndefined = require_is_null_or_undefined();
      var isObject = require_is_object();
      var iterate = require_iterate();
      var ArrayIterationModule = require_array_iteration();
      var hasOwn = require_has_own_property();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var find = ArrayIterationModule.find;
      var findIndex = ArrayIterationModule.findIndex;
      var splice = uncurryThis([].splice);
      var id = 0;
      var uncaughtFrozenStore = function(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function() {
        this.entries = [];
      };
      var findUncaughtFrozen = function(store, key) {
        return find(store.entries, function(it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            return entry[1];
        },
        has: function(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            entry[1] = value;
          else
            this.entries.push([key, value]);
        },
        "delete": function(key) {
          var index = findIndex(this.entries, function(it) {
            return it[0] === key;
          });
          if (~index)
            splice(this.entries, index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var Constructor = wrapper(function(that, iterable) {
            anInstance(that, Prototype);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: void 0
            });
            if (!isNullOrUndefined(iterable))
              iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
          });
          var Prototype = Constructor.prototype;
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define2 = function(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true)
              uncaughtFrozenStore(state).set(key, value);
            else
              data[state.id] = value;
            return that;
          };
          defineBuiltIns(Prototype, {
            "delete": function(key) {
              var state = getInternalState(this);
              if (!isObject(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state)["delete"](key);
              return data && hasOwn(data, state.id) && delete data[state.id];
            },
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state).has(key);
              return data && hasOwn(data, state.id);
            }
          });
          defineBuiltIns(Prototype, IS_MAP ? {
            get: function get(key) {
              var state = getInternalState(this);
              if (isObject(key)) {
                var data = getWeakData(key);
                if (data === true)
                  return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : void 0;
              }
            },
            set: function set(key, value) {
              return define2(this, key, value);
            }
          } : {
            add: function add(value) {
              return define2(this, value, true);
            }
          });
          return Constructor;
        }
      };
    }
  });

  // node_modules/core-js-pure/modules/es.weak-map.constructor.js
  var require_es_weak_map_constructor = __commonJS({
    "node_modules/core-js-pure/modules/es.weak-map.constructor.js": function() {
      "use strict";
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var defineBuiltIns = require_define_built_ins();
      var InternalMetadataModule = require_internal_metadata();
      var collection = require_collection();
      var collectionWeak = require_collection_weak();
      var isObject = require_is_object();
      var isExtensible = require_object_is_extensible();
      var enforceInternalState = require_internal_state().enforce;
      var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
      var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
      var InternalWeakMap;
      var wrapper = function(init) {
        return function WeakMap2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      };
      var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
        InternalMetadataModule.enable();
        WeakMapPrototype = $WeakMap.prototype;
        nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
        nativeHas = uncurryThis(WeakMapPrototype.has);
        nativeGet = uncurryThis(WeakMapPrototype.get);
        nativeSet = uncurryThis(WeakMapPrototype.set);
        defineBuiltIns(WeakMapPrototype, {
          "delete": function(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeDelete(this, key) || state.frozen["delete"](key);
            }
            return nativeDelete(this, key);
          },
          has: function has(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas(this, key) || state.frozen.has(key);
            }
            return nativeHas(this, key);
          },
          get: function get(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
            }
            return nativeGet(this, key);
          },
          set: function set(key, value) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
            } else
              nativeSet(this, key, value);
            return this;
          }
        });
      }
      var WeakMapPrototype;
      var nativeDelete;
      var nativeHas;
      var nativeGet;
      var nativeSet;
    }
  });

  // node_modules/core-js-pure/modules/es.weak-map.js
  var require_es_weak_map = __commonJS({
    "node_modules/core-js-pure/modules/es.weak-map.js": function() {
      require_es_weak_map_constructor();
    }
  });

  // node_modules/core-js-pure/es/weak-map/index.js
  var require_weak_map = __commonJS({
    "node_modules/core-js-pure/es/weak-map/index.js": function(exports, module) {
      require_es_array_iterator();
      require_es_object_to_string();
      require_es_weak_map();
      var path = require_path();
      module.exports = path.WeakMap;
    }
  });

  // node_modules/core-js-pure/stable/weak-map/index.js
  var require_weak_map2 = __commonJS({
    "node_modules/core-js-pure/stable/weak-map/index.js": function(exports, module) {
      var parent = require_weak_map();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/weak-map/index.js
  var require_weak_map3 = __commonJS({
    "node_modules/core-js-pure/actual/weak-map/index.js": function(exports, module) {
      var parent = require_weak_map2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/internals/map-emplace.js
  var require_map_emplace = __commonJS({
    "node_modules/core-js-pure/internals/map-emplace.js": function(exports, module) {
      "use strict";
      var call = require_function_call();
      var aCallable = require_a_callable();
      var anObject = require_an_object();
      module.exports = function emplace(key, handler) {
        var map = anObject(this);
        var get = aCallable(map.get);
        var has = aCallable(map.has);
        var set = aCallable(map.set);
        var value, inserted;
        if (call(has, map, key)) {
          value = call(get, map, key);
          if ("update" in handler) {
            value = handler.update(value, key, map);
            call(set, map, key, value);
          }
          return value;
        }
        inserted = handler.insert(key, map);
        call(set, map, key, inserted);
        return inserted;
      };
    }
  });

  // node_modules/core-js-pure/modules/esnext.weak-map.emplace.js
  var require_esnext_weak_map_emplace = __commonJS({
    "node_modules/core-js-pure/modules/esnext.weak-map.emplace.js": function() {
      "use strict";
      var $ = require_export();
      var emplace = require_map_emplace();
      $({ target: "WeakMap", proto: true, real: true, forced: true }, {
        emplace: emplace
      });
    }
  });

  // node_modules/core-js-pure/internals/a-constructor.js
  var require_a_constructor = __commonJS({
    "node_modules/core-js-pure/internals/a-constructor.js": function(exports, module) {
      var isConstructor = require_is_constructor();
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isConstructor(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a constructor");
      };
    }
  });

  // node_modules/core-js-pure/internals/collection-from.js
  var require_collection_from = __commonJS({
    "node_modules/core-js-pure/internals/collection-from.js": function(exports, module) {
      "use strict";
      var bind = require_function_bind_context();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var aConstructor = require_a_constructor();
      var isNullOrUndefined = require_is_null_or_undefined();
      var iterate = require_iterate();
      var push = [].push;
      module.exports = function from(source) {
        var length = arguments.length;
        var mapFn = length > 1 ? arguments[1] : void 0;
        var mapping, array, n, boundFunction;
        aConstructor(this);
        mapping = mapFn !== void 0;
        if (mapping)
          aCallable(mapFn);
        if (isNullOrUndefined(source))
          return new this();
        array = [];
        if (mapping) {
          n = 0;
          boundFunction = bind(mapFn, length > 2 ? arguments[2] : void 0);
          iterate(source, function(nextItem) {
            call(push, array, boundFunction(nextItem, n++));
          });
        } else {
          iterate(source, push, { that: array });
        }
        return new this(array);
      };
    }
  });

  // node_modules/core-js-pure/modules/esnext.weak-map.from.js
  var require_esnext_weak_map_from = __commonJS({
    "node_modules/core-js-pure/modules/esnext.weak-map.from.js": function() {
      var $ = require_export();
      var from = require_collection_from();
      $({ target: "WeakMap", stat: true, forced: true }, {
        from: from
      });
    }
  });

  // node_modules/core-js-pure/internals/collection-of.js
  var require_collection_of = __commonJS({
    "node_modules/core-js-pure/internals/collection-of.js": function(exports, module) {
      "use strict";
      var arraySlice = require_array_slice();
      module.exports = function of() {
        return new this(arraySlice(arguments));
      };
    }
  });

  // node_modules/core-js-pure/modules/esnext.weak-map.of.js
  var require_esnext_weak_map_of = __commonJS({
    "node_modules/core-js-pure/modules/esnext.weak-map.of.js": function() {
      var $ = require_export();
      var of = require_collection_of();
      $({ target: "WeakMap", stat: true, forced: true }, {
        of: of
      });
    }
  });

  // node_modules/core-js-pure/internals/collection-delete-all.js
  var require_collection_delete_all = __commonJS({
    "node_modules/core-js-pure/internals/collection-delete-all.js": function(exports, module) {
      "use strict";
      var call = require_function_call();
      var aCallable = require_a_callable();
      var anObject = require_an_object();
      module.exports = function deleteAll() {
        var collection = anObject(this);
        var remover = aCallable(collection["delete"]);
        var allDeleted = true;
        var wasDeleted;
        for (var k = 0, len = arguments.length; k < len; k++) {
          wasDeleted = call(remover, collection, arguments[k]);
          allDeleted = allDeleted && wasDeleted;
        }
        return !!allDeleted;
      };
    }
  });

  // node_modules/core-js-pure/modules/esnext.weak-map.delete-all.js
  var require_esnext_weak_map_delete_all = __commonJS({
    "node_modules/core-js-pure/modules/esnext.weak-map.delete-all.js": function() {
      "use strict";
      var $ = require_export();
      var deleteAll = require_collection_delete_all();
      $({ target: "WeakMap", proto: true, real: true, forced: true }, {
        deleteAll: deleteAll
      });
    }
  });

  // node_modules/core-js-pure/internals/map-upsert.js
  var require_map_upsert = __commonJS({
    "node_modules/core-js-pure/internals/map-upsert.js": function(exports, module) {
      "use strict";
      var call = require_function_call();
      var aCallable = require_a_callable();
      var isCallable = require_is_callable();
      var anObject = require_an_object();
      var $TypeError = TypeError;
      module.exports = function upsert(key, updateFn) {
        var map = anObject(this);
        var get = aCallable(map.get);
        var has = aCallable(map.has);
        var set = aCallable(map.set);
        var insertFn = arguments.length > 2 ? arguments[2] : void 0;
        var value;
        if (!isCallable(updateFn) && !isCallable(insertFn)) {
          throw $TypeError("At least one callback required");
        }
        if (call(has, map, key)) {
          value = call(get, map, key);
          if (isCallable(updateFn)) {
            value = updateFn(value);
            call(set, map, key, value);
          }
        } else if (isCallable(insertFn)) {
          value = insertFn();
          call(set, map, key, value);
        }
        return value;
      };
    }
  });

  // node_modules/core-js-pure/modules/esnext.weak-map.upsert.js
  var require_esnext_weak_map_upsert = __commonJS({
    "node_modules/core-js-pure/modules/esnext.weak-map.upsert.js": function() {
      "use strict";
      var $ = require_export();
      var upsert = require_map_upsert();
      $({ target: "WeakMap", proto: true, real: true, forced: true }, {
        upsert: upsert
      });
    }
  });

  // node_modules/core-js-pure/full/weak-map/index.js
  var require_weak_map4 = __commonJS({
    "node_modules/core-js-pure/full/weak-map/index.js": function(exports, module) {
      var parent = require_weak_map3();
      require_es_string_iterator();
      require_esnext_weak_map_emplace();
      require_esnext_weak_map_from();
      require_esnext_weak_map_of();
      require_esnext_weak_map_delete_all();
      require_esnext_weak_map_upsert();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/weak-map/index.js
  var require_weak_map5 = __commonJS({
    "node_modules/core-js-pure/features/weak-map/index.js": function(exports, module) {
      module.exports = require_weak_map4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/weak-map.js
  var require_weak_map6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/weak-map.js": function(exports, module) {
      module.exports = require_weak_map5();
    }
  });

  // node_modules/core-js-pure/modules/es.object.define-property.js
  var require_es_object_define_property = __commonJS({
    "node_modules/core-js-pure/modules/es.object.define-property.js": function() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var defineProperty = require_object_define_property().f;
      $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
        defineProperty: defineProperty
      });
    }
  });

  // node_modules/core-js-pure/es/object/define-property.js
  var require_define_property = __commonJS({
    "node_modules/core-js-pure/es/object/define-property.js": function(exports, module) {
      require_es_object_define_property();
      var path = require_path();
      var Object2 = path.Object;
      var defineProperty = module.exports = function defineProperty2(it, key, desc) {
        return Object2.defineProperty(it, key, desc);
      };
      if (Object2.defineProperty.sham)
        defineProperty.sham = true;
    }
  });

  // node_modules/core-js-pure/stable/object/define-property.js
  var require_define_property2 = __commonJS({
    "node_modules/core-js-pure/stable/object/define-property.js": function(exports, module) {
      var parent = require_define_property();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/define-property.js
  var require_define_property3 = __commonJS({
    "node_modules/core-js-pure/actual/object/define-property.js": function(exports, module) {
      var parent = require_define_property2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/define-property.js
  var require_define_property4 = __commonJS({
    "node_modules/core-js-pure/full/object/define-property.js": function(exports, module) {
      var parent = require_define_property3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/define-property.js
  var require_define_property5 = __commonJS({
    "node_modules/core-js-pure/features/object/define-property.js": function(exports, module) {
      module.exports = require_define_property4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/define-property.js
  var require_define_property6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/define-property.js": function(exports, module) {
      module.exports = require_define_property5();
    }
  });

  // node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js
  var require_es_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js": function() {
      var $ = require_export();
      var fails = require_fails();
      var toIndexedObject = require_to_indexed_object();
      var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var DESCRIPTORS = require_descriptors();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetOwnPropertyDescriptor(1);
      });
      var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
      $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
          return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor = __commonJS({
    "node_modules/core-js-pure/es/object/get-own-property-descriptor.js": function(exports, module) {
      require_es_object_get_own_property_descriptor();
      var path = require_path();
      var Object2 = path.Object;
      var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor2(it, key) {
        return Object2.getOwnPropertyDescriptor(it, key);
      };
      if (Object2.getOwnPropertyDescriptor.sham)
        getOwnPropertyDescriptor.sham = true;
    }
  });

  // node_modules/core-js-pure/stable/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor2 = __commonJS({
    "node_modules/core-js-pure/stable/object/get-own-property-descriptor.js": function(exports, module) {
      var parent = require_get_own_property_descriptor();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor3 = __commonJS({
    "node_modules/core-js-pure/actual/object/get-own-property-descriptor.js": function(exports, module) {
      var parent = require_get_own_property_descriptor2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor4 = __commonJS({
    "node_modules/core-js-pure/full/object/get-own-property-descriptor.js": function(exports, module) {
      var parent = require_get_own_property_descriptor3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor5 = __commonJS({
    "node_modules/core-js-pure/features/object/get-own-property-descriptor.js": function(exports, module) {
      module.exports = require_get_own_property_descriptor4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js
  var require_get_own_property_descriptor6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptor.js": function(exports, module) {
      module.exports = require_get_own_property_descriptor5();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/interopRequireWildcard.js
  var require_interopRequireWildcard = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/interopRequireWildcard.js": function(exports, module) {
      var _typeof = require_typeof()["default"];
      var _WeakMap = require_weak_map6();
      var _Object$defineProperty = require_define_property6();
      var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor6();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof _WeakMap !== "function")
          return null;
        var cacheBabelInterop = new _WeakMap();
        var cacheNodeInterop = new _WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard2(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return {
            "default": obj
          };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              _Object$defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      module.exports = _interopRequireWildcard2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js/internals/global.js
  var require_global2 = __commonJS({
    "node_modules/core-js/internals/global.js": function(exports, module) {
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
        return this;
      }() || Function("return this")();
    }
  });

  // node_modules/core-js/internals/fails.js
  var require_fails2 = __commonJS({
    "node_modules/core-js/internals/fails.js": function(exports, module) {
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js/internals/descriptors.js
  var require_descriptors2 = __commonJS({
    "node_modules/core-js/internals/descriptors.js": function(exports, module) {
      var fails = require_fails2();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // node_modules/core-js/internals/function-bind-native.js
  var require_function_bind_native2 = __commonJS({
    "node_modules/core-js/internals/function-bind-native.js": function(exports, module) {
      var fails = require_fails2();
      module.exports = !fails(function() {
        var test = function() {
        }.bind();
        return typeof test != "function" || test.hasOwnProperty("prototype");
      });
    }
  });

  // node_modules/core-js/internals/function-call.js
  var require_function_call2 = __commonJS({
    "node_modules/core-js/internals/function-call.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native2();
      var call = Function.prototype.call;
      module.exports = NATIVE_BIND ? call.bind(call) : function() {
        return call.apply(call, arguments);
      };
    }
  });

  // node_modules/core-js/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable2 = __commonJS({
    "node_modules/core-js/internals/object-property-is-enumerable.js": function(exports) {
      "use strict";
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // node_modules/core-js/internals/create-property-descriptor.js
  var require_create_property_descriptor2 = __commonJS({
    "node_modules/core-js/internals/create-property-descriptor.js": function(exports, module) {
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
    }
  });

  // node_modules/core-js/internals/function-uncurry-this.js
  var require_function_uncurry_this2 = __commonJS({
    "node_modules/core-js/internals/function-uncurry-this.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native2();
      var FunctionPrototype = Function.prototype;
      var call = FunctionPrototype.call;
      var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
      module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
        return function() {
          return call.apply(fn, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/classof-raw.js
  var require_classof_raw2 = __commonJS({
    "node_modules/core-js/internals/classof-raw.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // node_modules/core-js/internals/indexed-object.js
  var require_indexed_object2 = __commonJS({
    "node_modules/core-js/internals/indexed-object.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var fails = require_fails2();
      var classof = require_classof_raw2();
      var $Object = Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !$Object("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split(it, "") : $Object(it);
      } : $Object;
    }
  });

  // node_modules/core-js/internals/is-null-or-undefined.js
  var require_is_null_or_undefined2 = __commonJS({
    "node_modules/core-js/internals/is-null-or-undefined.js": function(exports, module) {
      module.exports = function(it) {
        return it === null || it === void 0;
      };
    }
  });

  // node_modules/core-js/internals/require-object-coercible.js
  var require_require_object_coercible2 = __commonJS({
    "node_modules/core-js/internals/require-object-coercible.js": function(exports, module) {
      var isNullOrUndefined = require_is_null_or_undefined2();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isNullOrUndefined(it))
          throw $TypeError("Can't call method on " + it);
        return it;
      };
    }
  });

  // node_modules/core-js/internals/to-indexed-object.js
  var require_to_indexed_object2 = __commonJS({
    "node_modules/core-js/internals/to-indexed-object.js": function(exports, module) {
      var IndexedObject = require_indexed_object2();
      var requireObjectCoercible = require_require_object_coercible2();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // node_modules/core-js/internals/document-all.js
  var require_document_all2 = __commonJS({
    "node_modules/core-js/internals/document-all.js": function(exports, module) {
      var documentAll = typeof document == "object" && document.all;
      var IS_HTMLDDA = typeof documentAll == "undefined" && documentAll !== void 0;
      module.exports = {
        all: documentAll,
        IS_HTMLDDA: IS_HTMLDDA
      };
    }
  });

  // node_modules/core-js/internals/is-callable.js
  var require_is_callable2 = __commonJS({
    "node_modules/core-js/internals/is-callable.js": function(exports, module) {
      var $documentAll = require_document_all2();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(argument) {
        return typeof argument == "function" || argument === documentAll;
      } : function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // node_modules/core-js/internals/is-object.js
  var require_is_object2 = __commonJS({
    "node_modules/core-js/internals/is-object.js": function(exports, module) {
      var isCallable = require_is_callable2();
      var $documentAll = require_document_all2();
      var documentAll = $documentAll.all;
      module.exports = $documentAll.IS_HTMLDDA ? function(it) {
        return typeof it == "object" ? it !== null : isCallable(it) || it === documentAll;
      } : function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // node_modules/core-js/internals/get-built-in.js
  var require_get_built_in2 = __commonJS({
    "node_modules/core-js/internals/get-built-in.js": function(exports, module) {
      var global2 = require_global2();
      var isCallable = require_is_callable2();
      var aFunction = function(argument) {
        return isCallable(argument) ? argument : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
      };
    }
  });

  // node_modules/core-js/internals/object-is-prototype-of.js
  var require_object_is_prototype_of2 = __commonJS({
    "node_modules/core-js/internals/object-is-prototype-of.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // node_modules/core-js/internals/engine-user-agent.js
  var require_engine_user_agent2 = __commonJS({
    "node_modules/core-js/internals/engine-user-agent.js": function(exports, module) {
      var getBuiltIn = require_get_built_in2();
      module.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // node_modules/core-js/internals/engine-v8-version.js
  var require_engine_v8_version2 = __commonJS({
    "node_modules/core-js/internals/engine-v8-version.js": function(exports, module) {
      var global2 = require_global2();
      var userAgent = require_engine_user_agent2();
      var process2 = global2.process;
      var Deno2 = global2.Deno;
      var versions = process2 && process2.versions || Deno2 && Deno2.version;
      var v8 = versions && versions.v8;
      var match;
      var version;
      if (v8) {
        match = v8.split(".");
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version = +match[1];
        }
      }
      module.exports = version;
    }
  });

  // node_modules/core-js/internals/symbol-constructor-detection.js
  var require_symbol_constructor_detection2 = __commonJS({
    "node_modules/core-js/internals/symbol-constructor-detection.js": function(exports, module) {
      var V8_VERSION = require_engine_v8_version2();
      var fails = require_fails2();
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // node_modules/core-js/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid2 = __commonJS({
    "node_modules/core-js/internals/use-symbol-as-uid.js": function(exports, module) {
      var NATIVE_SYMBOL = require_symbol_constructor_detection2();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // node_modules/core-js/internals/is-symbol.js
  var require_is_symbol2 = __commonJS({
    "node_modules/core-js/internals/is-symbol.js": function(exports, module) {
      var getBuiltIn = require_get_built_in2();
      var isCallable = require_is_callable2();
      var isPrototypeOf = require_object_is_prototype_of2();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid2();
      var $Object = Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
      };
    }
  });

  // node_modules/core-js/internals/try-to-string.js
  var require_try_to_string2 = __commonJS({
    "node_modules/core-js/internals/try-to-string.js": function(exports, module) {
      var $String = String;
      module.exports = function(argument) {
        try {
          return $String(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // node_modules/core-js/internals/a-callable.js
  var require_a_callable2 = __commonJS({
    "node_modules/core-js/internals/a-callable.js": function(exports, module) {
      var isCallable = require_is_callable2();
      var tryToString = require_try_to_string2();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isCallable(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a function");
      };
    }
  });

  // node_modules/core-js/internals/get-method.js
  var require_get_method2 = __commonJS({
    "node_modules/core-js/internals/get-method.js": function(exports, module) {
      var aCallable = require_a_callable2();
      var isNullOrUndefined = require_is_null_or_undefined2();
      module.exports = function(V, P) {
        var func = V[P];
        return isNullOrUndefined(func) ? void 0 : aCallable(func);
      };
    }
  });

  // node_modules/core-js/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive2 = __commonJS({
    "node_modules/core-js/internals/ordinary-to-primitive.js": function(exports, module) {
      var call = require_function_call2();
      var isCallable = require_is_callable2();
      var isObject = require_is_object2();
      var $TypeError = TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
          return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
          return val;
        throw $TypeError("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js/internals/is-pure.js
  var require_is_pure2 = __commonJS({
    "node_modules/core-js/internals/is-pure.js": function(exports, module) {
      module.exports = false;
    }
  });

  // node_modules/core-js/internals/define-global-property.js
  var require_define_global_property2 = __commonJS({
    "node_modules/core-js/internals/define-global-property.js": function(exports, module) {
      var global2 = require_global2();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(global2, key, { value: value, configurable: true, writable: true });
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // node_modules/core-js/internals/shared-store.js
  var require_shared_store2 = __commonJS({
    "node_modules/core-js/internals/shared-store.js": function(exports, module) {
      var global2 = require_global2();
      var defineGlobalProperty = require_define_global_property2();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
      module.exports = store;
    }
  });

  // node_modules/core-js/internals/shared.js
  var require_shared2 = __commonJS({
    "node_modules/core-js/internals/shared.js": function(exports, module) {
      var IS_PURE = require_is_pure2();
      var store = require_shared_store2();
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.26.1",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.26.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // node_modules/core-js/internals/to-object.js
  var require_to_object2 = __commonJS({
    "node_modules/core-js/internals/to-object.js": function(exports, module) {
      var requireObjectCoercible = require_require_object_coercible2();
      var $Object = Object;
      module.exports = function(argument) {
        return $Object(requireObjectCoercible(argument));
      };
    }
  });

  // node_modules/core-js/internals/has-own-property.js
  var require_has_own_property2 = __commonJS({
    "node_modules/core-js/internals/has-own-property.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var toObject = require_to_object2();
      var hasOwnProperty = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
    }
  });

  // node_modules/core-js/internals/uid.js
  var require_uid2 = __commonJS({
    "node_modules/core-js/internals/uid.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var id = 0;
      var postfix = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
    }
  });

  // node_modules/core-js/internals/well-known-symbol.js
  var require_well_known_symbol2 = __commonJS({
    "node_modules/core-js/internals/well-known-symbol.js": function(exports, module) {
      var global2 = require_global2();
      var shared = require_shared2();
      var hasOwn = require_has_own_property2();
      var uid = require_uid2();
      var NATIVE_SYMBOL = require_symbol_constructor_detection2();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid2();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var symbolFor = Symbol2 && Symbol2["for"];
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
            WellKnownSymbolsStore[name] = Symbol2[name];
          } else if (USE_SYMBOL_AS_UID && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // node_modules/core-js/internals/to-primitive.js
  var require_to_primitive2 = __commonJS({
    "node_modules/core-js/internals/to-primitive.js": function(exports, module) {
      var call = require_function_call2();
      var isObject = require_is_object2();
      var isSymbol = require_is_symbol2();
      var getMethod = require_get_method2();
      var ordinaryToPrimitive = require_ordinary_to_primitive2();
      var wellKnownSymbol = require_well_known_symbol2();
      var $TypeError = TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject(input) || isSymbol(input))
          return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0)
            pref = "default";
          result = call(exoticToPrim, input, pref);
          if (!isObject(result) || isSymbol(result))
            return result;
          throw $TypeError("Can't convert object to primitive value");
        }
        if (pref === void 0)
          pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // node_modules/core-js/internals/to-property-key.js
  var require_to_property_key2 = __commonJS({
    "node_modules/core-js/internals/to-property-key.js": function(exports, module) {
      var toPrimitive = require_to_primitive2();
      var isSymbol = require_is_symbol2();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // node_modules/core-js/internals/document-create-element.js
  var require_document_create_element2 = __commonJS({
    "node_modules/core-js/internals/document-create-element.js": function(exports, module) {
      var global2 = require_global2();
      var isObject = require_is_object2();
      var document2 = global2.document;
      var EXISTS = isObject(document2) && isObject(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js/internals/ie8-dom-define.js
  var require_ie8_dom_define2 = __commonJS({
    "node_modules/core-js/internals/ie8-dom-define.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors2();
      var fails = require_fails2();
      var createElement = require_document_create_element2();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // node_modules/core-js/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor2 = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-descriptor.js": function(exports) {
      var DESCRIPTORS = require_descriptors2();
      var call = require_function_call2();
      var propertyIsEnumerableModule = require_object_property_is_enumerable2();
      var createPropertyDescriptor = require_create_property_descriptor2();
      var toIndexedObject = require_to_indexed_object2();
      var toPropertyKey = require_to_property_key2();
      var hasOwn = require_has_own_property2();
      var IE8_DOM_DEFINE = require_ie8_dom_define2();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE)
          try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (hasOwn(O, P))
          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // node_modules/core-js/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug2 = __commonJS({
    "node_modules/core-js/internals/v8-prototype-define-bug.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors2();
      var fails = require_fails2();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
    }
  });

  // node_modules/core-js/internals/an-object.js
  var require_an_object2 = __commonJS({
    "node_modules/core-js/internals/an-object.js": function(exports, module) {
      var isObject = require_is_object2();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isObject(argument))
          return argument;
        throw $TypeError($String(argument) + " is not an object");
      };
    }
  });

  // node_modules/core-js/internals/object-define-property.js
  var require_object_define_property2 = __commonJS({
    "node_modules/core-js/internals/object-define-property.js": function(exports) {
      var DESCRIPTORS = require_descriptors2();
      var IE8_DOM_DEFINE = require_ie8_dom_define2();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug2();
      var anObject = require_an_object2();
      var toPropertyKey = require_to_property_key2();
      var $TypeError = TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw $TypeError("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property2 = __commonJS({
    "node_modules/core-js/internals/create-non-enumerable-property.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors2();
      var definePropertyModule = require_object_define_property2();
      var createPropertyDescriptor = require_create_property_descriptor2();
      module.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // node_modules/core-js/internals/function-name.js
  var require_function_name2 = __commonJS({
    "node_modules/core-js/internals/function-name.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors2();
      var hasOwn = require_has_own_property2();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS: EXISTS,
        PROPER: PROPER,
        CONFIGURABLE: CONFIGURABLE
      };
    }
  });

  // node_modules/core-js/internals/inspect-source.js
  var require_inspect_source2 = __commonJS({
    "node_modules/core-js/internals/inspect-source.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var isCallable = require_is_callable2();
      var store = require_shared_store2();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // node_modules/core-js/internals/weak-map-basic-detection.js
  var require_weak_map_basic_detection2 = __commonJS({
    "node_modules/core-js/internals/weak-map-basic-detection.js": function(exports, module) {
      var global2 = require_global2();
      var isCallable = require_is_callable2();
      var WeakMap2 = global2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
    }
  });

  // node_modules/core-js/internals/shared-key.js
  var require_shared_key2 = __commonJS({
    "node_modules/core-js/internals/shared-key.js": function(exports, module) {
      var shared = require_shared2();
      var uid = require_uid2();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // node_modules/core-js/internals/hidden-keys.js
  var require_hidden_keys2 = __commonJS({
    "node_modules/core-js/internals/hidden-keys.js": function(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/core-js/internals/internal-state.js
  var require_internal_state2 = __commonJS({
    "node_modules/core-js/internals/internal-state.js": function(exports, module) {
      var NATIVE_WEAK_MAP = require_weak_map_basic_detection2();
      var global2 = require_global2();
      var isObject = require_is_object2();
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      var hasOwn = require_has_own_property2();
      var shared = require_shared_store2();
      var sharedKey = require_shared_key2();
      var hiddenKeys = require_hidden_keys2();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = global2.TypeError;
      var WeakMap2 = global2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        store.get = store.get;
        store.has = store.has;
        store.set = store.set;
        set = function(it, metadata) {
          if (store.has(it))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          store.set(it, metadata);
          return metadata;
        };
        get = function(it) {
          return store.get(it) || {};
        };
        has = function(it) {
          return store.has(it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE))
            throw TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var STATE;
      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
      };
    }
  });

  // node_modules/core-js/internals/make-built-in.js
  var require_make_built_in = __commonJS({
    "node_modules/core-js/internals/make-built-in.js": function(exports, module) {
      var fails = require_fails2();
      var isCallable = require_is_callable2();
      var hasOwn = require_has_own_property2();
      var DESCRIPTORS = require_descriptors2();
      var CONFIGURABLE_FUNCTION_NAME = require_function_name2().CONFIGURABLE;
      var inspectSource = require_inspect_source2();
      var InternalStateModule = require_internal_state2();
      var enforceInternalState = InternalStateModule.enforce;
      var getInternalState = InternalStateModule.get;
      var defineProperty = Object.defineProperty;
      var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function() {
        return defineProperty(function() {
        }, "length", { value: 8 }).length !== 8;
      });
      var TEMPLATE = String(String).split("String");
      var makeBuiltIn = module.exports = function(value, name, options) {
        if (String(name).slice(0, 7) === "Symbol(") {
          name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
        }
        if (options && options.getter)
          name = "get " + name;
        if (options && options.setter)
          name = "set " + name;
        if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
          if (DESCRIPTORS)
            defineProperty(value, "name", { value: name, configurable: true });
          else
            value.name = name;
        }
        if (CONFIGURABLE_LENGTH && options && hasOwn(options, "arity") && value.length !== options.arity) {
          defineProperty(value, "length", { value: options.arity });
        }
        try {
          if (options && hasOwn(options, "constructor") && options.constructor) {
            if (DESCRIPTORS)
              defineProperty(value, "prototype", { writable: false });
          } else if (value.prototype)
            value.prototype = void 0;
        } catch (error) {
        }
        var state = enforceInternalState(value);
        if (!hasOwn(state, "source")) {
          state.source = TEMPLATE.join(typeof name == "string" ? name : "");
        }
        return value;
      };
      Function.prototype.toString = makeBuiltIn(function toString() {
        return isCallable(this) && getInternalState(this).source || inspectSource(this);
      }, "toString");
    }
  });

  // node_modules/core-js/internals/define-built-in.js
  var require_define_built_in2 = __commonJS({
    "node_modules/core-js/internals/define-built-in.js": function(exports, module) {
      var isCallable = require_is_callable2();
      var definePropertyModule = require_object_define_property2();
      var makeBuiltIn = require_make_built_in();
      var defineGlobalProperty = require_define_global_property2();
      module.exports = function(O, key, value, options) {
        if (!options)
          options = {};
        var simple = options.enumerable;
        var name = options.name !== void 0 ? options.name : key;
        if (isCallable(value))
          makeBuiltIn(value, name, options);
        if (options.global) {
          if (simple)
            O[key] = value;
          else
            defineGlobalProperty(key, value);
        } else {
          try {
            if (!options.unsafe)
              delete O[key];
            else if (O[key])
              simple = true;
          } catch (error) {
          }
          if (simple)
            O[key] = value;
          else
            definePropertyModule.f(O, key, {
              value: value,
              enumerable: false,
              configurable: !options.nonConfigurable,
              writable: !options.nonWritable
            });
        }
        return O;
      };
    }
  });

  // node_modules/core-js/internals/math-trunc.js
  var require_math_trunc2 = __commonJS({
    "node_modules/core-js/internals/math-trunc.js": function(exports, module) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = Math.trunc || function trunc(x) {
        var n = +x;
        return (n > 0 ? floor : ceil)(n);
      };
    }
  });

  // node_modules/core-js/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity2 = __commonJS({
    "node_modules/core-js/internals/to-integer-or-infinity.js": function(exports, module) {
      var trunc = require_math_trunc2();
      module.exports = function(argument) {
        var number = +argument;
        return number !== number || number === 0 ? 0 : trunc(number);
      };
    }
  });

  // node_modules/core-js/internals/to-absolute-index.js
  var require_to_absolute_index2 = __commonJS({
    "node_modules/core-js/internals/to-absolute-index.js": function(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity2();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // node_modules/core-js/internals/to-length.js
  var require_to_length2 = __commonJS({
    "node_modules/core-js/internals/to-length.js": function(exports, module) {
      var toIntegerOrInfinity = require_to_integer_or_infinity2();
      var min = Math.min;
      module.exports = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js/internals/length-of-array-like.js
  var require_length_of_array_like2 = __commonJS({
    "node_modules/core-js/internals/length-of-array-like.js": function(exports, module) {
      var toLength = require_to_length2();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // node_modules/core-js/internals/array-includes.js
  var require_array_includes2 = __commonJS({
    "node_modules/core-js/internals/array-includes.js": function(exports, module) {
      var toIndexedObject = require_to_indexed_object2();
      var toAbsoluteIndex = require_to_absolute_index2();
      var lengthOfArrayLike = require_length_of_array_like2();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        includes: createMethod(true),
        indexOf: createMethod(false)
      };
    }
  });

  // node_modules/core-js/internals/object-keys-internal.js
  var require_object_keys_internal2 = __commonJS({
    "node_modules/core-js/internals/object-keys-internal.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var hasOwn = require_has_own_property2();
      var toIndexedObject = require_to_indexed_object2();
      var indexOf = require_array_includes2().indexOf;
      var hiddenKeys = require_hidden_keys2();
      var push = uncurryThis([].push);
      module.exports = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names.length > i)
          if (hasOwn(O, key = names[i++])) {
            ~indexOf(result, key) || push(result, key);
          }
        return result;
      };
    }
  });

  // node_modules/core-js/internals/enum-bug-keys.js
  var require_enum_bug_keys2 = __commonJS({
    "node_modules/core-js/internals/enum-bug-keys.js": function(exports, module) {
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // node_modules/core-js/internals/object-get-own-property-names.js
  var require_object_get_own_property_names2 = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-names.js": function(exports) {
      var internalObjectKeys = require_object_keys_internal2();
      var enumBugKeys = require_enum_bug_keys2();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols2 = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-symbols.js": function(exports) {
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js/internals/own-keys.js
  var require_own_keys = __commonJS({
    "node_modules/core-js/internals/own-keys.js": function(exports, module) {
      var getBuiltIn = require_get_built_in2();
      var uncurryThis = require_function_uncurry_this2();
      var getOwnPropertyNamesModule = require_object_get_own_property_names2();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols2();
      var anObject = require_an_object2();
      var concat = uncurryThis([].concat);
      module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // node_modules/core-js/internals/copy-constructor-properties.js
  var require_copy_constructor_properties = __commonJS({
    "node_modules/core-js/internals/copy-constructor-properties.js": function(exports, module) {
      var hasOwn = require_has_own_property2();
      var ownKeys = require_own_keys();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor2();
      var definePropertyModule = require_object_define_property2();
      module.exports = function(target, source, exceptions) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        }
      };
    }
  });

  // node_modules/core-js/internals/is-forced.js
  var require_is_forced2 = __commonJS({
    "node_modules/core-js/internals/is-forced.js": function(exports, module) {
      var fails = require_fails2();
      var isCallable = require_is_callable2();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // node_modules/core-js/internals/export.js
  var require_export2 = __commonJS({
    "node_modules/core-js/internals/export.js": function(exports, module) {
      var global2 = require_global2();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor2().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      var defineBuiltIn = require_define_built_in2();
      var defineGlobalProperty = require_define_global_property2();
      var copyConstructorProperties = require_copy_constructor_properties();
      var isForced = require_is_forced2();
      module.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = global2;
        } else if (STATIC) {
          target = global2[TARGET] || defineGlobalProperty(TARGET, {});
        } else {
          target = (global2[TARGET] || {}).prototype;
        }
        if (target)
          for (key in source) {
            sourceProperty = source[key];
            if (options.dontCallGetSet) {
              descriptor = getOwnPropertyDescriptor(target, key);
              targetProperty = descriptor && descriptor.value;
            } else
              targetProperty = target[key];
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
            if (!FORCED && targetProperty !== void 0) {
              if (typeof sourceProperty == typeof targetProperty)
                continue;
              copyConstructorProperties(sourceProperty, targetProperty);
            }
            if (options.sham || targetProperty && targetProperty.sham) {
              createNonEnumerableProperty(sourceProperty, "sham", true);
            }
            defineBuiltIn(target, key, sourceProperty, options);
          }
      };
    }
  });

  // node_modules/core-js/internals/correct-prototype-getter.js
  var require_correct_prototype_getter2 = __commonJS({
    "node_modules/core-js/internals/correct-prototype-getter.js": function(exports, module) {
      var fails = require_fails2();
      module.exports = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }
  });

  // node_modules/core-js/internals/object-get-prototype-of.js
  var require_object_get_prototype_of2 = __commonJS({
    "node_modules/core-js/internals/object-get-prototype-of.js": function(exports, module) {
      var hasOwn = require_has_own_property2();
      var isCallable = require_is_callable2();
      var toObject = require_to_object2();
      var sharedKey = require_shared_key2();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter2();
      var IE_PROTO = sharedKey("IE_PROTO");
      var $Object = Object;
      var ObjectPrototype = $Object.prototype;
      module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
        var object = toObject(O);
        if (hasOwn(object, IE_PROTO))
          return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof $Object ? ObjectPrototype : null;
      };
    }
  });

  // node_modules/core-js/internals/a-possible-prototype.js
  var require_a_possible_prototype2 = __commonJS({
    "node_modules/core-js/internals/a-possible-prototype.js": function(exports, module) {
      var isCallable = require_is_callable2();
      var $String = String;
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (typeof argument == "object" || isCallable(argument))
          return argument;
        throw $TypeError("Can't set " + $String(argument) + " as a prototype");
      };
    }
  });

  // node_modules/core-js/internals/object-set-prototype-of.js
  var require_object_set_prototype_of2 = __commonJS({
    "node_modules/core-js/internals/object-set-prototype-of.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var anObject = require_an_object2();
      var aPossiblePrototype = require_a_possible_prototype2();
      module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
          setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
          setter(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER)
            setter(O, proto);
          else
            O.__proto__ = proto;
          return O;
        };
      }() : void 0);
    }
  });

  // node_modules/core-js/internals/object-keys.js
  var require_object_keys2 = __commonJS({
    "node_modules/core-js/internals/object-keys.js": function(exports, module) {
      var internalObjectKeys = require_object_keys_internal2();
      var enumBugKeys = require_enum_bug_keys2();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-define-properties.js
  var require_object_define_properties2 = __commonJS({
    "node_modules/core-js/internals/object-define-properties.js": function(exports) {
      var DESCRIPTORS = require_descriptors2();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug2();
      var definePropertyModule = require_object_define_property2();
      var anObject = require_an_object2();
      var toIndexedObject = require_to_indexed_object2();
      var objectKeys = require_object_keys2();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], props[key]);
        return O;
      };
    }
  });

  // node_modules/core-js/internals/html.js
  var require_html2 = __commonJS({
    "node_modules/core-js/internals/html.js": function(exports, module) {
      var getBuiltIn = require_get_built_in2();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // node_modules/core-js/internals/object-create.js
  var require_object_create2 = __commonJS({
    "node_modules/core-js/internals/object-create.js": function(exports, module) {
      var anObject = require_an_object2();
      var definePropertiesModule = require_object_define_properties2();
      var enumBugKeys = require_enum_bug_keys2();
      var hiddenKeys = require_hidden_keys2();
      var html = require_html2();
      var documentCreateElement = require_document_create_element2();
      var sharedKey = require_shared_key2();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // node_modules/core-js/internals/error-stack-clear.js
  var require_error_stack_clear = __commonJS({
    "node_modules/core-js/internals/error-stack-clear.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var $Error = Error;
      var replace = uncurryThis("".replace);
      var TEST = function(arg) {
        return String($Error(arg).stack);
      }("zxcasd");
      var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
      var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
      module.exports = function(stack, dropEntries) {
        if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error.prepareStackTrace) {
          while (dropEntries--)
            stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
        }
        return stack;
      };
    }
  });

  // node_modules/core-js/internals/install-error-cause.js
  var require_install_error_cause = __commonJS({
    "node_modules/core-js/internals/install-error-cause.js": function(exports, module) {
      var isObject = require_is_object2();
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      module.exports = function(O, options) {
        if (isObject(options) && "cause" in options) {
          createNonEnumerableProperty(O, "cause", options.cause);
        }
      };
    }
  });

  // node_modules/core-js/internals/function-uncurry-this-clause.js
  var require_function_uncurry_this_clause2 = __commonJS({
    "node_modules/core-js/internals/function-uncurry-this-clause.js": function(exports, module) {
      var classofRaw = require_classof_raw2();
      var uncurryThis = require_function_uncurry_this2();
      module.exports = function(fn) {
        if (classofRaw(fn) === "Function")
          return uncurryThis(fn);
      };
    }
  });

  // node_modules/core-js/internals/function-bind-context.js
  var require_function_bind_context2 = __commonJS({
    "node_modules/core-js/internals/function-bind-context.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this_clause2();
      var aCallable = require_a_callable2();
      var NATIVE_BIND = require_function_bind_native2();
      var bind = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/iterators.js
  var require_iterators2 = __commonJS({
    "node_modules/core-js/internals/iterators.js": function(exports, module) {
      module.exports = {};
    }
  });

  // node_modules/core-js/internals/is-array-iterator-method.js
  var require_is_array_iterator_method2 = __commonJS({
    "node_modules/core-js/internals/is-array-iterator-method.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol2();
      var Iterators = require_iterators2();
      var ITERATOR = wellKnownSymbol("iterator");
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
    }
  });

  // node_modules/core-js/internals/to-string-tag-support.js
  var require_to_string_tag_support2 = __commonJS({
    "node_modules/core-js/internals/to-string-tag-support.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol2();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module.exports = String(test) === "[object z]";
    }
  });

  // node_modules/core-js/internals/classof.js
  var require_classof2 = __commonJS({
    "node_modules/core-js/internals/classof.js": function(exports, module) {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support2();
      var isCallable = require_is_callable2();
      var classofRaw = require_classof_raw2();
      var wellKnownSymbol = require_well_known_symbol2();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Object = Object;
      var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // node_modules/core-js/internals/get-iterator-method.js
  var require_get_iterator_method2 = __commonJS({
    "node_modules/core-js/internals/get-iterator-method.js": function(exports, module) {
      var classof = require_classof2();
      var getMethod = require_get_method2();
      var isNullOrUndefined = require_is_null_or_undefined2();
      var Iterators = require_iterators2();
      var wellKnownSymbol = require_well_known_symbol2();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = function(it) {
        if (!isNullOrUndefined(it))
          return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
      };
    }
  });

  // node_modules/core-js/internals/get-iterator.js
  var require_get_iterator2 = __commonJS({
    "node_modules/core-js/internals/get-iterator.js": function(exports, module) {
      var call = require_function_call2();
      var aCallable = require_a_callable2();
      var anObject = require_an_object2();
      var tryToString = require_try_to_string2();
      var getIteratorMethod = require_get_iterator_method2();
      var $TypeError = TypeError;
      module.exports = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
        if (aCallable(iteratorMethod))
          return anObject(call(iteratorMethod, argument));
        throw $TypeError(tryToString(argument) + " is not iterable");
      };
    }
  });

  // node_modules/core-js/internals/iterator-close.js
  var require_iterator_close2 = __commonJS({
    "node_modules/core-js/internals/iterator-close.js": function(exports, module) {
      var call = require_function_call2();
      var anObject = require_an_object2();
      var getMethod = require_get_method2();
      module.exports = function(iterator, kind, value) {
        var innerResult, innerError;
        anObject(iterator);
        try {
          innerResult = getMethod(iterator, "return");
          if (!innerResult) {
            if (kind === "throw")
              throw value;
            return value;
          }
          innerResult = call(innerResult, iterator);
        } catch (error) {
          innerError = true;
          innerResult = error;
        }
        if (kind === "throw")
          throw value;
        if (innerError)
          throw innerResult;
        anObject(innerResult);
        return value;
      };
    }
  });

  // node_modules/core-js/internals/iterate.js
  var require_iterate2 = __commonJS({
    "node_modules/core-js/internals/iterate.js": function(exports, module) {
      var bind = require_function_bind_context2();
      var call = require_function_call2();
      var anObject = require_an_object2();
      var tryToString = require_try_to_string2();
      var isArrayIteratorMethod = require_is_array_iterator_method2();
      var lengthOfArrayLike = require_length_of_array_like2();
      var isPrototypeOf = require_object_is_prototype_of2();
      var getIterator = require_get_iterator2();
      var getIteratorMethod = require_get_iterator_method2();
      var iteratorClose = require_iterator_close2();
      var $TypeError = TypeError;
      var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };
      var ResultPrototype = Result.prototype;
      module.exports = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_RECORD = !!(options && options.IS_RECORD);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind(unboundFunction, that);
        var iterator, iterFn, index, length, result, next, step;
        var stop = function(condition) {
          if (iterator)
            iteratorClose(iterator, "normal", condition);
          return new Result(true, condition);
        };
        var callFn = function(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }
          return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_RECORD) {
          iterator = iterable.iterator;
        } else if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (!iterFn)
            throw $TypeError(tryToString(iterable) + " is not iterable");
          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && isPrototypeOf(ResultPrototype, result))
                return result;
            }
            return new Result(false);
          }
          iterator = getIterator(iterable, iterFn);
        }
        next = IS_RECORD ? iterable.next : iterator.next;
        while (!(step = call(next, iterator)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator, "throw", error);
          }
          if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
            return result;
        }
        return new Result(false);
      };
    }
  });

  // node_modules/core-js/internals/to-string.js
  var require_to_string2 = __commonJS({
    "node_modules/core-js/internals/to-string.js": function(exports, module) {
      var classof = require_classof2();
      var $String = String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return $String(argument);
      };
    }
  });

  // node_modules/core-js/internals/normalize-string-argument.js
  var require_normalize_string_argument = __commonJS({
    "node_modules/core-js/internals/normalize-string-argument.js": function(exports, module) {
      var toString = require_to_string2();
      module.exports = function(argument, $default) {
        return argument === void 0 ? arguments.length < 2 ? "" : $default : toString(argument);
      };
    }
  });

  // node_modules/core-js/internals/error-stack-installable.js
  var require_error_stack_installable = __commonJS({
    "node_modules/core-js/internals/error-stack-installable.js": function(exports, module) {
      var fails = require_fails2();
      var createPropertyDescriptor = require_create_property_descriptor2();
      module.exports = !fails(function() {
        var error = Error("a");
        if (!("stack" in error))
          return true;
        Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
        return error.stack !== 7;
      });
    }
  });

  // node_modules/core-js/modules/es.aggregate-error.constructor.js
  var require_es_aggregate_error_constructor = __commonJS({
    "node_modules/core-js/modules/es.aggregate-error.constructor.js": function() {
      "use strict";
      var $ = require_export2();
      var isPrototypeOf = require_object_is_prototype_of2();
      var getPrototypeOf = require_object_get_prototype_of2();
      var setPrototypeOf = require_object_set_prototype_of2();
      var copyConstructorProperties = require_copy_constructor_properties();
      var create = require_object_create2();
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      var createPropertyDescriptor = require_create_property_descriptor2();
      var clearErrorStack = require_error_stack_clear();
      var installErrorCause = require_install_error_cause();
      var iterate = require_iterate2();
      var normalizeStringArgument = require_normalize_string_argument();
      var wellKnownSymbol = require_well_known_symbol2();
      var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Error = Error;
      var push = [].push;
      var $AggregateError = function AggregateError(errors, message) {
        var options = arguments.length > 2 ? arguments[2] : void 0;
        var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
        var that;
        if (setPrototypeOf) {
          that = setPrototypeOf($Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
        } else {
          that = isInstance ? this : create(AggregateErrorPrototype);
          createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
        }
        if (message !== void 0)
          createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
        if (ERROR_STACK_INSTALLABLE)
          createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
        installErrorCause(that, options);
        var errorsArray = [];
        iterate(errors, push, { that: errorsArray });
        createNonEnumerableProperty(that, "errors", errorsArray);
        return that;
      };
      if (setPrototypeOf)
        setPrototypeOf($AggregateError, $Error);
      else
        copyConstructorProperties($AggregateError, $Error, { name: true });
      var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
        constructor: createPropertyDescriptor(1, $AggregateError),
        message: createPropertyDescriptor(1, ""),
        name: createPropertyDescriptor(1, "AggregateError")
      });
      $({ global: true, constructor: true, arity: 2 }, {
        AggregateError: $AggregateError
      });
    }
  });

  // node_modules/core-js/modules/es.aggregate-error.js
  var require_es_aggregate_error = __commonJS({
    "node_modules/core-js/modules/es.aggregate-error.js": function() {
      require_es_aggregate_error_constructor();
    }
  });

  // node_modules/core-js/internals/add-to-unscopables.js
  var require_add_to_unscopables2 = __commonJS({
    "node_modules/core-js/internals/add-to-unscopables.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol2();
      var create = require_object_create2();
      var defineProperty = require_object_define_property2().f;
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] == void 0) {
        defineProperty(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      }
      module.exports = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }
  });

  // node_modules/core-js/internals/iterators-core.js
  var require_iterators_core2 = __commonJS({
    "node_modules/core-js/internals/iterators-core.js": function(exports, module) {
      "use strict";
      var fails = require_fails2();
      var isCallable = require_is_callable2();
      var isObject = require_is_object2();
      var create = require_object_create2();
      var getPrototypeOf = require_object_get_prototype_of2();
      var defineBuiltIn = require_define_built_in2();
      var wellKnownSymbol = require_well_known_symbol2();
      var IS_PURE = require_is_pure2();
      var ITERATOR = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var IteratorPrototype;
      var PrototypeOfArrayIteratorPrototype;
      var arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator))
          BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
        var test = {};
        return IteratorPrototype[ITERATOR].call(test) !== test;
      });
      if (NEW_ITERATOR_PROTOTYPE)
        IteratorPrototype = {};
      else if (IS_PURE)
        IteratorPrototype = create(IteratorPrototype);
      if (!isCallable(IteratorPrototype[ITERATOR])) {
        defineBuiltIn(IteratorPrototype, ITERATOR, function() {
          return this;
        });
      }
      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
      };
    }
  });

  // node_modules/core-js/internals/set-to-string-tag.js
  var require_set_to_string_tag2 = __commonJS({
    "node_modules/core-js/internals/set-to-string-tag.js": function(exports, module) {
      var defineProperty = require_object_define_property2().f;
      var hasOwn = require_has_own_property2();
      var wellKnownSymbol = require_well_known_symbol2();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      module.exports = function(target, TAG, STATIC) {
        if (target && !STATIC)
          target = target.prototype;
        if (target && !hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
      };
    }
  });

  // node_modules/core-js/internals/iterator-create-constructor.js
  var require_iterator_create_constructor2 = __commonJS({
    "node_modules/core-js/internals/iterator-create-constructor.js": function(exports, module) {
      "use strict";
      var IteratorPrototype = require_iterators_core2().IteratorPrototype;
      var create = require_object_create2();
      var createPropertyDescriptor = require_create_property_descriptor2();
      var setToStringTag = require_set_to_string_tag2();
      var Iterators = require_iterators2();
      var returnThis = function() {
        return this;
      };
      module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }
  });

  // node_modules/core-js/internals/iterator-define.js
  var require_iterator_define2 = __commonJS({
    "node_modules/core-js/internals/iterator-define.js": function(exports, module) {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var IS_PURE = require_is_pure2();
      var FunctionName = require_function_name2();
      var isCallable = require_is_callable2();
      var createIteratorConstructor = require_iterator_create_constructor2();
      var getPrototypeOf = require_object_get_prototype_of2();
      var setPrototypeOf = require_object_set_prototype_of2();
      var setToStringTag = require_set_to_string_tag2();
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      var defineBuiltIn = require_define_built_in2();
      var wellKnownSymbol = require_well_known_symbol2();
      var Iterators = require_iterators2();
      var IteratorsCore = require_iterators_core2();
      var PROPER_FUNCTION_NAME = FunctionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator)
            return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
            return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE)
              Iterators[TO_STRING_TAG] = returnThis;
          }
        }
        if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(IterablePrototype, "name", VALUES);
          } else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return call(nativeIterator, this);
            };
          }
        }
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED)
            for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
              }
            }
          else
            $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
        }
        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
        }
        Iterators[NAME] = defaultIterator;
        return methods;
      };
    }
  });

  // node_modules/core-js/internals/create-iter-result-object.js
  var require_create_iter_result_object2 = __commonJS({
    "node_modules/core-js/internals/create-iter-result-object.js": function(exports, module) {
      module.exports = function(value, done) {
        return { value: value, done: done };
      };
    }
  });

  // node_modules/core-js/modules/es.array.iterator.js
  var require_es_array_iterator2 = __commonJS({
    "node_modules/core-js/modules/es.array.iterator.js": function(exports, module) {
      "use strict";
      var toIndexedObject = require_to_indexed_object2();
      var addToUnscopables = require_add_to_unscopables2();
      var Iterators = require_iterators2();
      var InternalStateModule = require_internal_state2();
      var defineProperty = require_object_define_property2().f;
      var defineIterator = require_iterator_define2();
      var createIterResultObject = require_create_iter_result_object2();
      var IS_PURE = require_is_pure2();
      var DESCRIPTORS = require_descriptors2();
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
      module.exports = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          index: 0,
          kind: kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return createIterResultObject(void 0, true);
        }
        if (kind == "keys")
          return createIterResultObject(index, false);
        if (kind == "values")
          return createIterResultObject(target[index], false);
        return createIterResultObject([index, target[index]], false);
      }, "values");
      var values = Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
      if (!IS_PURE && DESCRIPTORS && values.name !== "values")
        try {
          defineProperty(values, "name", { value: "values" });
        } catch (error) {
        }
    }
  });

  // node_modules/core-js/internals/object-to-string.js
  var require_object_to_string2 = __commonJS({
    "node_modules/core-js/internals/object-to-string.js": function(exports, module) {
      "use strict";
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support2();
      var classof = require_classof2();
      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return "[object " + classof(this) + "]";
      };
    }
  });

  // node_modules/core-js/modules/es.object.to-string.js
  var require_es_object_to_string2 = __commonJS({
    "node_modules/core-js/modules/es.object.to-string.js": function() {
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support2();
      var defineBuiltIn = require_define_built_in2();
      var toString = require_object_to_string2();
      if (!TO_STRING_TAG_SUPPORT) {
        defineBuiltIn(Object.prototype, "toString", toString, { unsafe: true });
      }
    }
  });

  // node_modules/core-js/internals/engine-is-node.js
  var require_engine_is_node = __commonJS({
    "node_modules/core-js/internals/engine-is-node.js": function(exports, module) {
      var classof = require_classof_raw2();
      var global2 = require_global2();
      module.exports = classof(global2.process) == "process";
    }
  });

  // node_modules/core-js/internals/set-species.js
  var require_set_species = __commonJS({
    "node_modules/core-js/internals/set-species.js": function(exports, module) {
      "use strict";
      var getBuiltIn = require_get_built_in2();
      var definePropertyModule = require_object_define_property2();
      var wellKnownSymbol = require_well_known_symbol2();
      var DESCRIPTORS = require_descriptors2();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function() {
              return this;
            }
          });
        }
      };
    }
  });

  // node_modules/core-js/internals/an-instance.js
  var require_an_instance2 = __commonJS({
    "node_modules/core-js/internals/an-instance.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of2();
      var $TypeError = TypeError;
      module.exports = function(it, Prototype) {
        if (isPrototypeOf(Prototype, it))
          return it;
        throw $TypeError("Incorrect invocation");
      };
    }
  });

  // node_modules/core-js/internals/is-constructor.js
  var require_is_constructor2 = __commonJS({
    "node_modules/core-js/internals/is-constructor.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var fails = require_fails2();
      var isCallable = require_is_callable2();
      var classof = require_classof2();
      var getBuiltIn = require_get_built_in2();
      var inspectSource = require_inspect_source2();
      var noop = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        try {
          construct(noop, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // node_modules/core-js/internals/a-constructor.js
  var require_a_constructor2 = __commonJS({
    "node_modules/core-js/internals/a-constructor.js": function(exports, module) {
      var isConstructor = require_is_constructor2();
      var tryToString = require_try_to_string2();
      var $TypeError = TypeError;
      module.exports = function(argument) {
        if (isConstructor(argument))
          return argument;
        throw $TypeError(tryToString(argument) + " is not a constructor");
      };
    }
  });

  // node_modules/core-js/internals/species-constructor.js
  var require_species_constructor = __commonJS({
    "node_modules/core-js/internals/species-constructor.js": function(exports, module) {
      var anObject = require_an_object2();
      var aConstructor = require_a_constructor2();
      var isNullOrUndefined = require_is_null_or_undefined2();
      var wellKnownSymbol = require_well_known_symbol2();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === void 0 || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
      };
    }
  });

  // node_modules/core-js/internals/function-apply.js
  var require_function_apply2 = __commonJS({
    "node_modules/core-js/internals/function-apply.js": function(exports, module) {
      var NATIVE_BIND = require_function_bind_native2();
      var FunctionPrototype = Function.prototype;
      var apply = FunctionPrototype.apply;
      var call = FunctionPrototype.call;
      module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
        return call.apply(apply, arguments);
      });
    }
  });

  // node_modules/core-js/internals/array-slice.js
  var require_array_slice2 = __commonJS({
    "node_modules/core-js/internals/array-slice.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      module.exports = uncurryThis([].slice);
    }
  });

  // node_modules/core-js/internals/validate-arguments-length.js
  var require_validate_arguments_length = __commonJS({
    "node_modules/core-js/internals/validate-arguments-length.js": function(exports, module) {
      var $TypeError = TypeError;
      module.exports = function(passed, required) {
        if (passed < required)
          throw $TypeError("Not enough arguments");
        return passed;
      };
    }
  });

  // node_modules/core-js/internals/engine-is-ios.js
  var require_engine_is_ios = __commonJS({
    "node_modules/core-js/internals/engine-is-ios.js": function(exports, module) {
      var userAgent = require_engine_user_agent2();
      module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
    }
  });

  // node_modules/core-js/internals/task.js
  var require_task = __commonJS({
    "node_modules/core-js/internals/task.js": function(exports, module) {
      var global2 = require_global2();
      var apply = require_function_apply2();
      var bind = require_function_bind_context2();
      var isCallable = require_is_callable2();
      var hasOwn = require_has_own_property2();
      var fails = require_fails2();
      var html = require_html2();
      var arraySlice = require_array_slice2();
      var createElement = require_document_create_element2();
      var validateArgumentsLength = require_validate_arguments_length();
      var IS_IOS = require_engine_is_ios();
      var IS_NODE = require_engine_is_node();
      var set = global2.setImmediate;
      var clear = global2.clearImmediate;
      var process2 = global2.process;
      var Dispatch = global2.Dispatch;
      var Function2 = global2.Function;
      var MessageChannel2 = global2.MessageChannel;
      var String2 = global2.String;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = "onreadystatechange";
      var $location;
      var defer;
      var channel;
      var port;
      try {
        $location = global2.location;
      } catch (error) {
      }
      var run = function(id) {
        if (hasOwn(queue, id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };
      var runner = function(id) {
        return function() {
          run(id);
        };
      };
      var listener = function(event) {
        run(event.data);
      };
      var post = function(id) {
        global2.postMessage(String2(id), $location.protocol + "//" + $location.host);
      };
      if (!set || !clear) {
        set = function setImmediate(handler) {
          validateArgumentsLength(arguments.length, 1);
          var fn = isCallable(handler) ? handler : Function2(handler);
          var args = arraySlice(arguments, 1);
          queue[++counter] = function() {
            apply(fn, void 0, args);
          };
          defer(counter);
          return counter;
        };
        clear = function clearImmediate(id) {
          delete queue[id];
        };
        if (IS_NODE) {
          defer = function(id) {
            process2.nextTick(runner(id));
          };
        } else if (Dispatch && Dispatch.now) {
          defer = function(id) {
            Dispatch.now(runner(id));
          };
        } else if (MessageChannel2 && !IS_IOS) {
          channel = new MessageChannel2();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port);
        } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && $location && $location.protocol !== "file:" && !fails(post)) {
          defer = post;
          global2.addEventListener("message", listener, false);
        } else if (ONREADYSTATECHANGE in createElement("script")) {
          defer = function(id) {
            html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
              html.removeChild(this);
              run(id);
            };
          };
        } else {
          defer = function(id) {
            setTimeout(runner(id), 0);
          };
        }
      }
      module.exports = {
        set: set,
        clear: clear
      };
    }
  });

  // node_modules/core-js/internals/engine-is-ios-pebble.js
  var require_engine_is_ios_pebble = __commonJS({
    "node_modules/core-js/internals/engine-is-ios-pebble.js": function(exports, module) {
      var userAgent = require_engine_user_agent2();
      var global2 = require_global2();
      module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
    }
  });

  // node_modules/core-js/internals/engine-is-webos-webkit.js
  var require_engine_is_webos_webkit = __commonJS({
    "node_modules/core-js/internals/engine-is-webos-webkit.js": function(exports, module) {
      var userAgent = require_engine_user_agent2();
      module.exports = /web0s(?!.*chrome)/i.test(userAgent);
    }
  });

  // node_modules/core-js/internals/microtask.js
  var require_microtask = __commonJS({
    "node_modules/core-js/internals/microtask.js": function(exports, module) {
      var global2 = require_global2();
      var bind = require_function_bind_context2();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor2().f;
      var macrotask = require_task().set;
      var IS_IOS = require_engine_is_ios();
      var IS_IOS_PEBBLE = require_engine_is_ios_pebble();
      var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit();
      var IS_NODE = require_engine_is_node();
      var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
      var document2 = global2.document;
      var process2 = global2.process;
      var Promise2 = global2.Promise;
      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush;
      var head;
      var last;
      var notify;
      var toggle;
      var node;
      var promise;
      var then;
      if (!queueMicrotask) {
        flush = function() {
          var parent, fn;
          if (IS_NODE && (parent = process2.domain))
            parent.exit();
          while (head) {
            fn = head.fn;
            head = head.next;
            try {
              fn();
            } catch (error) {
              if (head)
                notify();
              else
                last = void 0;
              throw error;
            }
          }
          last = void 0;
          if (parent)
            parent.enter();
        };
        if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
          toggle = true;
          node = document2.createTextNode("");
          new MutationObserver(flush).observe(node, { characterData: true });
          notify = function() {
            node.data = toggle = !toggle;
          };
        } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
          promise = Promise2.resolve(void 0);
          promise.constructor = Promise2;
          then = bind(promise.then, promise);
          notify = function() {
            then(flush);
          };
        } else if (IS_NODE) {
          notify = function() {
            process2.nextTick(flush);
          };
        } else {
          macrotask = bind(macrotask, global2);
          notify = function() {
            macrotask(flush);
          };
        }
      }
      module.exports = queueMicrotask || function(fn) {
        var task = { fn: fn, next: void 0 };
        if (last)
          last.next = task;
        if (!head) {
          head = task;
          notify();
        }
        last = task;
      };
    }
  });

  // node_modules/core-js/internals/host-report-errors.js
  var require_host_report_errors = __commonJS({
    "node_modules/core-js/internals/host-report-errors.js": function(exports, module) {
      var global2 = require_global2();
      module.exports = function(a, b) {
        var console2 = global2.console;
        if (console2 && console2.error) {
          arguments.length == 1 ? console2.error(a) : console2.error(a, b);
        }
      };
    }
  });

  // node_modules/core-js/internals/perform.js
  var require_perform = __commonJS({
    "node_modules/core-js/internals/perform.js": function(exports, module) {
      module.exports = function(exec) {
        try {
          return { error: false, value: exec() };
        } catch (error) {
          return { error: true, value: error };
        }
      };
    }
  });

  // node_modules/core-js/internals/queue.js
  var require_queue = __commonJS({
    "node_modules/core-js/internals/queue.js": function(exports, module) {
      var Queue = function() {
        this.head = null;
        this.tail = null;
      };
      Queue.prototype = {
        add: function(item) {
          var entry = { item: item, next: null };
          if (this.head)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
        },
        get: function() {
          var entry = this.head;
          if (entry) {
            this.head = entry.next;
            if (this.tail === entry)
              this.tail = null;
            return entry.item;
          }
        }
      };
      module.exports = Queue;
    }
  });

  // node_modules/core-js/internals/promise-native-constructor.js
  var require_promise_native_constructor = __commonJS({
    "node_modules/core-js/internals/promise-native-constructor.js": function(exports, module) {
      var global2 = require_global2();
      module.exports = global2.Promise;
    }
  });

  // node_modules/core-js/internals/engine-is-deno.js
  var require_engine_is_deno = __commonJS({
    "node_modules/core-js/internals/engine-is-deno.js": function(exports, module) {
      module.exports = typeof Deno == "object" && Deno && typeof Deno.version == "object";
    }
  });

  // node_modules/core-js/internals/engine-is-browser.js
  var require_engine_is_browser = __commonJS({
    "node_modules/core-js/internals/engine-is-browser.js": function(exports, module) {
      var IS_DENO = require_engine_is_deno();
      var IS_NODE = require_engine_is_node();
      module.exports = !IS_DENO && !IS_NODE && typeof window == "object" && typeof document == "object";
    }
  });

  // node_modules/core-js/internals/promise-constructor-detection.js
  var require_promise_constructor_detection = __commonJS({
    "node_modules/core-js/internals/promise-constructor-detection.js": function(exports, module) {
      var global2 = require_global2();
      var NativePromiseConstructor = require_promise_native_constructor();
      var isCallable = require_is_callable2();
      var isForced = require_is_forced2();
      var inspectSource = require_inspect_source2();
      var wellKnownSymbol = require_well_known_symbol2();
      var IS_BROWSER = require_engine_is_browser();
      var IS_DENO = require_engine_is_deno();
      var IS_PURE = require_is_pure2();
      var V8_VERSION = require_engine_v8_version2();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var SPECIES = wellKnownSymbol("species");
      var SUBCLASSING = false;
      var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
      var FORCED_PROMISE_CONSTRUCTOR = isForced("Promise", function() {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
          return true;
        if (IS_PURE && !(NativePromisePrototype["catch"] && NativePromisePrototype["finally"]))
          return true;
        if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
          var promise = new NativePromiseConstructor(function(resolve) {
            resolve(1);
          });
          var FakePromise = function(exec) {
            exec(function() {
            }, function() {
            });
          };
          var constructor = promise.constructor = {};
          constructor[SPECIES] = FakePromise;
          SUBCLASSING = promise.then(function() {
          }) instanceof FakePromise;
          if (!SUBCLASSING)
            return true;
        }
        return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
      });
      module.exports = {
        CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
        REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
        SUBCLASSING: SUBCLASSING
      };
    }
  });

  // node_modules/core-js/internals/new-promise-capability.js
  var require_new_promise_capability = __commonJS({
    "node_modules/core-js/internals/new-promise-capability.js": function(exports, module) {
      "use strict";
      var aCallable = require_a_callable2();
      var $TypeError = TypeError;
      var PromiseCapability = function(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
          if (resolve !== void 0 || reject !== void 0)
            throw $TypeError("Bad Promise constructor");
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aCallable(resolve);
        this.reject = aCallable(reject);
      };
      module.exports.f = function(C) {
        return new PromiseCapability(C);
      };
    }
  });

  // node_modules/core-js/modules/es.promise.constructor.js
  var require_es_promise_constructor = __commonJS({
    "node_modules/core-js/modules/es.promise.constructor.js": function() {
      "use strict";
      var $ = require_export2();
      var IS_PURE = require_is_pure2();
      var IS_NODE = require_engine_is_node();
      var global2 = require_global2();
      var call = require_function_call2();
      var defineBuiltIn = require_define_built_in2();
      var setPrototypeOf = require_object_set_prototype_of2();
      var setToStringTag = require_set_to_string_tag2();
      var setSpecies = require_set_species();
      var aCallable = require_a_callable2();
      var isCallable = require_is_callable2();
      var isObject = require_is_object2();
      var anInstance = require_an_instance2();
      var speciesConstructor = require_species_constructor();
      var task = require_task().set;
      var microtask = require_microtask();
      var hostReportErrors = require_host_report_errors();
      var perform = require_perform();
      var Queue = require_queue();
      var InternalStateModule = require_internal_state2();
      var NativePromiseConstructor = require_promise_native_constructor();
      var PromiseConstructorDetection = require_promise_constructor_detection();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var PROMISE = "Promise";
      var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
      var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
      var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var setInternalState = InternalStateModule.set;
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var PromiseConstructor = NativePromiseConstructor;
      var PromisePrototype = NativePromisePrototype;
      var TypeError2 = global2.TypeError;
      var document2 = global2.document;
      var process2 = global2.process;
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
      var UNHANDLED_REJECTION = "unhandledrejection";
      var REJECTION_HANDLED = "rejectionhandled";
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var Internal;
      var OwnPromiseCapability;
      var PromiseWrapper;
      var nativeThen;
      var isThenable = function(it) {
        var then;
        return isObject(it) && isCallable(then = it.then) ? then : false;
      };
      var callReaction = function(reaction, state) {
        var value = state.value;
        var ok = state.state == FULFILLED;
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED)
                onHandleUnhandled(state);
              state.rejection = HANDLED;
            }
            if (handler === true)
              result = value;
            else {
              if (domain)
                domain.enter();
              result = handler(value);
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError2("Promise-chain cycle"));
            } else if (then = isThenable(result)) {
              call(then, result, resolve, reject);
            } else
              resolve(result);
          } else
            reject(value);
        } catch (error) {
          if (domain && !exited)
            domain.exit();
          reject(error);
        }
      };
      var notify = function(state, isReject) {
        if (state.notified)
          return;
        state.notified = true;
        microtask(function() {
          var reactions = state.reactions;
          var reaction;
          while (reaction = reactions.get()) {
            callReaction(reaction, state);
          }
          state.notified = false;
          if (isReject && !state.rejection)
            onUnhandled(state);
        });
      };
      var dispatchEvent = function(name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
          event = document2.createEvent("Event");
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global2.dispatchEvent(event);
        } else
          event = { promise: promise, reason: reason };
        if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global2["on" + name]))
          handler(event);
        else if (name === UNHANDLED_REJECTION)
          hostReportErrors("Unhandled promise rejection", reason);
      };
      var onUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;
          if (IS_UNHANDLED) {
            result = perform(function() {
              if (IS_NODE) {
                process2.emit("unhandledRejection", value, promise);
              } else
                dispatchEvent(UNHANDLED_REJECTION, promise, value);
            });
            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error)
              throw result.value;
          }
        });
      };
      var isUnhandled = function(state) {
        return state.rejection !== HANDLED && !state.parent;
      };
      var onHandleUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          if (IS_NODE) {
            process2.emit("rejectionHandled", promise);
          } else
            dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };
      var bind = function(fn, state, unwrap) {
        return function(value) {
          fn(state, value, unwrap);
        };
      };
      var internalReject = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
      };
      var internalResolve = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        try {
          if (state.facade === value)
            throw TypeError2("Promise can't be resolved itself");
          var then = isThenable(value);
          if (then) {
            microtask(function() {
              var wrapper = { done: false };
              try {
                call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
              } catch (error) {
                internalReject(wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
          }
        } catch (error) {
          internalReject({ done: false }, error, state);
        }
      };
      if (FORCED_PROMISE_CONSTRUCTOR) {
        PromiseConstructor = function Promise2(executor) {
          anInstance(this, PromisePrototype);
          aCallable(executor);
          call(Internal, this);
          var state = getInternalPromiseState(this);
          try {
            executor(bind(internalResolve, state), bind(internalReject, state));
          } catch (error) {
            internalReject(state, error);
          }
        };
        PromisePrototype = PromiseConstructor.prototype;
        Internal = function Promise2(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: new Queue(),
            rejection: false,
            state: PENDING,
            value: void 0
          });
        };
        Internal.prototype = defineBuiltIn(PromisePrototype, "then", function then(onFulfilled, onRejected) {
          var state = getInternalPromiseState(this);
          var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
          state.parent = true;
          reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
          reaction.fail = isCallable(onRejected) && onRejected;
          reaction.domain = IS_NODE ? process2.domain : void 0;
          if (state.state == PENDING)
            state.reactions.add(reaction);
          else
            microtask(function() {
              callReaction(reaction, state);
            });
          return reaction.promise;
        });
        OwnPromiseCapability = function() {
          var promise = new Internal();
          var state = getInternalPromiseState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, state);
          this.reject = bind(internalReject, state);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
        if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
          nativeThen = NativePromisePrototype.then;
          if (!NATIVE_PROMISE_SUBCLASSING) {
            defineBuiltIn(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
              var that = this;
              return new PromiseConstructor(function(resolve, reject) {
                call(nativeThen, that, resolve, reject);
              }).then(onFulfilled, onRejected);
            }, { unsafe: true });
          }
          try {
            delete NativePromisePrototype.constructor;
          } catch (error) {
          }
          if (setPrototypeOf) {
            setPrototypeOf(NativePromisePrototype, PromisePrototype);
          }
        }
      }
      $({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
    }
  });

  // node_modules/core-js/internals/check-correctness-of-iteration.js
  var require_check_correctness_of_iteration = __commonJS({
    "node_modules/core-js/internals/check-correctness-of-iteration.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol2();
      var ITERATOR = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        called = 0;
        iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var called;
      var iteratorWithReturn;
      module.exports = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING)
          return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
    }
  });

  // node_modules/core-js/internals/promise-statics-incorrect-iteration.js
  var require_promise_statics_incorrect_iteration = __commonJS({
    "node_modules/core-js/internals/promise-statics-incorrect-iteration.js": function(exports, module) {
      var NativePromiseConstructor = require_promise_native_constructor();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
      module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function(iterable) {
        NativePromiseConstructor.all(iterable).then(void 0, function() {
        });
      });
    }
  });

  // node_modules/core-js/modules/es.promise.all.js
  var require_es_promise_all = __commonJS({
    "node_modules/core-js/modules/es.promise.all.js": function() {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var aCallable = require_a_callable2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate2();
      var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
      $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call($promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.catch.js
  var require_es_promise_catch = __commonJS({
    "node_modules/core-js/modules/es.promise.catch.js": function() {
      "use strict";
      var $ = require_export2();
      var IS_PURE = require_is_pure2();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
      var NativePromiseConstructor = require_promise_native_constructor();
      var getBuiltIn = require_get_built_in2();
      var isCallable = require_is_callable2();
      var defineBuiltIn = require_define_built_in2();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      $({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
        "catch": function(onRejected) {
          return this.then(void 0, onRejected);
        }
      });
      if (!IS_PURE && isCallable(NativePromiseConstructor)) {
        method = getBuiltIn("Promise").prototype["catch"];
        if (NativePromisePrototype["catch"] !== method) {
          defineBuiltIn(NativePromisePrototype, "catch", method, { unsafe: true });
        }
      }
      var method;
    }
  });

  // node_modules/core-js/modules/es.promise.race.js
  var require_es_promise_race = __commonJS({
    "node_modules/core-js/modules/es.promise.race.js": function() {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var aCallable = require_a_callable2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate2();
      var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration();
      $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            iterate(iterable, function(promise) {
              call($promiseResolve, C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.reject.js
  var require_es_promise_reject = __commonJS({
    "node_modules/core-js/modules/es.promise.reject.js": function() {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
      $({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
        reject: function reject(r) {
          var capability = newPromiseCapabilityModule.f(this);
          call(capability.reject, void 0, r);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/internals/promise-resolve.js
  var require_promise_resolve = __commonJS({
    "node_modules/core-js/internals/promise-resolve.js": function(exports, module) {
      var anObject = require_an_object2();
      var isObject = require_is_object2();
      var newPromiseCapability = require_new_promise_capability();
      module.exports = function(C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C)
          return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
    }
  });

  // node_modules/core-js/modules/es.promise.resolve.js
  var require_es_promise_resolve = __commonJS({
    "node_modules/core-js/modules/es.promise.resolve.js": function() {
      "use strict";
      var $ = require_export2();
      var getBuiltIn = require_get_built_in2();
      var IS_PURE = require_is_pure2();
      var NativePromiseConstructor = require_promise_native_constructor();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection().CONSTRUCTOR;
      var promiseResolve = require_promise_resolve();
      var PromiseConstructorWrapper = getBuiltIn("Promise");
      var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;
      $({ target: "Promise", stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
        resolve: function resolve(x) {
          return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.js
  var require_es_promise = __commonJS({
    "node_modules/core-js/modules/es.promise.js": function() {
      require_es_promise_constructor();
      require_es_promise_all();
      require_es_promise_catch();
      require_es_promise_race();
      require_es_promise_reject();
      require_es_promise_resolve();
    }
  });

  // node_modules/core-js/modules/es.promise.all-settled.js
  var require_es_promise_all_settled = __commonJS({
    "node_modules/core-js/modules/es.promise.all-settled.js": function() {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var aCallable = require_a_callable2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate2();
      $({ target: "Promise", stat: true }, {
        allSettled: function allSettled(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "fulfilled", value: value };
                --remaining || resolve(values);
              }, function(error) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "rejected", reason: error };
                --remaining || resolve(values);
              });
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.any.js
  var require_es_promise_any = __commonJS({
    "node_modules/core-js/modules/es.promise.any.js": function() {
      "use strict";
      var $ = require_export2();
      var call = require_function_call2();
      var aCallable = require_a_callable2();
      var getBuiltIn = require_get_built_in2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate2();
      var PROMISE_ANY_ERROR = "No one promise resolved";
      $({ target: "Promise", stat: true }, {
        any: function any(iterable) {
          var C = this;
          var AggregateError = getBuiltIn("AggregateError");
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyRejected = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyResolved = true;
                resolve(value);
              }, function(error) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyRejected = true;
                errors[index] = error;
                --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
              });
            });
            --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.finally.js
  var require_es_promise_finally = __commonJS({
    "node_modules/core-js/modules/es.promise.finally.js": function() {
      "use strict";
      var $ = require_export2();
      var IS_PURE = require_is_pure2();
      var NativePromiseConstructor = require_promise_native_constructor();
      var fails = require_fails2();
      var getBuiltIn = require_get_built_in2();
      var isCallable = require_is_callable2();
      var speciesConstructor = require_species_constructor();
      var promiseResolve = require_promise_resolve();
      var defineBuiltIn = require_define_built_in2();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var NON_GENERIC = !!NativePromiseConstructor && fails(function() {
        NativePromisePrototype["finally"].call({ then: function() {
        } }, function() {
        });
      });
      $({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
        "finally": function(onFinally) {
          var C = speciesConstructor(this, getBuiltIn("Promise"));
          var isFunction = isCallable(onFinally);
          return this.then(isFunction ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
              return x;
            });
          } : onFinally, isFunction ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
              throw e;
            });
          } : onFinally);
        }
      });
      if (!IS_PURE && isCallable(NativePromiseConstructor)) {
        method = getBuiltIn("Promise").prototype["finally"];
        if (NativePromisePrototype["finally"] !== method) {
          defineBuiltIn(NativePromisePrototype, "finally", method, { unsafe: true });
        }
      }
      var method;
    }
  });

  // node_modules/core-js/internals/string-multibyte.js
  var require_string_multibyte2 = __commonJS({
    "node_modules/core-js/internals/string-multibyte.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this2();
      var toIntegerOrInfinity = require_to_integer_or_infinity2();
      var toString = require_to_string2();
      var requireObjectCoercible = require_require_object_coercible2();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var stringSlice = uncurryThis("".slice);
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size)
            return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module.exports = {
        codeAt: createMethod(false),
        charAt: createMethod(true)
      };
    }
  });

  // node_modules/core-js/modules/es.string.iterator.js
  var require_es_string_iterator2 = __commonJS({
    "node_modules/core-js/modules/es.string.iterator.js": function() {
      "use strict";
      var charAt = require_string_multibyte2().charAt;
      var toString = require_to_string2();
      var InternalStateModule = require_internal_state2();
      var defineIterator = require_iterator_define2();
      var createIterResultObject = require_create_iter_result_object2();
      var STRING_ITERATOR = "String Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
      defineIterator(String, "String", function(iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: toString(iterated),
          index: 0
        });
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length)
          return createIterResultObject(void 0, true);
        point = charAt(string, index);
        state.index += point.length;
        return createIterResultObject(point, false);
      });
    }
  });

  // node_modules/core-js/internals/path.js
  var require_path2 = __commonJS({
    "node_modules/core-js/internals/path.js": function(exports, module) {
      var global2 = require_global2();
      module.exports = global2;
    }
  });

  // node_modules/core-js/es/promise/index.js
  var require_promise = __commonJS({
    "node_modules/core-js/es/promise/index.js": function(exports, module) {
      require_es_aggregate_error();
      require_es_array_iterator2();
      require_es_object_to_string2();
      require_es_promise();
      require_es_promise_all_settled();
      require_es_promise_any();
      require_es_promise_finally();
      require_es_string_iterator2();
      var path = require_path2();
      module.exports = path.Promise;
    }
  });

  // node_modules/core-js/internals/dom-iterables.js
  var require_dom_iterables2 = __commonJS({
    "node_modules/core-js/internals/dom-iterables.js": function(exports, module) {
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    }
  });

  // node_modules/core-js/internals/dom-token-list-prototype.js
  var require_dom_token_list_prototype = __commonJS({
    "node_modules/core-js/internals/dom-token-list-prototype.js": function(exports, module) {
      var documentCreateElement = require_document_create_element2();
      var classList = documentCreateElement("span").classList;
      var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
      module.exports = DOMTokenListPrototype === Object.prototype ? void 0 : DOMTokenListPrototype;
    }
  });

  // node_modules/core-js/modules/web.dom-collections.iterator.js
  var require_web_dom_collections_iterator2 = __commonJS({
    "node_modules/core-js/modules/web.dom-collections.iterator.js": function() {
      var global2 = require_global2();
      var DOMIterables = require_dom_iterables2();
      var DOMTokenListPrototype = require_dom_token_list_prototype();
      var ArrayIteratorMethods = require_es_array_iterator2();
      var createNonEnumerableProperty = require_create_non_enumerable_property2();
      var wellKnownSymbol = require_well_known_symbol2();
      var ITERATOR = wellKnownSymbol("iterator");
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var ArrayValues = ArrayIteratorMethods.values;
      var handlePrototype = function(CollectionPrototype, COLLECTION_NAME2) {
        if (CollectionPrototype) {
          if (CollectionPrototype[ITERATOR] !== ArrayValues)
            try {
              createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
            } catch (error) {
              CollectionPrototype[ITERATOR] = ArrayValues;
            }
          if (!CollectionPrototype[TO_STRING_TAG]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME2);
          }
          if (DOMIterables[COLLECTION_NAME2])
            for (var METHOD_NAME in ArrayIteratorMethods) {
              if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                try {
                  createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                } catch (error) {
                  CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                }
            }
        }
      };
      for (COLLECTION_NAME in DOMIterables) {
        handlePrototype(global2[COLLECTION_NAME] && global2[COLLECTION_NAME].prototype, COLLECTION_NAME);
      }
      var COLLECTION_NAME;
      handlePrototype(DOMTokenListPrototype, "DOMTokenList");
    }
  });

  // node_modules/core-js/stable/promise/index.js
  var require_promise2 = __commonJS({
    "node_modules/core-js/stable/promise/index.js": function(exports, module) {
      var parent = require_promise();
      require_web_dom_collections_iterator2();
      module.exports = parent;
    }
  });

  // node_modules/core-js/actual/promise/index.js
  var require_promise3 = __commonJS({
    "node_modules/core-js/actual/promise/index.js": function(exports, module) {
      var parent = require_promise2();
      module.exports = parent;
    }
  });

  // node_modules/core-js/modules/esnext.aggregate-error.js
  var require_esnext_aggregate_error = __commonJS({
    "node_modules/core-js/modules/esnext.aggregate-error.js": function() {
      require_es_aggregate_error();
    }
  });

  // node_modules/core-js/modules/esnext.promise.all-settled.js
  var require_esnext_promise_all_settled = __commonJS({
    "node_modules/core-js/modules/esnext.promise.all-settled.js": function() {
      require_es_promise_all_settled();
    }
  });

  // node_modules/core-js/modules/esnext.promise.try.js
  var require_esnext_promise_try = __commonJS({
    "node_modules/core-js/modules/esnext.promise.try.js": function() {
      "use strict";
      var $ = require_export2();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      $({ target: "Promise", stat: true, forced: true }, {
        "try": function(callbackfn) {
          var promiseCapability = newPromiseCapabilityModule.f(this);
          var result = perform(callbackfn);
          (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
          return promiseCapability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/esnext.promise.any.js
  var require_esnext_promise_any = __commonJS({
    "node_modules/core-js/modules/esnext.promise.any.js": function() {
      require_es_promise_any();
    }
  });

  // node_modules/core-js/full/promise/index.js
  var require_promise4 = __commonJS({
    "node_modules/core-js/full/promise/index.js": function(exports, module) {
      var parent = require_promise3();
      require_esnext_aggregate_error();
      require_esnext_promise_all_settled();
      require_esnext_promise_try();
      require_esnext_promise_any();
      module.exports = parent;
    }
  });

  // node_modules/core-js/features/promise/index.js
  var require_promise5 = __commonJS({
    "node_modules/core-js/features/promise/index.js": function(exports, module) {
      module.exports = require_promise4();
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault2 = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js": function(exports, module) {
      function _interopRequireDefault2(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof2 = __commonJS({
    "node_modules/@babel/runtime/helpers/typeof.js": function(exports, module) {
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return module.exports = _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
      }
      module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireWildcard.js
  var require_interopRequireWildcard2 = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireWildcard.js": function(exports, module) {
      var _typeof = require_typeof2()["default"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard2(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return {
            "default": obj
          };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      module.exports = _interopRequireWildcard2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js": function(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js": function(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js": function(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js": function(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var checkPropTypes = require_checkPropTypes();
          var ReactVersion = "16.14.0";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            suspense: null
          };
          var ReactCurrentOwner = {
            current: null
          };
          var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          function describeComponentFrame(name, source, ownerName) {
            var sourceInfo = "";
            if (source) {
              var path = source.fileName;
              var fileName = path.replace(BEFORE_SLASH_RE, "");
              {
                if (/^index\./.test(fileName)) {
                  var match = path.match(BEFORE_SLASH_RE);
                  if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                      var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                      fileName = folderName + "/" + fileName;
                    }
                  }
                }
              }
              sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
            } else if (ownerName) {
              sourceInfo = " (created by " + ownerName + ")";
            }
            return "\n    in " + (name || "Unknown") + sourceInfo;
          }
          var Resolved = 1;
          function refineResolvedLazyComponent(lazyComponent) {
            return lazyComponent._status === Resolved ? lazyComponent._result : null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                  return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type.render);
                case REACT_LAZY_TYPE: {
                  var thenable = type;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);
                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }
                  break;
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = {};
          var currentlyValidatingElement = null;
          function setCurrentlyValidatingElement(element) {
            {
              currentlyValidatingElement = element;
            }
          }
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentlyValidatingElement) {
                var name = getComponentName(currentlyValidatingElement.type);
                var owner = currentlyValidatingElement._owner;
                stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher: ReactCurrentDispatcher,
            ReactCurrentBatchConfig: ReactCurrentBatchConfig,
            ReactCurrentOwner: ReactCurrentOwner,
            IsSomeRendererActing: IsSomeRendererActing,
            assign: _assign
          };
          {
            _assign(ReactSharedInternals, {
              ReactDebugCurrentFrame: ReactDebugCurrentFrame,
              ReactComponentTreeHook: {}
            });
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
              if (!hasExistingStack) {
                var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame2.getStackAddendum();
                if (stack !== "") {
                  format += "%s";
                  args = args.concat([stack]);
                }
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
              try {
                var argIndex = 0;
                var message = "Warning: " + format.replace(/%s/g, function() {
                  return args[argIndex++];
                });
                throw new Error(message);
              } catch (x) {
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type,
              key: key,
              ref: ref,
              props: props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = ("" + key).replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
          }
          var POOL_SIZE = 10;
          var traverseContextPool = [];
          function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
            if (traverseContextPool.length) {
              var traverseContext = traverseContextPool.pop();
              traverseContext.result = mapResult;
              traverseContext.keyPrefix = keyPrefix;
              traverseContext.func = mapFunction;
              traverseContext.context = mapContext;
              traverseContext.count = 0;
              return traverseContext;
            } else {
              return {
                result: mapResult,
                keyPrefix: keyPrefix,
                func: mapFunction,
                context: mapContext,
                count: 0
              };
            }
          }
          function releaseTraverseContext(traverseContext) {
            traverseContext.result = null;
            traverseContext.keyPrefix = null;
            traverseContext.func = null;
            traverseContext.context = null;
            traverseContext.count = 0;
            if (traverseContextPool.length < POOL_SIZE) {
              traverseContextPool.push(traverseContext);
            }
          }
          function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              callback(traverseContext, children, nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getComponentKey(child, i);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                {
                  if (iteratorFn === children.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(children);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getComponentKey(child, ii++);
                  subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                }
              } else if (type === "object") {
                var addendum = "";
                {
                  addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
                }
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                  }
                }
              }
            }
            return subtreeCount;
          }
          function traverseAllChildren(children, callback, traverseContext) {
            if (children == null) {
              return 0;
            }
            return traverseAllChildrenImpl(children, "", callback, traverseContext);
          }
          function getComponentKey(component, index) {
            if (typeof component === "object" && component !== null && component.key != null) {
              return escape(component.key);
            }
            return index.toString(36);
          }
          function forEachSingleChild(bookKeeping, child, name) {
            var func = bookKeeping.func, context = bookKeeping.context;
            func.call(context, child, bookKeeping.count++);
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            if (children == null) {
              return children;
            }
            var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
            traverseAllChildren(children, forEachSingleChild, traverseContext);
            releaseTraverseContext(traverseContext);
          }
          function mapSingleChildIntoContext(bookKeeping, child, childKey) {
            var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context = bookKeeping.context;
            var mappedChild = func.call(context, child, bookKeeping.count++);
            if (Array.isArray(mappedChild)) {
              mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey);
              }
              result.push(mappedChild);
            }
          }
          function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
            var escapedPrefix = "";
            if (prefix != null) {
              escapedPrefix = escapeUserProvidedKey(prefix) + "/";
            }
            var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
            traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
            releaseTraverseContext(traverseContext);
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, func, context);
            return result;
          }
          function countChildren(children) {
            return traverseAllChildren(children, function() {
              return null;
            }, null);
          }
          function toArray(children) {
            var result = [];
            mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
              return child;
            });
            return result;
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          function lazy(ctor) {
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _ctor: ctor,
              _status: -1,
              _result: null
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            return {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render
            };
          }
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            return {
              $$typeof: REACT_MEMO_TYPE,
              type: type,
              compare: compare === void 0 ? null : compare
            };
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement(element);
            {
              error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
            }
            setCurrentlyValidatingElement(null);
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var name = getComponentName(type);
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                setCurrentlyValidatingElement(element);
                checkPropTypes(propTypes, element.props, "prop", name, ReactDebugCurrentFrame.getStackAddendum);
                setCurrentlyValidatingElement(null);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              setCurrentlyValidatingElement(fragment);
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  break;
                }
              }
              if (fragment.ref !== null) {
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
              }
              setCurrentlyValidatingElement(null);
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              var testMap = /* @__PURE__ */ new Map([[frozenObject, null]]);
              var testSet = /* @__PURE__ */ new Set([frozenObject]);
              testMap.set(0, 0);
              testSet.add(0);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js": function(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType: expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js": function(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-redux/lib/components/Context.js
  var require_Context = __commonJS({
    "node_modules/react-redux/lib/components/Context.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports["default"] = exports.ReactReduxContext = void 0;
      var _react2 = _interopRequireDefault2(require_react());
      var ReactReduxContext = /* @__PURE__ */ _react2["default"].createContext(null);
      exports.ReactReduxContext = ReactReduxContext;
      if (true) {
        ReactReduxContext.displayName = "ReactRedux";
      }
      var _default = ReactReduxContext;
      exports["default"] = _default;
    }
  });

  // node_modules/react-redux/lib/utils/batch.js
  var require_batch = __commonJS({
    "node_modules/react-redux/lib/utils/batch.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.getBatch = exports.setBatch = void 0;
      function defaultNoopBatch(callback) {
        callback();
      }
      var batch = defaultNoopBatch;
      var setBatch = function setBatch2(newBatch) {
        return batch = newBatch;
      };
      exports.setBatch = setBatch;
      var getBatch = function getBatch2() {
        return batch;
      };
      exports.getBatch = getBatch;
    }
  });

  // node_modules/react-redux/lib/utils/Subscription.js
  var require_Subscription = __commonJS({
    "node_modules/react-redux/lib/utils/Subscription.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports["default"] = void 0;
      var _batch = require_batch();
      var nullListeners = {
        notify: function notify() {
        }
      };
      function createListenerCollection() {
        var batch = (0, _batch.getBatch)();
        var first = null;
        var last = null;
        return {
          clear: function clear() {
            first = null;
            last = null;
          },
          notify: function notify() {
            batch(function() {
              var listener = first;
              while (listener) {
                listener.callback();
                listener = listener.next;
              }
            });
          },
          get: function get() {
            var listeners = [];
            var listener = first;
            while (listener) {
              listeners.push(listener);
              listener = listener.next;
            }
            return listeners;
          },
          subscribe: function subscribe(callback) {
            var isSubscribed = true;
            var listener = last = {
              callback: callback,
              next: null,
              prev: last
            };
            if (listener.prev) {
              listener.prev.next = listener;
            } else {
              first = listener;
            }
            return function unsubscribe() {
              if (!isSubscribed || first === null)
                return;
              isSubscribed = false;
              if (listener.next) {
                listener.next.prev = listener.prev;
              } else {
                last = listener.prev;
              }
              if (listener.prev) {
                listener.prev.next = listener.next;
              } else {
                first = listener.next;
              }
            };
          }
        };
      }
      var Subscription = /* @__PURE__ */ function() {
        function Subscription2(store, parentSub) {
          this.store = store;
          this.parentSub = parentSub;
          this.unsubscribe = null;
          this.listeners = nullListeners;
          this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
        }
        var _proto = Subscription2.prototype;
        _proto.addNestedSub = function addNestedSub(listener) {
          this.trySubscribe();
          return this.listeners.subscribe(listener);
        };
        _proto.notifyNestedSubs = function notifyNestedSubs() {
          this.listeners.notify();
        };
        _proto.handleChangeWrapper = function handleChangeWrapper() {
          if (this.onStateChange) {
            this.onStateChange();
          }
        };
        _proto.isSubscribed = function isSubscribed() {
          return Boolean(this.unsubscribe);
        };
        _proto.trySubscribe = function trySubscribe() {
          if (!this.unsubscribe) {
            this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
            this.listeners = createListenerCollection();
          }
        };
        _proto.tryUnsubscribe = function tryUnsubscribe() {
          if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
            this.listeners.clear();
            this.listeners = nullListeners;
          }
        };
        return Subscription2;
      }();
      exports["default"] = Subscription;
    }
  });

  // node_modules/react-redux/lib/components/Provider.js
  var require_Provider = __commonJS({
    "node_modules/react-redux/lib/components/Provider.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      var _interopRequireWildcard2 = require_interopRequireWildcard2();
      exports.__esModule = true;
      exports["default"] = void 0;
      var _react2 = _interopRequireWildcard2(require_react());
      var _propTypes = _interopRequireDefault2(require_prop_types());
      var _Context = require_Context();
      var _Subscription = _interopRequireDefault2(require_Subscription());
      function Provider(_ref) {
        var store = _ref.store, context = _ref.context, children = _ref.children;
        var contextValue = (0, _react2.useMemo)(function() {
          var subscription = new _Subscription["default"](store);
          subscription.onStateChange = subscription.notifyNestedSubs;
          return {
            store: store,
            subscription: subscription
          };
        }, [store]);
        var previousState = (0, _react2.useMemo)(function() {
          return store.getState();
        }, [store]);
        (0, _react2.useEffect)(function() {
          var subscription = contextValue.subscription;
          subscription.trySubscribe();
          if (previousState !== store.getState()) {
            subscription.notifyNestedSubs();
          }
          return function() {
            subscription.tryUnsubscribe();
            subscription.onStateChange = null;
          };
        }, [contextValue, previousState]);
        var Context = context || _Context.ReactReduxContext;
        return _react2["default"].createElement(Context.Provider, {
          value: contextValue
        }, children);
      }
      if (true) {
        Provider.propTypes = {
          store: _propTypes["default"].shape({
            subscribe: _propTypes["default"].func.isRequired,
            dispatch: _propTypes["default"].func.isRequired,
            getState: _propTypes["default"].func.isRequired
          }),
          context: _propTypes["default"].object,
          children: _propTypes["default"].any
        };
      }
      var _default = Provider;
      exports["default"] = _default;
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js": function(exports, module) {
      function _extends() {
        module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends.apply(this, arguments);
      }
      module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js": function(exports, module) {
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js": function(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/react-redux/lib/utils/useIsomorphicLayoutEffect.js
  var require_useIsomorphicLayoutEffect = __commonJS({
    "node_modules/react-redux/lib/utils/useIsomorphicLayoutEffect.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.useIsomorphicLayoutEffect = void 0;
      var _react2 = require_react();
      var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? _react2.useLayoutEffect : _react2.useEffect;
      exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
    }
  });

  // node_modules/react-redux/lib/components/connectAdvanced.js
  var require_connectAdvanced = __commonJS({
    "node_modules/react-redux/lib/components/connectAdvanced.js": function(exports) {
      "use strict";
      var _interopRequireWildcard2 = require_interopRequireWildcard2();
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports["default"] = connectAdvanced;
      var _extends2 = _interopRequireDefault2(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault2(require_objectWithoutPropertiesLoose());
      var _hoistNonReactStatics = _interopRequireDefault2(require_hoist_non_react_statics_cjs());
      var _react2 = _interopRequireWildcard2(require_react());
      var _reactIs = require_react_is();
      var _Subscription = _interopRequireDefault2(require_Subscription());
      var _useIsomorphicLayoutEffect = require_useIsomorphicLayoutEffect();
      var _Context = require_Context();
      var EMPTY_ARRAY = [];
      var NO_SUBSCRIPTION_ARRAY = [null, null];
      var stringifyComponent = function stringifyComponent2(Comp) {
        try {
          return JSON.stringify(Comp);
        } catch (err) {
          return String(Comp);
        }
      };
      function storeStateUpdatesReducer(state, action) {
        var updateCount = state[1];
        return [action.payload, updateCount + 1];
      }
      function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
        (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function() {
          return effectFunc.apply(void 0, effectArgs);
        }, dependencies);
      }
      function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
        lastWrapperProps.current = wrapperProps;
        lastChildProps.current = actualChildProps;
        renderIsScheduled.current = false;
        if (childPropsFromStoreUpdate.current) {
          childPropsFromStoreUpdate.current = null;
          notifyNestedSubs();
        }
      }
      function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
        if (!shouldHandleStateChanges)
          return;
        var didUnsubscribe = false;
        var lastThrownError = null;
        var checkForUpdates = function checkForUpdates2() {
          if (didUnsubscribe) {
            return;
          }
          var latestStoreState = store.getState();
          var newChildProps, error;
          try {
            newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
          } catch (e) {
            error = e;
            lastThrownError = e;
          }
          if (!error) {
            lastThrownError = null;
          }
          if (newChildProps === lastChildProps.current) {
            if (!renderIsScheduled.current) {
              notifyNestedSubs();
            }
          } else {
            lastChildProps.current = newChildProps;
            childPropsFromStoreUpdate.current = newChildProps;
            renderIsScheduled.current = true;
            forceComponentUpdateDispatch({
              type: "STORE_UPDATED",
              payload: {
                error: error
              }
            });
          }
        };
        subscription.onStateChange = checkForUpdates;
        subscription.trySubscribe();
        checkForUpdates();
        var unsubscribeWrapper = function unsubscribeWrapper2() {
          didUnsubscribe = true;
          subscription.tryUnsubscribe();
          subscription.onStateChange = null;
          if (lastThrownError) {
            throw lastThrownError;
          }
        };
        return unsubscribeWrapper;
      }
      var initStateUpdates = function initStateUpdates2() {
        return [null, 0];
      };
      function connectAdvanced(selectorFactory, _ref) {
        if (_ref === void 0) {
          _ref = {};
        }
        var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
          return "ConnectAdvanced(" + name + ")";
        } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? _Context.ReactReduxContext : _ref2$context, connectOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);
        if (true) {
          if (renderCountProp !== void 0) {
            throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
          }
          if (withRef) {
            throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
          }
          var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
          if (storeKey !== "store") {
            throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
          }
        }
        var Context = context;
        return function wrapWithConnect(WrappedComponent) {
          if (!(0, _reactIs.isValidElementType)(WrappedComponent)) {
            throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
          }
          var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
          var displayName = getDisplayName(wrappedComponentName);
          var selectorFactoryOptions = (0, _extends2["default"])({}, connectOptions, {
            getDisplayName: getDisplayName,
            methodName: methodName,
            renderCountProp: renderCountProp,
            shouldHandleStateChanges: shouldHandleStateChanges,
            storeKey: storeKey,
            displayName: displayName,
            wrappedComponentName: wrappedComponentName,
            WrappedComponent: WrappedComponent
          });
          var pure = connectOptions.pure;
          function createChildSelector(store) {
            return selectorFactory(store.dispatch, selectorFactoryOptions);
          }
          var usePureOnlyMemo = pure ? _react2.useMemo : function(callback) {
            return callback();
          };
          function ConnectFunction(props) {
            var _useMemo = (0, _react2.useMemo)(function() {
              var forwardedRef2 = props.forwardedRef, wrapperProps2 = (0, _objectWithoutPropertiesLoose2["default"])(props, ["forwardedRef"]);
              return [props.context, forwardedRef2, wrapperProps2];
            }, [props]), propsContext = _useMemo[0], forwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
            var ContextToUse = (0, _react2.useMemo)(function() {
              return propsContext && propsContext.Consumer && (0, _reactIs.isContextConsumer)(_react2["default"].createElement(propsContext.Consumer, null)) ? propsContext : Context;
            }, [propsContext, Context]);
            var contextValue = (0, _react2.useContext)(ContextToUse);
            var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
            var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
            if (!didStoreComeFromProps && !didStoreComeFromContext) {
              throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
            }
            var store = didStoreComeFromProps ? props.store : contextValue.store;
            var childPropsSelector = (0, _react2.useMemo)(function() {
              return createChildSelector(store);
            }, [store]);
            var _useMemo2 = (0, _react2.useMemo)(function() {
              if (!shouldHandleStateChanges)
                return NO_SUBSCRIPTION_ARRAY;
              var subscription2 = new _Subscription["default"](store, didStoreComeFromProps ? null : contextValue.subscription);
              var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
              return [subscription2, notifyNestedSubs2];
            }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
            var overriddenContextValue = (0, _react2.useMemo)(function() {
              if (didStoreComeFromProps) {
                return contextValue;
              }
              return (0, _extends2["default"])({}, contextValue, {
                subscription: subscription
              });
            }, [didStoreComeFromProps, contextValue, subscription]);
            var _useReducer = (0, _react2.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
            if (previousStateUpdateResult && previousStateUpdateResult.error) {
              throw previousStateUpdateResult.error;
            }
            var lastChildProps = (0, _react2.useRef)();
            var lastWrapperProps = (0, _react2.useRef)(wrapperProps);
            var childPropsFromStoreUpdate = (0, _react2.useRef)();
            var renderIsScheduled = (0, _react2.useRef)(false);
            var actualChildProps = usePureOnlyMemo(function() {
              if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
                return childPropsFromStoreUpdate.current;
              }
              return childPropsSelector(store.getState(), wrapperProps);
            }, [store, previousStateUpdateResult, wrapperProps]);
            useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
            useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
            var renderedWrappedComponent = (0, _react2.useMemo)(function() {
              return _react2["default"].createElement(WrappedComponent, (0, _extends2["default"])({}, actualChildProps, {
                ref: forwardedRef
              }));
            }, [forwardedRef, WrappedComponent, actualChildProps]);
            var renderedChild = (0, _react2.useMemo)(function() {
              if (shouldHandleStateChanges) {
                return _react2["default"].createElement(ContextToUse.Provider, {
                  value: overriddenContextValue
                }, renderedWrappedComponent);
              }
              return renderedWrappedComponent;
            }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
            return renderedChild;
          }
          var Connect = pure ? _react2["default"].memo(ConnectFunction) : ConnectFunction;
          Connect.WrappedComponent = WrappedComponent;
          Connect.displayName = displayName;
          if (forwardRef) {
            var forwarded = _react2["default"].forwardRef(function forwardConnectRef(props, ref) {
              return _react2["default"].createElement(Connect, (0, _extends2["default"])({}, props, {
                forwardedRef: ref
              }));
            });
            forwarded.displayName = displayName;
            forwarded.WrappedComponent = WrappedComponent;
            return (0, _hoistNonReactStatics["default"])(forwarded, WrappedComponent);
          }
          return (0, _hoistNonReactStatics["default"])(Connect, WrappedComponent);
        };
      }
    }
  });

  // node_modules/react-redux/lib/utils/shallowEqual.js
  var require_shallowEqual = __commonJS({
    "node_modules/react-redux/lib/utils/shallowEqual.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports["default"] = shallowEqual;
      function is(x, y) {
        if (x === y) {
          return x !== 0 || y !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function shallowEqual(objA, objB) {
        if (is(objA, objB))
          return true;
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return false;
        for (var i = 0; i < keysA.length; i++) {
          if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
            return false;
          }
        }
        return true;
      }
    }
  });

  // node_modules/@babel/runtime/helpers/defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/@babel/runtime/helpers/defineProperty.js": function(exports, module) {
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/objectSpread2.js
  var require_objectSpread2 = __commonJS({
    "node_modules/@babel/runtime/helpers/objectSpread2.js": function(exports, module) {
      var defineProperty = require_defineProperty();
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/redux/lib/redux.js
  var require_redux = __commonJS({
    "node_modules/redux/lib/redux.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _objectSpread = require_objectSpread2();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var _objectSpread__default = /* @__PURE__ */ _interopDefaultLegacy(_objectSpread);
      var $$observable = function() {
        return typeof Symbol === "function" && Symbol.observable || "@@observable";
      }();
      var randomString = function randomString2() {
        return Math.random().toString(36).substring(7).split("").join(".");
      };
      var ActionTypes = {
        INIT: "@@redux/INIT" + randomString(),
        REPLACE: "@@redux/REPLACE" + randomString(),
        PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
          return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
        }
      };
      function isPlainObject(obj) {
        if (typeof obj !== "object" || obj === null)
          return false;
        var proto = obj;
        while (Object.getPrototypeOf(proto) !== null) {
          proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(obj) === proto;
      }
      function miniKindOf(val) {
        if (val === void 0)
          return "undefined";
        if (val === null)
          return "null";
        var type = typeof val;
        switch (type) {
          case "boolean":
          case "string":
          case "number":
          case "symbol":
          case "function": {
            return type;
          }
        }
        if (Array.isArray(val))
          return "array";
        if (isDate(val))
          return "date";
        if (isError(val))
          return "error";
        var constructorName = ctorName(val);
        switch (constructorName) {
          case "Symbol":
          case "Promise":
          case "WeakMap":
          case "WeakSet":
          case "Map":
          case "Set":
            return constructorName;
        }
        return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
      }
      function ctorName(val) {
        return typeof val.constructor === "function" ? val.constructor.name : null;
      }
      function isError(val) {
        return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
      }
      function isDate(val) {
        if (val instanceof Date)
          return true;
        return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
      }
      function kindOf(val) {
        var typeOfVal = typeof val;
        if (true) {
          typeOfVal = miniKindOf(val);
        }
        return typeOfVal;
      }
      function createStore(reducer, preloadedState, enhancer) {
        var _ref2;
        if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
          throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
        }
        if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
          enhancer = preloadedState;
          preloadedState = void 0;
        }
        if (typeof enhancer !== "undefined") {
          if (typeof enhancer !== "function") {
            throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
          }
          return enhancer(createStore)(reducer, preloadedState);
        }
        if (typeof reducer !== "function") {
          throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
        }
        var currentReducer = reducer;
        var currentState = preloadedState;
        var currentListeners = [];
        var nextListeners = currentListeners;
        var isDispatching = false;
        function ensureCanMutateNextListeners() {
          if (nextListeners === currentListeners) {
            nextListeners = currentListeners.slice();
          }
        }
        function getState() {
          if (isDispatching) {
            throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
          }
          return currentState;
        }
        function subscribe(listener) {
          if (typeof listener !== "function") {
            throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
          }
          if (isDispatching) {
            throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
          }
          var isSubscribed = true;
          ensureCanMutateNextListeners();
          nextListeners.push(listener);
          return function unsubscribe() {
            if (!isSubscribed) {
              return;
            }
            if (isDispatching) {
              throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
            }
            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
            currentListeners = null;
          };
        }
        function dispatch(action) {
          if (!isPlainObject(action)) {
            throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
          }
          if (typeof action.type === "undefined") {
            throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
          }
          if (isDispatching) {
            throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
          }
          try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
          } finally {
            isDispatching = false;
          }
          var listeners = currentListeners = nextListeners;
          for (var i = 0; i < listeners.length; i++) {
            var listener = listeners[i];
            listener();
          }
          return action;
        }
        function replaceReducer(nextReducer) {
          if (typeof nextReducer !== "function") {
            throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
          }
          currentReducer = nextReducer;
          dispatch({
            type: ActionTypes.REPLACE
          });
        }
        function observable() {
          var _ref;
          var outerSubscribe = subscribe;
          return _ref = {
            subscribe: function subscribe2(observer) {
              if (typeof observer !== "object" || observer === null) {
                throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
              }
              function observeState() {
                if (observer.next) {
                  observer.next(getState());
                }
              }
              observeState();
              var unsubscribe = outerSubscribe(observeState);
              return {
                unsubscribe: unsubscribe
              };
            }
          }, _ref[$$observable] = function() {
            return this;
          }, _ref;
        }
        dispatch({
          type: ActionTypes.INIT
        });
        return _ref2 = {
          dispatch: dispatch,
          subscribe: subscribe,
          getState: getState,
          replaceReducer: replaceReducer
        }, _ref2[$$observable] = observable, _ref2;
      }
      var legacy_createStore = createStore;
      function warning(message) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (e) {
        }
      }
      function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
        var reducerKeys = Object.keys(reducers);
        var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
        if (reducerKeys.length === 0) {
          return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
        }
        if (!isPlainObject(inputState)) {
          return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
        }
        var unexpectedKeys = Object.keys(inputState).filter(function(key) {
          return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
        });
        unexpectedKeys.forEach(function(key) {
          unexpectedKeyCache[key] = true;
        });
        if (action && action.type === ActionTypes.REPLACE)
          return;
        if (unexpectedKeys.length > 0) {
          return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
        }
      }
      function assertReducerShape(reducers) {
        Object.keys(reducers).forEach(function(key) {
          var reducer = reducers[key];
          var initialState = reducer(void 0, {
            type: ActionTypes.INIT
          });
          if (typeof initialState === "undefined") {
            throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
          }
          if (typeof reducer(void 0, {
            type: ActionTypes.PROBE_UNKNOWN_ACTION()
          }) === "undefined") {
            throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + '\' or other actions in "redux/*" ') + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
          }
        });
      }
      function combineReducers(reducers) {
        var reducerKeys = Object.keys(reducers);
        var finalReducers = {};
        for (var i = 0; i < reducerKeys.length; i++) {
          var key = reducerKeys[i];
          if (true) {
            if (typeof reducers[key] === "undefined") {
              warning('No reducer provided for key "' + key + '"');
            }
          }
          if (typeof reducers[key] === "function") {
            finalReducers[key] = reducers[key];
          }
        }
        var finalReducerKeys = Object.keys(finalReducers);
        var unexpectedKeyCache;
        if (true) {
          unexpectedKeyCache = {};
        }
        var shapeAssertionError;
        try {
          assertReducerShape(finalReducers);
        } catch (e) {
          shapeAssertionError = e;
        }
        return function combination(state, action) {
          if (state === void 0) {
            state = {};
          }
          if (shapeAssertionError) {
            throw shapeAssertionError;
          }
          if (true) {
            var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
              warning(warningMessage);
            }
          }
          var hasChanged = false;
          var nextState = {};
          for (var _i = 0; _i < finalReducerKeys.length; _i++) {
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === "undefined") {
              var actionType = action && action.type;
              throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
            }
            nextState[_key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
          }
          hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
          return hasChanged ? nextState : state;
        };
      }
      function bindActionCreator(actionCreator, dispatch) {
        return function() {
          return dispatch(actionCreator.apply(this, arguments));
        };
      }
      function bindActionCreators(actionCreators, dispatch) {
        if (typeof actionCreators === "function") {
          return bindActionCreator(actionCreators, dispatch);
        }
        if (typeof actionCreators !== "object" || actionCreators === null) {
          throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + '\'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
        }
        var boundActionCreators = {};
        for (var key in actionCreators) {
          var actionCreator = actionCreators[key];
          if (typeof actionCreator === "function") {
            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
          }
        }
        return boundActionCreators;
      }
      function compose() {
        for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
          funcs[_key] = arguments[_key];
        }
        if (funcs.length === 0) {
          return function(arg) {
            return arg;
          };
        }
        if (funcs.length === 1) {
          return funcs[0];
        }
        return funcs.reduce(function(a, b) {
          return function() {
            return a(b.apply(void 0, arguments));
          };
        });
      }
      function applyMiddleware() {
        for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
          middlewares[_key] = arguments[_key];
        }
        return function(createStore2) {
          return function() {
            var store = createStore2.apply(void 0, arguments);
            var _dispatch = function dispatch() {
              throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
            };
            var middlewareAPI = {
              getState: store.getState,
              dispatch: function dispatch() {
                return _dispatch.apply(void 0, arguments);
              }
            };
            var chain = middlewares.map(function(middleware) {
              return middleware(middlewareAPI);
            });
            _dispatch = compose.apply(void 0, chain)(store.dispatch);
            return _objectSpread__default["default"](_objectSpread__default["default"]({}, store), {}, {
              dispatch: _dispatch
            });
          };
        };
      }
      function isCrushed() {
      }
      if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
        warning('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
      }
      exports.__DO_NOT_USE__ActionTypes = ActionTypes;
      exports.applyMiddleware = applyMiddleware;
      exports.bindActionCreators = bindActionCreators;
      exports.combineReducers = combineReducers;
      exports.compose = compose;
      exports.createStore = createStore;
      exports.legacy_createStore = legacy_createStore;
    }
  });

  // node_modules/react-redux/lib/utils/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/react-redux/lib/utils/isPlainObject.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports["default"] = isPlainObject;
      function isPlainObject(obj) {
        if (typeof obj !== "object" || obj === null)
          return false;
        var proto = Object.getPrototypeOf(obj);
        if (proto === null)
          return true;
        var baseProto = proto;
        while (Object.getPrototypeOf(baseProto) !== null) {
          baseProto = Object.getPrototypeOf(baseProto);
        }
        return proto === baseProto;
      }
    }
  });

  // node_modules/react-redux/lib/utils/warning.js
  var require_warning = __commonJS({
    "node_modules/react-redux/lib/utils/warning.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports["default"] = warning;
      function warning(message) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (e) {
        }
      }
    }
  });

  // node_modules/react-redux/lib/utils/verifyPlainObject.js
  var require_verifyPlainObject = __commonJS({
    "node_modules/react-redux/lib/utils/verifyPlainObject.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports["default"] = verifyPlainObject;
      var _isPlainObject = _interopRequireDefault2(require_isPlainObject());
      var _warning = _interopRequireDefault2(require_warning());
      function verifyPlainObject(value, displayName, methodName) {
        if (!(0, _isPlainObject["default"])(value)) {
          (0, _warning["default"])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
        }
      }
    }
  });

  // node_modules/react-redux/lib/connect/wrapMapToProps.js
  var require_wrapMapToProps = __commonJS({
    "node_modules/react-redux/lib/connect/wrapMapToProps.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
      exports.getDependsOnOwnProps = getDependsOnOwnProps;
      exports.wrapMapToPropsFunc = wrapMapToPropsFunc;
      var _verifyPlainObject = _interopRequireDefault2(require_verifyPlainObject());
      function wrapMapToPropsConstant(getConstant) {
        return function initConstantSelector(dispatch, options) {
          var constant = getConstant(dispatch, options);
          function constantSelector() {
            return constant;
          }
          constantSelector.dependsOnOwnProps = false;
          return constantSelector;
        };
      }
      function getDependsOnOwnProps(mapToProps) {
        return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
      }
      function wrapMapToPropsFunc(mapToProps, methodName) {
        return function initProxySelector(dispatch, _ref) {
          var displayName = _ref.displayName;
          var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
            return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
          };
          proxy.dependsOnOwnProps = true;
          proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
            proxy.mapToProps = mapToProps;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
            var props = proxy(stateOrDispatch, ownProps);
            if (typeof props === "function") {
              proxy.mapToProps = props;
              proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
              props = proxy(stateOrDispatch, ownProps);
            }
            if (true)
              (0, _verifyPlainObject["default"])(props, displayName, methodName);
            return props;
          };
          return proxy;
        };
      }
    }
  });

  // node_modules/react-redux/lib/connect/mapDispatchToProps.js
  var require_mapDispatchToProps = __commonJS({
    "node_modules/react-redux/lib/connect/mapDispatchToProps.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
      exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
      exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;
      exports["default"] = void 0;
      var _redux = require_redux();
      var _wrapMapToProps = require_wrapMapToProps();
      function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
        return typeof mapDispatchToProps === "function" ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, "mapDispatchToProps") : void 0;
      }
      function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
        return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function(dispatch) {
          return {
            dispatch: dispatch
          };
        }) : void 0;
      }
      function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
        return mapDispatchToProps && typeof mapDispatchToProps === "object" ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function(dispatch) {
          return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
        }) : void 0;
      }
      var _default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
      exports["default"] = _default;
    }
  });

  // node_modules/react-redux/lib/connect/mapStateToProps.js
  var require_mapStateToProps = __commonJS({
    "node_modules/react-redux/lib/connect/mapStateToProps.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
      exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;
      exports["default"] = void 0;
      var _wrapMapToProps = require_wrapMapToProps();
      function whenMapStateToPropsIsFunction(mapStateToProps) {
        return typeof mapStateToProps === "function" ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, "mapStateToProps") : void 0;
      }
      function whenMapStateToPropsIsMissing(mapStateToProps) {
        return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function() {
          return {};
        }) : void 0;
      }
      var _default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
      exports["default"] = _default;
    }
  });

  // node_modules/react-redux/lib/connect/mergeProps.js
  var require_mergeProps = __commonJS({
    "node_modules/react-redux/lib/connect/mergeProps.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports.defaultMergeProps = defaultMergeProps;
      exports.wrapMergePropsFunc = wrapMergePropsFunc;
      exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
      exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
      exports["default"] = void 0;
      var _extends2 = _interopRequireDefault2(require_extends());
      var _verifyPlainObject = _interopRequireDefault2(require_verifyPlainObject());
      function defaultMergeProps(stateProps, dispatchProps, ownProps) {
        return (0, _extends2["default"])({}, ownProps, {}, stateProps, {}, dispatchProps);
      }
      function wrapMergePropsFunc(mergeProps) {
        return function initMergePropsProxy(dispatch, _ref) {
          var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
          var hasRunOnce = false;
          var mergedProps;
          return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
            var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
            if (hasRunOnce) {
              if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
                mergedProps = nextMergedProps;
            } else {
              hasRunOnce = true;
              mergedProps = nextMergedProps;
              if (true)
                (0, _verifyPlainObject["default"])(mergedProps, displayName, "mergeProps");
            }
            return mergedProps;
          };
        };
      }
      function whenMergePropsIsFunction(mergeProps) {
        return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
      }
      function whenMergePropsIsOmitted(mergeProps) {
        return !mergeProps ? function() {
          return defaultMergeProps;
        } : void 0;
      }
      var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
      exports["default"] = _default;
    }
  });

  // node_modules/react-redux/lib/connect/verifySubselectors.js
  var require_verifySubselectors = __commonJS({
    "node_modules/react-redux/lib/connect/verifySubselectors.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports["default"] = verifySubselectors;
      var _warning = _interopRequireDefault2(require_warning());
      function verify(selector, methodName, displayName) {
        if (!selector) {
          throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
        } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
          if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
            (0, _warning["default"])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
          }
        }
      }
      function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
        verify(mapStateToProps, "mapStateToProps", displayName);
        verify(mapDispatchToProps, "mapDispatchToProps", displayName);
        verify(mergeProps, "mergeProps", displayName);
      }
    }
  });

  // node_modules/react-redux/lib/connect/selectorFactory.js
  var require_selectorFactory = __commonJS({
    "node_modules/react-redux/lib/connect/selectorFactory.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
      exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
      exports["default"] = finalPropsSelectorFactory;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault2(require_objectWithoutPropertiesLoose());
      var _verifySubselectors = _interopRequireDefault2(require_verifySubselectors());
      function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
        return function impureFinalPropsSelector(state, ownProps) {
          return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
        };
      }
      function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
        var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
        var hasRunAtLeastOnce = false;
        var state;
        var ownProps;
        var stateProps;
        var dispatchProps;
        var mergedProps;
        function handleFirstCall(firstState, firstOwnProps) {
          state = firstState;
          ownProps = firstOwnProps;
          stateProps = mapStateToProps(state, ownProps);
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          hasRunAtLeastOnce = true;
          return mergedProps;
        }
        function handleNewPropsAndNewState() {
          stateProps = mapStateToProps(state, ownProps);
          if (mapDispatchToProps.dependsOnOwnProps)
            dispatchProps = mapDispatchToProps(dispatch, ownProps);
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          return mergedProps;
        }
        function handleNewProps() {
          if (mapStateToProps.dependsOnOwnProps)
            stateProps = mapStateToProps(state, ownProps);
          if (mapDispatchToProps.dependsOnOwnProps)
            dispatchProps = mapDispatchToProps(dispatch, ownProps);
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          return mergedProps;
        }
        function handleNewState() {
          var nextStateProps = mapStateToProps(state, ownProps);
          var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
          stateProps = nextStateProps;
          if (statePropsChanged)
            mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          return mergedProps;
        }
        function handleSubsequentCalls(nextState, nextOwnProps) {
          var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
          var stateChanged = !areStatesEqual(nextState, state);
          state = nextState;
          ownProps = nextOwnProps;
          if (propsChanged && stateChanged)
            return handleNewPropsAndNewState();
          if (propsChanged)
            return handleNewProps();
          if (stateChanged)
            return handleNewState();
          return mergedProps;
        }
        return function pureFinalPropsSelector(nextState, nextOwnProps) {
          return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
        };
      }
      function finalPropsSelectorFactory(dispatch, _ref2) {
        var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
        var mapStateToProps = initMapStateToProps(dispatch, options);
        var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
        var mergeProps = initMergeProps(dispatch, options);
        if (true) {
          (0, _verifySubselectors["default"])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
        }
        var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
        return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
      }
    }
  });

  // node_modules/react-redux/lib/connect/connect.js
  var require_connect = __commonJS({
    "node_modules/react-redux/lib/connect/connect.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports.createConnect = createConnect;
      exports["default"] = void 0;
      var _extends2 = _interopRequireDefault2(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault2(require_objectWithoutPropertiesLoose());
      var _connectAdvanced = _interopRequireDefault2(require_connectAdvanced());
      var _shallowEqual = _interopRequireDefault2(require_shallowEqual());
      var _mapDispatchToProps = _interopRequireDefault2(require_mapDispatchToProps());
      var _mapStateToProps = _interopRequireDefault2(require_mapStateToProps());
      var _mergeProps = _interopRequireDefault2(require_mergeProps());
      var _selectorFactory = _interopRequireDefault2(require_selectorFactory());
      function match(arg, factories, name) {
        for (var i = factories.length - 1; i >= 0; i--) {
          var result = factories[i](arg);
          if (result)
            return result;
        }
        return function(dispatch, options) {
          throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
        };
      }
      function strictEqual(a, b) {
        return a === b;
      }
      function createConnect(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? _connectAdvanced["default"] : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps["default"] : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps["default"] : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps["default"] : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory["default"] : _ref$selectorFactory;
        return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
          if (_ref2 === void 0) {
            _ref2 = {};
          }
          var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqual["default"] : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqual["default"] : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqual["default"] : _ref3$areMergedPropsE, extraOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
          var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
          var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
          var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
          return connectHOC(selectorFactory, (0, _extends2["default"])({
            methodName: "connect",
            getDisplayName: function getDisplayName(name) {
              return "Connect(" + name + ")";
            },
            shouldHandleStateChanges: Boolean(mapStateToProps),
            initMapStateToProps: initMapStateToProps,
            initMapDispatchToProps: initMapDispatchToProps,
            initMergeProps: initMergeProps,
            pure: pure,
            areStatesEqual: areStatesEqual,
            areOwnPropsEqual: areOwnPropsEqual,
            areStatePropsEqual: areStatePropsEqual,
            areMergedPropsEqual: areMergedPropsEqual
          }, extraOptions));
        };
      }
      var _default = /* @__PURE__ */ createConnect();
      exports["default"] = _default;
    }
  });

  // node_modules/react-redux/lib/hooks/useReduxContext.js
  var require_useReduxContext = __commonJS({
    "node_modules/react-redux/lib/hooks/useReduxContext.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.useReduxContext = useReduxContext;
      var _react2 = require_react();
      var _Context = require_Context();
      function useReduxContext() {
        var contextValue = (0, _react2.useContext)(_Context.ReactReduxContext);
        if (!contextValue) {
          throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
        }
        return contextValue;
      }
    }
  });

  // node_modules/react-redux/lib/hooks/useStore.js
  var require_useStore = __commonJS({
    "node_modules/react-redux/lib/hooks/useStore.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.createStoreHook = createStoreHook;
      exports.useStore = void 0;
      var _react2 = require_react();
      var _Context = require_Context();
      var _useReduxContext2 = require_useReduxContext();
      function createStoreHook(context) {
        if (context === void 0) {
          context = _Context.ReactReduxContext;
        }
        var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function() {
          return (0, _react2.useContext)(context);
        };
        return function useStore2() {
          var _useReduxContext = useReduxContext(), store = _useReduxContext.store;
          return store;
        };
      }
      var useStore = /* @__PURE__ */ createStoreHook();
      exports.useStore = useStore;
    }
  });

  // node_modules/react-redux/lib/hooks/useDispatch.js
  var require_useDispatch = __commonJS({
    "node_modules/react-redux/lib/hooks/useDispatch.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.createDispatchHook = createDispatchHook;
      exports.useDispatch = void 0;
      var _Context = require_Context();
      var _useStore = require_useStore();
      function createDispatchHook(context) {
        if (context === void 0) {
          context = _Context.ReactReduxContext;
        }
        var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);
        return function useDispatch2() {
          var store = useStore();
          return store.dispatch;
        };
      }
      var useDispatch = /* @__PURE__ */ createDispatchHook();
      exports.useDispatch = useDispatch;
    }
  });

  // node_modules/react-redux/lib/hooks/useSelector.js
  var require_useSelector = __commonJS({
    "node_modules/react-redux/lib/hooks/useSelector.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      exports.createSelectorHook = createSelectorHook;
      exports.useSelector = void 0;
      var _react2 = require_react();
      var _useReduxContext2 = require_useReduxContext();
      var _Subscription = _interopRequireDefault2(require_Subscription());
      var _useIsomorphicLayoutEffect = require_useIsomorphicLayoutEffect();
      var _Context = require_Context();
      var refEquality = function refEquality2(a, b) {
        return a === b;
      };
      function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
        var _useReducer = (0, _react2.useReducer)(function(s) {
          return s + 1;
        }, 0), forceRender = _useReducer[1];
        var subscription = (0, _react2.useMemo)(function() {
          return new _Subscription["default"](store, contextSub);
        }, [store, contextSub]);
        var latestSubscriptionCallbackError = (0, _react2.useRef)();
        var latestSelector = (0, _react2.useRef)();
        var latestSelectedState = (0, _react2.useRef)();
        var selectedState;
        try {
          if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {
            selectedState = selector(store.getState());
          } else {
            selectedState = latestSelectedState.current;
          }
        } catch (err) {
          if (latestSubscriptionCallbackError.current) {
            err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
          }
          throw err;
        }
        (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function() {
          latestSelector.current = selector;
          latestSelectedState.current = selectedState;
          latestSubscriptionCallbackError.current = void 0;
        });
        (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function() {
          function checkForUpdates() {
            try {
              var newSelectedState = latestSelector.current(store.getState());
              if (equalityFn(newSelectedState, latestSelectedState.current)) {
                return;
              }
              latestSelectedState.current = newSelectedState;
            } catch (err) {
              latestSubscriptionCallbackError.current = err;
            }
            forceRender({});
          }
          subscription.onStateChange = checkForUpdates;
          subscription.trySubscribe();
          checkForUpdates();
          return function() {
            return subscription.tryUnsubscribe();
          };
        }, [store, subscription]);
        return selectedState;
      }
      function createSelectorHook(context) {
        if (context === void 0) {
          context = _Context.ReactReduxContext;
        }
        var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function() {
          return (0, _react2.useContext)(context);
        };
        return function useSelector2(selector, equalityFn) {
          if (equalityFn === void 0) {
            equalityFn = refEquality;
          }
          if (!selector) {
            throw new Error("You must pass a selector to useSelectors");
          }
          var _useReduxContext = useReduxContext(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
          return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
        };
      }
      var useSelector = /* @__PURE__ */ createSelectorHook();
      exports.useSelector = useSelector;
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var shouldYieldToHost;
          var requestPaint;
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            var initialTime = Date.now();
            exports.unstable_now = function() {
              return Date.now() - initialTime;
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            shouldYieldToHost = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var performance2 = window.performance;
            var _Date = window.Date;
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
            }
            if (typeof performance2 === "object" && typeof performance2.now === "function") {
              exports.unstable_now = function() {
                return performance2.now();
              };
            } else {
              var _initialTime = _Date.now();
              exports.unstable_now = function() {
                return _Date.now() - _initialTime;
              };
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              shouldYieldToHost = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (callback !== null) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function timeoutForPriorityLevel(priorityLevel) {
            switch (priorityLevel) {
              case ImmediatePriority:
                return IMMEDIATE_PRIORITY_TIMEOUT;
              case UserBlockingPriority:
                return USER_BLOCKING_PRIORITY;
              case IdlePriority:
                return IDLE_PRIORITY;
              case LowPriority:
                return LOW_PRIORITY_TIMEOUT;
              case NormalPriority:
              default:
                return NORMAL_PRIORITY_TIMEOUT;
            }
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            var timeout;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
              timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
            } else {
              timeout = timeoutForPriorityLevel(priorityLevel);
              startTime = currentTime;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback: callback,
              priorityLevel: priorityLevel,
              startTime: startTime,
              expirationTime: expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          function unstable_shouldYield() {
            var currentTime = exports.unstable_now();
            advanceTimers(currentTime);
            var firstTask = peek(taskQueue);
            return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents: startLoggingProfilingEvents,
            stopLoggingProfilingEvents: stopLoggingProfilingEvents,
            sharedProfilingBuffer: sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = unstable_shouldYield;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name: name,
              timestamp: timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
                  onInteractionTraced: onInteractionTraced,
                  onWorkCanceled: onWorkCanceled,
                  onWorkScheduled: onWorkScheduled,
                  onWorkStarted: onWorkStarted,
                  onWorkStopped: onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js": function(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var checkPropTypes = require_checkPropTypes();
          var tracing = require_tracing();
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
            ReactSharedInternals.ReactCurrentDispatcher = {
              current: null
            };
          }
          if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
            ReactSharedInternals.ReactCurrentBatchConfig = {
              suspense: null
            };
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
              if (!hasExistingStack) {
                var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame2.getStackAddendum();
                if (stack !== "") {
                  format += "%s";
                  args = args.concat([stack]);
                }
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
              try {
                var argIndex = 0;
                var message = "Warning: " + format.replace(/%s/g, function() {
                  return args[argIndex++];
                });
                throw new Error(message);
              } catch (x) {
              }
            }
          }
          if (!React) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          };
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              var invokeGuardedCallbackDev = function(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didError) {
                  if (!didSetError) {
                    error2 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
              };
              invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var getFiberCurrentPropsFromNode = null;
          var getInstanceFromNode = null;
          var getNodeFromInstance = null;
          function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
            getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
            getInstanceFromNode = getInstanceFromNodeImpl;
            getNodeFromInstance = getNodeFromInstanceImpl;
            {
              if (!getNodeFromInstance || !getInstanceFromNode) {
                error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
              }
            }
          }
          var validateEventDispatches;
          {
            validateEventDispatches = function(event) {
              var dispatchListeners = event._dispatchListeners;
              var dispatchInstances = event._dispatchInstances;
              var listenersIsArr = Array.isArray(dispatchListeners);
              var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
              var instancesIsArr = Array.isArray(dispatchInstances);
              var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
              if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
                error("EventPluginUtils: Invalid `event`.");
              }
            };
          }
          function executeDispatch(event, listener, inst) {
            var type = event.type || "unknown-event";
            event.currentTarget = getNodeFromInstance(inst);
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function executeDispatchesInOrder(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            {
              validateEventDispatches(event);
            }
            if (Array.isArray(dispatchListeners)) {
              for (var i = 0; i < dispatchListeners.length; i++) {
                if (event.isPropagationStopped()) {
                  break;
                }
                executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
              }
            } else if (dispatchListeners) {
              executeDispatch(event, dispatchListeners, dispatchInstances);
            }
            event._dispatchListeners = null;
            event._dispatchInstances = null;
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var eventPluginOrder = null;
          var namesToPlugins = {};
          function recomputePluginOrdering() {
            if (!eventPluginOrder) {
              return;
            }
            for (var pluginName in namesToPlugins) {
              var pluginModule = namesToPlugins[pluginName];
              var pluginIndex = eventPluginOrder.indexOf(pluginName);
              if (!(pluginIndex > -1)) {
                {
                  throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
                }
              }
              if (plugins[pluginIndex]) {
                continue;
              }
              if (!pluginModule.extractEvents) {
                {
                  throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
                }
              }
              plugins[pluginIndex] = pluginModule;
              var publishedEvents = pluginModule.eventTypes;
              for (var eventName in publishedEvents) {
                if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                  {
                    throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                  }
                }
              }
            }
          }
          function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
            if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
              {
                throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
              }
            }
            eventNameDispatchConfigs[eventName] = dispatchConfig;
            var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
            if (phasedRegistrationNames) {
              for (var phaseName in phasedRegistrationNames) {
                if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                  var phasedRegistrationName = phasedRegistrationNames[phaseName];
                  publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
                }
              }
              return true;
            } else if (dispatchConfig.registrationName) {
              publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
              return true;
            }
            return false;
          }
          function publishRegistrationName(registrationName, pluginModule, eventName) {
            if (!!registrationNameModules[registrationName]) {
              {
                throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
              }
            }
            registrationNameModules[registrationName] = pluginModule;
            registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
          }
          var plugins = [];
          var eventNameDispatchConfigs = {};
          var registrationNameModules = {};
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function injectEventPluginOrder(injectedEventPluginOrder) {
            if (!!eventPluginOrder) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
              }
            }
            eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
            recomputePluginOrdering();
          }
          function injectEventPluginsByName(injectedNamesToPlugins) {
            var isOrderingDirty = false;
            for (var pluginName in injectedNamesToPlugins) {
              if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue;
              }
              var pluginModule = injectedNamesToPlugins[pluginName];
              if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
                if (!!namesToPlugins[pluginName]) {
                  {
                    throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                  }
                }
                namesToPlugins[pluginName] = pluginModule;
                isOrderingDirty = true;
              }
            }
            if (isOrderingDirty) {
              recomputePluginOrdering();
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var PLUGIN_EVENT_SYSTEM = 1;
          var IS_REPLAYED = 1 << 5;
          var IS_FIRST_ANCESTOR = 1 << 6;
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var enableProfilerTimer = true;
          var enableDeprecatedFlareAPI = false;
          var enableFundamentalAPI = false;
          var warnAboutStringRefs = false;
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
              flushDiscreteUpdatesImpl();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix = name.toLowerCase().slice(0, 5);
                  return prefix !== "data-" && prefix !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true);
          });
          var ReactDebugCurrentFrame = null;
          {
            ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          function describeComponentFrame(name, source, ownerName) {
            var sourceInfo = "";
            if (source) {
              var path = source.fileName;
              var fileName = path.replace(BEFORE_SLASH_RE, "");
              {
                if (/^index\./.test(fileName)) {
                  var match = path.match(BEFORE_SLASH_RE);
                  if (match) {
                    var pathBeforeSlash = match[1];
                    if (pathBeforeSlash) {
                      var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                      fileName = folderName + "/" + fileName;
                    }
                  }
                }
              }
              sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
            } else if (ownerName) {
              sourceInfo = " (created by " + ownerName + ")";
            }
            return "\n    in " + (name || "Unknown") + sourceInfo;
          }
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function refineResolvedLazyComponent(lazyComponent) {
            return lazyComponent._status === Resolved ? lazyComponent._result : null;
          }
          function initializeLazyComponentType(lazyComponent) {
            if (lazyComponent._status === Uninitialized) {
              lazyComponent._status = Pending;
              var ctor = lazyComponent._ctor;
              var thenable = ctor();
              lazyComponent._result = thenable;
              thenable.then(function(moduleObject) {
                if (lazyComponent._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  lazyComponent._status = Resolved;
                  lazyComponent._result = defaultExport;
                }
              }, function(error2) {
                if (lazyComponent._status === Pending) {
                  lazyComponent._status = Rejected;
                  lazyComponent._result = error2;
                }
              });
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                  return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type.render);
                case REACT_LAZY_TYPE: {
                  var thenable = type;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);
                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }
                  break;
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function describeFiber(fiber) {
            switch (fiber.tag) {
              case HostRoot:
              case HostPortal:
              case HostText:
              case Fragment:
              case ContextProvider:
              case ContextConsumer:
                return "";
              default:
                var owner = fiber._debugOwner;
                var source = fiber._debugSource;
                var name = getComponentName(fiber.type);
                var ownerName = null;
                if (owner) {
                  ownerName = getComponentName(owner.type);
                }
                return describeComponentFrame(name, source, ownerName);
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          }
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame$1.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var ReactDebugCurrentFrame$2 = null;
          var ReactControlledValuePropTypes = {
            checkPropTypes: null
          };
          {
            ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var hasReadOnlyValue = {
              button: true,
              checkbox: true,
              image: true,
              hidden: true,
              radio: true,
              reset: true,
              submit: true
            };
            var propTypes = {
              value: function(props, propName, componentName) {
                if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                  return null;
                }
                return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              },
              checked: function(props, propName, componentName) {
                if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                  return null;
                }
                return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            };
            ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
              checkPropTypes(propTypes, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
            };
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              ReactControlledValuePropTypes.checkPropTypes("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || node.ownerDocument.activeElement !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              ReactControlledValuePropTypes.checkPropTypes("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
                if (options[_i].selected !== selected) {
                  options[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options.length; _i2++) {
                if (options[_i2].value === _selectedValue) {
                  options[_i2].selected = true;
                  if (setDefaultSelected) {
                    options[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options[_i2].disabled) {
                  defaultSelected = options[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              ReactControlledValuePropTypes.checkPropTypes("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          function unsafeCastStringToDOMTopLevelType(topLevelType) {
            return topLevelType;
          }
          function unsafeCastDOMTopLevelTypeToString(topLevelType) {
            return topLevelType;
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
          var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
          var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
          var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
          var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
          var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
          var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
          var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
          var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
          var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
          var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
          var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
          var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
          var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
          var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
          var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
          var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
          var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
          var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
          var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
          var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
          var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
          var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
          var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
          var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
          var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
          var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
          var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
          var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
          var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
          var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
          var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
          var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
          var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
          var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
          var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
          var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
          var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
          var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
          var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
          var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
          var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
          var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
          var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
          var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
          var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
          var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
          var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
          var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
          var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
          var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
          var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
          var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
          var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
          var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
          var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
          var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
          var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
          var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
          var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
          var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
          var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
          var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
          var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
          var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
          var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
          var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
          var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
          var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
          var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
          var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
          var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
          var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
          var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
          var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
          var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
          var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
          var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
          var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
          var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
          var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
          function getRawEventName(topLevelType) {
            return unsafeCastDOMTopLevelTypeToString(topLevelType);
          }
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          var elementListenerMap = new PossiblyWeakMap();
          function getListenerMapForElement(element) {
            var listenerMap = elementListenerMap.get(element);
            if (listenerMap === void 0) {
              listenerMap = /* @__PURE__ */ new Map();
              elementListenerMap.set(element, listenerMap);
            }
            return listenerMap;
          }
          function get(key) {
            return key._reactInternalFiber;
          }
          function has(key) {
            return key._reactInternalFiber !== void 0;
          }
          function set(key, value) {
            key._reactInternalFiber = value;
          }
          var NoEffect = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function accumulateInto(current2, next) {
            if (!(next != null)) {
              {
                throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
              }
            }
            if (current2 == null) {
              return next;
            }
            if (Array.isArray(current2)) {
              if (Array.isArray(next)) {
                current2.push.apply(current2, next);
                return current2;
              }
              current2.push(next);
              return current2;
            }
            if (Array.isArray(next)) {
              return [current2].concat(next);
            }
            return [current2, next];
          }
          function forEachAccumulated(arr, cb, scope) {
            if (Array.isArray(arr)) {
              arr.forEach(cb, scope);
            } else if (arr) {
              cb.call(scope, arr);
            }
          }
          var eventQueue = null;
          var executeDispatchesAndRelease = function(event) {
            if (event) {
              executeDispatchesInOrder(event);
              if (!event.isPersistent()) {
                event.constructor.release(event);
              }
            }
          };
          var executeDispatchesAndReleaseTopLevel = function(e) {
            return executeDispatchesAndRelease(e);
          };
          function runEventsInBatch(events) {
            if (events !== null) {
              eventQueue = accumulateInto(eventQueue, events);
            }
            var processingEventQueue = eventQueue;
            eventQueue = null;
            if (!processingEventQueue) {
              return;
            }
            forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
            if (!!eventQueue) {
              {
                throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
              }
            }
            rethrowCaughtError();
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
          var callbackBookkeepingPool = [];
          function releaseTopLevelCallbackBookKeeping(instance) {
            instance.topLevelType = null;
            instance.nativeEvent = null;
            instance.targetInst = null;
            instance.ancestors.length = 0;
            if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
              callbackBookkeepingPool.push(instance);
            }
          }
          function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
            if (callbackBookkeepingPool.length) {
              var instance = callbackBookkeepingPool.pop();
              instance.topLevelType = topLevelType;
              instance.eventSystemFlags = eventSystemFlags;
              instance.nativeEvent = nativeEvent;
              instance.targetInst = targetInst;
              return instance;
            }
            return {
              topLevelType: topLevelType,
              eventSystemFlags: eventSystemFlags,
              nativeEvent: nativeEvent,
              targetInst: targetInst,
              ancestors: []
            };
          }
          function findRootContainerNode(inst) {
            if (inst.tag === HostRoot) {
              return inst.stateNode.containerInfo;
            }
            while (inst.return) {
              inst = inst.return;
            }
            if (inst.tag !== HostRoot) {
              return null;
            }
            return inst.stateNode.containerInfo;
          }
          function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var events = null;
            for (var i = 0; i < plugins.length; i++) {
              var possiblePlugin = plugins[i];
              if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
                if (extractedEvents) {
                  events = accumulateInto(events, extractedEvents);
                }
              }
            }
            return events;
          }
          function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            runEventsInBatch(events);
          }
          function handleTopLevel(bookKeeping) {
            var targetInst = bookKeeping.targetInst;
            var ancestor = targetInst;
            do {
              if (!ancestor) {
                var ancestors = bookKeeping.ancestors;
                ancestors.push(ancestor);
                break;
              }
              var root2 = findRootContainerNode(ancestor);
              if (!root2) {
                break;
              }
              var tag = ancestor.tag;
              if (tag === HostComponent || tag === HostText) {
                bookKeeping.ancestors.push(ancestor);
              }
              ancestor = getClosestInstanceFromNode(root2);
            } while (ancestor);
            for (var i = 0; i < bookKeeping.ancestors.length; i++) {
              targetInst = bookKeeping.ancestors[i];
              var eventTarget = getEventTarget(bookKeeping.nativeEvent);
              var topLevelType = bookKeeping.topLevelType;
              var nativeEvent = bookKeeping.nativeEvent;
              var eventSystemFlags = bookKeeping.eventSystemFlags;
              if (i === 0) {
                eventSystemFlags |= IS_FIRST_ANCESTOR;
              }
              runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
            }
          }
          function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
            var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
            try {
              batchedEventUpdates(handleTopLevel, bookKeeping);
            } finally {
              releaseTopLevelCallbackBookKeeping(bookKeeping);
            }
          }
          function legacyListenToEvent(registrationName, mountAt) {
            var listenerMap = getListenerMapForElement(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
            }
          }
          function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
            if (!listenerMap.has(topLevelType)) {
              switch (topLevelType) {
                case TOP_SCROLL:
                  trapCapturedEvent(TOP_SCROLL, mountAt);
                  break;
                case TOP_FOCUS:
                case TOP_BLUR:
                  trapCapturedEvent(TOP_FOCUS, mountAt);
                  trapCapturedEvent(TOP_BLUR, mountAt);
                  listenerMap.set(TOP_BLUR, null);
                  listenerMap.set(TOP_FOCUS, null);
                  break;
                case TOP_CANCEL:
                case TOP_CLOSE:
                  if (isEventSupported(getRawEventName(topLevelType))) {
                    trapCapturedEvent(topLevelType, mountAt);
                  }
                  break;
                case TOP_INVALID:
                case TOP_SUBMIT:
                case TOP_RESET:
                  break;
                default:
                  var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                  if (!isMediaEvent) {
                    trapBubbledEvent(topLevelType, mountAt);
                  }
                  break;
              }
              listenerMap.set(topLevelType, null);
            }
          }
          function isListeningToAllDependencies(registrationName, mountAt) {
            var listenerMap = getListenerMapForElement(mountAt);
            var dependencies = registrationNameDependencies[registrationName];
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i];
              if (!listenerMap.has(dependency)) {
                return false;
              }
            }
            return true;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
          var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
            legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
          }
          function eagerlyTrapReplayableEvents(container, document2) {
            var listenerMapForDoc = getListenerMapForElement(document2);
            discreteReplayableEvents.forEach(function(topLevelType) {
              trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
            });
            continuousReplayableEvents.forEach(function(topLevelType) {
              trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
            });
          }
          function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            return {
              blockedOn: blockedOn,
              topLevelType: topLevelType,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent: nativeEvent,
              container: container
            };
          }
          function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_FOCUS:
              case TOP_BLUR:
                queuedFocus = null;
                break;
              case TOP_DRAG_ENTER:
              case TOP_DRAG_LEAVE:
                queuedDrag = null;
                break;
              case TOP_MOUSE_OVER:
              case TOP_MOUSE_OUT:
                queuedMouse = null;
                break;
              case TOP_POINTER_OVER:
              case TOP_POINTER_OUT: {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE: {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode$1(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
            switch (topLevelType) {
              case TOP_FOCUS: {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
                return true;
              }
              case TOP_DRAG_ENTER: {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
                return true;
              }
              case TOP_MOUSE_OVER: {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
                return true;
              }
              case TOP_POINTER_OVER: {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
                return true;
              }
              case TOP_GOT_POINTER_CAPTURE: {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
              } else {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          function addEventBubbleListener(element, eventType, listener) {
            element.addEventListener(eventType, listener, false);
          }
          function addEventCaptureListener(element, eventType, listener) {
            element.addEventListener(eventType, listener, true);
          }
          var simpleEventPluginEventTypes = {};
          var topLevelEventsToDispatchConfig = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
          var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
          var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
          var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
          function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
            for (var i = 0; i < eventTypes2.length; i += 2) {
              var topEvent = eventTypes2[i];
              var event = eventTypes2[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var onEvent = "on" + capitalizedEvent;
              var config = {
                phasedRegistrationNames: {
                  bubbled: onEvent,
                  captured: onEvent + "Capture"
                },
                dependencies: [topEvent],
                eventPriority: priority
              };
              eventPriorities.set(topEvent, priority);
              topLevelEventsToDispatchConfig.set(topEvent, config);
              simpleEventPluginEventTypes[event] = config;
            }
          }
          function processTopEventPairsByPriority(eventTypes2, priority) {
            for (var i = 0; i < eventTypes2.length; i++) {
              eventPriorities.set(eventTypes2[i], priority);
            }
          }
          processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
          function getEventPriorityForPluginSystem(topLevelType) {
            var priority = eventPriorities.get(topLevelType);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function trapBubbledEvent(topLevelType, element) {
            trapEventForPluginEventSystem(element, topLevelType, false);
          }
          function trapCapturedEvent(topLevelType, element) {
            trapEventForPluginEventSystem(element, topLevelType, true);
          }
          function trapEventForPluginEventSystem(container, topLevelType, capture) {
            var listener;
            switch (getEventPriorityForPluginSystem(topLevelType)) {
              case DiscreteEvent:
                listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
              case UserBlockingEvent:
                listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
              case ContinuousEvent:
              default:
                listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
                break;
            }
            var rawEventName = getRawEventName(topLevelType);
            if (capture) {
              addEventCaptureListener(container, rawEventName, listener);
            } else {
              addEventBubbleListener(container, rawEventName, listener);
            }
          }
          function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
            runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
          }
          function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            if (!_enabled) {
              return;
            }
            if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
              queueDiscreteEvent(null, topLevelType, eventSystemFlags, container, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn === null) {
              clearIfContinuousEvent(topLevelType, nativeEvent);
              return;
            }
            if (isReplayableDiscreteEvent(topLevelType)) {
              queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(topLevelType, nativeEvent);
            {
              dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
            }
          }
          function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            {
              dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
            }
            return null;
          }
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix) {
              isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          var ReactDebugCurrentFrame$3 = null;
          {
            ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
          }
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, canUseEventSystem) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (canUseEventSystem) {
                if (registrationNameModules.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, canUseEventSystem) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, canUseEventSystem) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, canUseEventSystem);
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              time: true,
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, true);
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function ensureListeningTo(rootContainerElement, registrationName) {
            var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
            var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
            legacyListenToEvent(registrationName, doc);
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "iframe":
              case "object":
              case "embed":
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                trapBubbledEvent(TOP_ERROR, domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                props = rawProps;
                break;
              case "form":
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                props = rawProps;
                break;
              case "details":
                trapBubbledEvent(TOP_TOGGLE, domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "iframe":
              case "object":
              case "embed":
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  trapBubbledEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                trapBubbledEvent(TOP_ERROR, domElement);
                break;
              case "img":
              case "image":
              case "link":
                trapBubbledEvent(TOP_ERROR, domElement);
                trapBubbledEvent(TOP_LOAD, domElement);
                break;
              case "form":
                trapBubbledEvent(TOP_RESET, domElement);
                trapBubbledEvent(TOP_SUBMIT, domElement);
                break;
              case "details":
                trapBubbledEvent(TOP_TOGGLE, domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                trapBubbledEvent(TOP_INVALID, domElement);
                ensureListeningTo(rootContainerElement, "onChange");
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  ensureListeningTo(rootContainerElement, propKey);
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start: start,
              end: end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              activeElementDetached: null,
              focusedElem: focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start, end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag: tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var addendum = getCurrentFiberStackInDev();
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace: namespace,
                ancestorInfo: ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace: namespace,
                ancestorInfo: ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            setEnabled(false);
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function shouldDeprioritizeSubtree(type, props) {
            return !!props.hidden;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactInternalInstance$" + randomKey;
          var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
          var internalContainerInstanceKey = "__reactContainere$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode$1(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance$1(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode$1(node) {
            return node[internalEventHandlersKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalEventHandlersKey] = props;
          }
          function getParent(inst) {
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var depthA = 0;
            for (var tempA = instA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = instB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              instA = getParent(instA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              instB = getParent(instB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (instA === instB || instA === instB.alternate) {
                return instA;
              }
              instA = getParent(instA);
              instB = getParent(instB);
            }
            return null;
          }
          function traverseTwoPhase(inst, fn, arg) {
            var path = [];
            while (inst) {
              path.push(inst);
              inst = getParent(inst);
            }
            var i;
            for (i = path.length; i-- > 0; ) {
              fn(path[i], "captured", arg);
            }
            for (i = 0; i < path.length; i++) {
              fn(path[i], "bubbled", arg);
            }
          }
          function traverseEnterLeave(from, to, fn, argFrom, argTo) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            var pathFrom = [];
            while (true) {
              if (!from) {
                break;
              }
              if (from === common) {
                break;
              }
              var alternate = from.alternate;
              if (alternate !== null && alternate === common) {
                break;
              }
              pathFrom.push(from);
              from = getParent(from);
            }
            var pathTo = [];
            while (true) {
              if (!to) {
                break;
              }
              if (to === common) {
                break;
              }
              var _alternate = to.alternate;
              if (_alternate !== null && _alternate === common) {
                break;
              }
              pathTo.push(to);
              to = getParent(to);
            }
            for (var i = 0; i < pathFrom.length; i++) {
              fn(pathFrom[i], "bubbled", argFrom);
            }
            for (var _i = pathTo.length; _i-- > 0; ) {
              fn(pathTo[_i], "captured", argTo);
            }
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var listener;
            var stateNode = inst.stateNode;
            if (!stateNode) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (!props) {
              return null;
            }
            listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          function listenerAtPhase(inst, event, propagationPhase) {
            var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
            return getListener(inst, registrationName);
          }
          function accumulateDirectionalDispatches(inst, phase, event) {
            {
              if (!inst) {
                error("Dispatching inst must not be null");
              }
            }
            var listener = listenerAtPhase(inst, event, phase);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
          function accumulateTwoPhaseDispatchesSingle(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
            }
          }
          function accumulateDispatches(inst, ignoredDirection, event) {
            if (inst && event && event.dispatchConfig.registrationName) {
              var registrationName = event.dispatchConfig.registrationName;
              var listener = getListener(inst, registrationName);
              if (listener) {
                event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
                event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
              }
            }
          }
          function accumulateDirectDispatchesSingle(event) {
            if (event && event.dispatchConfig.registrationName) {
              accumulateDispatches(event._targetInst, null, event);
            }
          }
          function accumulateTwoPhaseDispatches(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
          }
          function accumulateEnterLeaveDispatches(leave, enter, from, to) {
            traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
          }
          function accumulateDirectDispatches(events) {
            forEachAccumulated(events, accumulateDirectDispatchesSingle);
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          var EVENT_POOL_SIZE = 10;
          var EventInterface = {
            type: null,
            target: null,
            currentTarget: function() {
              return null;
            },
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: null,
            isTrusted: null
          };
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
            {
              delete this.nativeEvent;
              delete this.preventDefault;
              delete this.stopPropagation;
              delete this.isDefaultPrevented;
              delete this.isPropagationStopped;
            }
            this.dispatchConfig = dispatchConfig;
            this._targetInst = targetInst;
            this.nativeEvent = nativeEvent;
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              if (!Interface.hasOwnProperty(propName)) {
                continue;
              }
              {
                delete this[propName];
              }
              var normalize = Interface[propName];
              if (normalize) {
                this[propName] = normalize(nativeEvent);
              } else {
                if (propName === "target") {
                  this.target = nativeEventTarget;
                } else {
                  this[propName] = nativeEvent[propName];
                }
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
              this.isPersistent = functionThatReturnsTrue;
            },
            isPersistent: functionThatReturnsFalse,
            destructor: function() {
              var Interface = this.constructor.Interface;
              for (var propName in Interface) {
                {
                  Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
                }
              }
              this.dispatchConfig = null;
              this._targetInst = null;
              this.nativeEvent = null;
              this.isDefaultPrevented = functionThatReturnsFalse;
              this.isPropagationStopped = functionThatReturnsFalse;
              this._dispatchListeners = null;
              this._dispatchInstances = null;
              {
                Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
                Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
                Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
                Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
                }));
                Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
                }));
              }
            }
          });
          SyntheticEvent.Interface = EventInterface;
          SyntheticEvent.extend = function(Interface) {
            var Super = this;
            var E = function() {
            };
            E.prototype = Super.prototype;
            var prototype = new E();
            function Class() {
              return Super.apply(this, arguments);
            }
            _assign(prototype, Class.prototype);
            Class.prototype = prototype;
            Class.prototype.constructor = Class;
            Class.Interface = _assign({}, Super.Interface, Interface);
            Class.extend = Super.extend;
            addEventPoolingTo(Class);
            return Class;
          };
          addEventPoolingTo(SyntheticEvent);
          function getPooledWarningPropertyDefinition(propName, getVal) {
            var isFunction = typeof getVal === "function";
            return {
              configurable: true,
              set: set2,
              get: get2
            };
            function set2(val) {
              var action = isFunction ? "setting the method" : "setting the property";
              warn2(action, "This is effectively a no-op");
              return val;
            }
            function get2() {
              var action = isFunction ? "accessing the method" : "accessing the property";
              var result = isFunction ? "This is a no-op function" : "This is set to null";
              warn2(action, result);
              return getVal;
            }
            function warn2(action, result) {
              {
                error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
              }
            }
          }
          function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
            var EventConstructor = this;
            if (EventConstructor.eventPool.length) {
              var instance = EventConstructor.eventPool.pop();
              EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
              return instance;
            }
            return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
          }
          function releasePooledEvent(event) {
            var EventConstructor = this;
            if (!(event instanceof EventConstructor)) {
              {
                throw Error("Trying to release an event instance into a pool of a different type.");
              }
            }
            event.destructor();
            if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
              EventConstructor.eventPool.push(event);
            }
          }
          function addEventPoolingTo(EventConstructor) {
            EventConstructor.eventPool = [];
            EventConstructor.getPooled = getPooledEvent;
            EventConstructor.release = releasePooledEvent;
          }
          var SyntheticCompositionEvent = SyntheticEvent.extend({
            data: null
          });
          var SyntheticInputEvent = SyntheticEvent.extend({
            data: null
          });
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          var eventTypes = {
            beforeInput: {
              phasedRegistrationNames: {
                bubbled: "onBeforeInput",
                captured: "onBeforeInputCapture"
              },
              dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
            },
            compositionEnd: {
              phasedRegistrationNames: {
                bubbled: "onCompositionEnd",
                captured: "onCompositionEndCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            },
            compositionStart: {
              phasedRegistrationNames: {
                bubbled: "onCompositionStart",
                captured: "onCompositionStartCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            },
            compositionUpdate: {
              phasedRegistrationNames: {
                bubbled: "onCompositionUpdate",
                captured: "onCompositionUpdateCapture"
              },
              dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
            }
          };
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(topLevelType) {
            switch (topLevelType) {
              case TOP_COMPOSITION_START:
                return eventTypes.compositionStart;
              case TOP_COMPOSITION_END:
                return eventTypes.compositionEnd;
              case TOP_COMPOSITION_UPDATE:
                return eventTypes.compositionUpdate;
            }
          }
          function isFallbackCompositionStart(topLevelType, nativeEvent) {
            return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_KEY_UP:
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case TOP_KEY_DOWN:
                return nativeEvent.keyCode !== START_KEYCODE;
              case TOP_KEY_PRESS:
              case TOP_MOUSE_DOWN:
              case TOP_BLUR:
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(topLevelType);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionStart;
              }
            } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionEnd;
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === eventTypes.compositionStart) {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          function getNativeBeforeInputChars(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case TOP_COMPOSITION_END:
                return getDataFromCustomEvent(nativeEvent);
              case TOP_KEY_PRESS:
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case TOP_TEXT_INPUT:
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
            if (isComposing) {
              if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (topLevelType) {
              case TOP_PASTE:
                return null;
              case TOP_KEY_PRESS:
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case TOP_COMPOSITION_END:
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
            event.data = chars;
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          var BeforeInputEventPlugin = {
            eventTypes: eventTypes,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
              var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
              if (composition === null) {
                return beforeInput;
              }
              if (beforeInput === null) {
                return composition;
              }
              return [composition, beforeInput];
            }
          };
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          var eventTypes$1 = {
            change: {
              phasedRegistrationNames: {
                bubbled: "onChange",
                captured: "onChangeCapture"
              },
              dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
            }
          };
          function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
            var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
            event.type = "change";
            enqueueStateRestore(target);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, event);
          }
          function runEventInBatch(event) {
            runEventsInBatch(event);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance$1(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_CHANGE) {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
            if (topLevelType === TOP_FOCUS) {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (topLevelType === TOP_BLUR) {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
            if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_CLICK) {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
            if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          var ChangeEventPlugin = {
            eventTypes: eventTypes$1,
            _isInputEventSupported: isInputEventSupported,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
              var getTargetInstFunc, handleEventFunc;
              if (shouldUseChangeEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForChangeEvent;
              } else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) {
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                } else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  handleEventFunc = handleEventsForInputEventPolyfill;
                }
              } else if (shouldUseClickEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForClickEvent;
              }
              if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst);
                if (inst) {
                  var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                  return event;
                }
              }
              if (handleEventFunc) {
                handleEventFunc(topLevelType, targetNode, targetInst);
              }
              if (topLevelType === TOP_BLUR) {
                handleControlledInputBlur(targetNode);
              }
            }
          };
          var SyntheticUIEvent = SyntheticEvent.extend({
            view: null,
            detail: null
          });
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var previousScreenX = 0;
          var previousScreenY = 0;
          var isMovementXSet = false;
          var isMovementYSet = false;
          var SyntheticMouseEvent = SyntheticUIEvent.extend({
            screenX: null,
            screenY: null,
            clientX: null,
            clientY: null,
            pageX: null,
            pageY: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            getModifierState: getEventModifierState,
            button: null,
            buttons: null,
            relatedTarget: function(event) {
              return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              var screenX = previousScreenX;
              previousScreenX = event.screenX;
              if (!isMovementXSet) {
                isMovementXSet = true;
                return 0;
              }
              return event.type === "mousemove" ? event.screenX - screenX : 0;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              var screenY = previousScreenY;
              previousScreenY = event.screenY;
              if (!isMovementYSet) {
                isMovementYSet = true;
                return 0;
              }
              return event.type === "mousemove" ? event.screenY - screenY : 0;
            }
          });
          var SyntheticPointerEvent = SyntheticMouseEvent.extend({
            pointerId: null,
            width: null,
            height: null,
            pressure: null,
            tangentialPressure: null,
            tiltX: null,
            tiltY: null,
            twist: null,
            pointerType: null,
            isPrimary: null
          });
          var eventTypes$2 = {
            mouseEnter: {
              registrationName: "onMouseEnter",
              dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
            },
            mouseLeave: {
              registrationName: "onMouseLeave",
              dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
            },
            pointerEnter: {
              registrationName: "onPointerEnter",
              dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
            },
            pointerLeave: {
              registrationName: "onPointerLeave",
              dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
            }
          };
          var EnterLeaveEventPlugin = {
            eventTypes: eventTypes$2,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
              var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
              if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
                return null;
              }
              if (!isOutEvent && !isOverEvent) {
                return null;
              }
              var win;
              if (nativeEventTarget.window === nativeEventTarget) {
                win = nativeEventTarget;
              } else {
                var doc = nativeEventTarget.ownerDocument;
                if (doc) {
                  win = doc.defaultView || doc.parentWindow;
                } else {
                  win = window;
                }
              }
              var from;
              var to;
              if (isOutEvent) {
                from = targetInst;
                var related = nativeEvent.relatedTarget || nativeEvent.toElement;
                to = related ? getClosestInstanceFromNode(related) : null;
                if (to !== null) {
                  var nearestMounted = getNearestMountedFiber(to);
                  if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                    to = null;
                  }
                }
              } else {
                from = null;
                to = targetInst;
              }
              if (from === to) {
                return null;
              }
              var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
              if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
                eventInterface = SyntheticMouseEvent;
                leaveEventType = eventTypes$2.mouseLeave;
                enterEventType = eventTypes$2.mouseEnter;
                eventTypePrefix = "mouse";
              } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
                eventInterface = SyntheticPointerEvent;
                leaveEventType = eventTypes$2.pointerLeave;
                enterEventType = eventTypes$2.pointerEnter;
                eventTypePrefix = "pointer";
              }
              var fromNode = from == null ? win : getNodeFromInstance$1(from);
              var toNode = to == null ? win : getNodeFromInstance$1(to);
              var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
              leave.type = eventTypePrefix + "leave";
              leave.target = fromNode;
              leave.relatedTarget = toNode;
              var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
              enter.type = eventTypePrefix + "enter";
              enter.target = toNode;
              enter.relatedTarget = fromNode;
              accumulateEnterLeaveDispatches(leave, enter, from, to);
              if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
                return [leave];
              }
              return [leave, enter];
            }
          };
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          var eventTypes$3 = {
            select: {
              phasedRegistrationNames: {
                bubbled: "onSelect",
                captured: "onSelectCapture"
              },
              dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
            }
          };
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return null;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
              syntheticEvent.type = "select";
              syntheticEvent.target = activeElement$1;
              accumulateTwoPhaseDispatches(syntheticEvent);
              return syntheticEvent;
            }
            return null;
          }
          var SelectEventPlugin = {
            eventTypes: eventTypes$3,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
              var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
              if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
                return null;
              }
              var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
              switch (topLevelType) {
                case TOP_FOCUS:
                  if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                  }
                  break;
                case TOP_BLUR:
                  activeElement$1 = null;
                  activeElementInst$1 = null;
                  lastSelection = null;
                  break;
                case TOP_MOUSE_DOWN:
                  mouseDown = true;
                  break;
                case TOP_CONTEXT_MENU:
                case TOP_MOUSE_UP:
                case TOP_DRAG_END:
                  mouseDown = false;
                  return constructSelectEvent(nativeEvent, nativeEventTarget);
                case TOP_SELECTION_CHANGE:
                  if (skipSelectionChangeEvent) {
                    break;
                  }
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                  return constructSelectEvent(nativeEvent, nativeEventTarget);
              }
              return null;
            }
          };
          var SyntheticAnimationEvent = SyntheticEvent.extend({
            animationName: null,
            elapsedTime: null,
            pseudoElement: null
          });
          var SyntheticClipboardEvent = SyntheticEvent.extend({
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticFocusEvent = SyntheticUIEvent.extend({
            relatedTarget: null
          });
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
            key: getEventKey,
            location: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            repeat: null,
            locale: null,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticDragEvent = SyntheticMouseEvent.extend({
            dataTransfer: null
          });
          var SyntheticTouchEvent = SyntheticUIEvent.extend({
            touches: null,
            targetTouches: null,
            changedTouches: null,
            altKey: null,
            metaKey: null,
            ctrlKey: null,
            shiftKey: null,
            getModifierState: getEventModifierState
          });
          var SyntheticTransitionEvent = SyntheticEvent.extend({
            propertyName: null,
            elapsedTime: null,
            pseudoElement: null
          });
          var SyntheticWheelEvent = SyntheticMouseEvent.extend({
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: null,
            deltaMode: null
          });
          var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
          var SimpleEventPlugin = {
            eventTypes: simpleEventPluginEventTypes,
            extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
              var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
              if (!dispatchConfig) {
                return null;
              }
              var EventConstructor;
              switch (topLevelType) {
                case TOP_KEY_PRESS:
                  if (getEventCharCode(nativeEvent) === 0) {
                    return null;
                  }
                case TOP_KEY_DOWN:
                case TOP_KEY_UP:
                  EventConstructor = SyntheticKeyboardEvent;
                  break;
                case TOP_BLUR:
                case TOP_FOCUS:
                  EventConstructor = SyntheticFocusEvent;
                  break;
                case TOP_CLICK:
                  if (nativeEvent.button === 2) {
                    return null;
                  }
                case TOP_AUX_CLICK:
                case TOP_DOUBLE_CLICK:
                case TOP_MOUSE_DOWN:
                case TOP_MOUSE_MOVE:
                case TOP_MOUSE_UP:
                case TOP_MOUSE_OUT:
                case TOP_MOUSE_OVER:
                case TOP_CONTEXT_MENU:
                  EventConstructor = SyntheticMouseEvent;
                  break;
                case TOP_DRAG:
                case TOP_DRAG_END:
                case TOP_DRAG_ENTER:
                case TOP_DRAG_EXIT:
                case TOP_DRAG_LEAVE:
                case TOP_DRAG_OVER:
                case TOP_DRAG_START:
                case TOP_DROP:
                  EventConstructor = SyntheticDragEvent;
                  break;
                case TOP_TOUCH_CANCEL:
                case TOP_TOUCH_END:
                case TOP_TOUCH_MOVE:
                case TOP_TOUCH_START:
                  EventConstructor = SyntheticTouchEvent;
                  break;
                case TOP_ANIMATION_END:
                case TOP_ANIMATION_ITERATION:
                case TOP_ANIMATION_START:
                  EventConstructor = SyntheticAnimationEvent;
                  break;
                case TOP_TRANSITION_END:
                  EventConstructor = SyntheticTransitionEvent;
                  break;
                case TOP_SCROLL:
                  EventConstructor = SyntheticUIEvent;
                  break;
                case TOP_WHEEL:
                  EventConstructor = SyntheticWheelEvent;
                  break;
                case TOP_COPY:
                case TOP_CUT:
                case TOP_PASTE:
                  EventConstructor = SyntheticClipboardEvent;
                  break;
                case TOP_GOT_POINTER_CAPTURE:
                case TOP_LOST_POINTER_CAPTURE:
                case TOP_POINTER_CANCEL:
                case TOP_POINTER_DOWN:
                case TOP_POINTER_MOVE:
                case TOP_POINTER_OUT:
                case TOP_POINTER_OVER:
                case TOP_POINTER_UP:
                  EventConstructor = SyntheticPointerEvent;
                  break;
                default:
                  {
                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                      error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                    }
                  }
                  EventConstructor = SyntheticEvent;
                  break;
              }
              var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
              accumulateTwoPhaseDispatches(event);
              return event;
            }
          };
          var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
          injectEventPluginOrder(DOMEventPluginOrder);
          setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
          injectEventPluginsByName({
            SimpleEventPlugin: SimpleEventPlugin,
            EnterLeaveEventPlugin: EnterLeaveEventPlugin,
            ChangeEventPlugin: ChangeEventPlugin,
            SelectEventPlugin: SelectEventPlugin,
            BeforeInputEventPlugin: BeforeInputEventPlugin
          });
          var reactEmoji = "\u269B";
          var warningEmoji = "\u26D4";
          var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
          var currentFiber = null;
          var currentPhase = null;
          var currentPhaseFiber = null;
          var isCommitting = false;
          var hasScheduledUpdateInCurrentCommit = false;
          var hasScheduledUpdateInCurrentPhase = false;
          var commitCountInCurrentWorkLoop = 0;
          var effectCountInCurrentCommit = 0;
          var labelsInCurrentCommit = /* @__PURE__ */ new Set();
          var formatMarkName = function(markName) {
            return reactEmoji + " " + markName;
          };
          var formatLabel = function(label, warning) {
            var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
            var suffix = warning ? " Warning: " + warning : "";
            return "" + prefix + label + suffix;
          };
          var beginMark = function(markName) {
            performance.mark(formatMarkName(markName));
          };
          var clearMark = function(markName) {
            performance.clearMarks(formatMarkName(markName));
          };
          var endMark = function(label, markName, warning) {
            var formattedMarkName = formatMarkName(markName);
            var formattedLabel = formatLabel(label, warning);
            try {
              performance.measure(formattedLabel, formattedMarkName);
            } catch (err) {
            }
            performance.clearMarks(formattedMarkName);
            performance.clearMeasures(formattedLabel);
          };
          var getFiberMarkName = function(label, debugID) {
            return label + " (#" + debugID + ")";
          };
          var getFiberLabel = function(componentName, isMounted2, phase) {
            if (phase === null) {
              return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
            } else {
              return componentName + "." + phase;
            }
          };
          var beginFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            if (isCommitting && labelsInCurrentCommit.has(label)) {
              return false;
            }
            labelsInCurrentCommit.add(label);
            var markName = getFiberMarkName(label, debugID);
            beginMark(markName);
            return true;
          };
          var clearFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            clearMark(markName);
          };
          var endFiberMark = function(fiber, phase, warning) {
            var componentName = getComponentName(fiber.type) || "Unknown";
            var debugID = fiber._debugID;
            var isMounted2 = fiber.alternate !== null;
            var label = getFiberLabel(componentName, isMounted2, phase);
            var markName = getFiberMarkName(label, debugID);
            endMark(label, markName, warning);
          };
          var shouldIgnoreFiber = function(fiber) {
            switch (fiber.tag) {
              case HostRoot:
              case HostComponent:
              case HostText:
              case HostPortal:
              case Fragment:
              case ContextProvider:
              case ContextConsumer:
              case Mode:
                return true;
              default:
                return false;
            }
          };
          var clearPendingPhaseMeasurement = function() {
            if (currentPhase !== null && currentPhaseFiber !== null) {
              clearFiberMark(currentPhaseFiber, currentPhase);
            }
            currentPhaseFiber = null;
            currentPhase = null;
            hasScheduledUpdateInCurrentPhase = false;
          };
          var pauseTimers = function() {
            var fiber = currentFiber;
            while (fiber) {
              if (fiber._debugIsCurrentlyTiming) {
                endFiberMark(fiber, null, null);
              }
              fiber = fiber.return;
            }
          };
          var resumeTimersRecursively = function(fiber) {
            if (fiber.return !== null) {
              resumeTimersRecursively(fiber.return);
            }
            if (fiber._debugIsCurrentlyTiming) {
              beginFiberMark(fiber, null);
            }
          };
          var resumeTimers = function() {
            if (currentFiber !== null) {
              resumeTimersRecursively(currentFiber);
            }
          };
          function recordEffect() {
            {
              effectCountInCurrentCommit++;
            }
          }
          function recordScheduleUpdate() {
            {
              if (isCommitting) {
                hasScheduledUpdateInCurrentCommit = true;
              }
              if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
                hasScheduledUpdateInCurrentPhase = true;
              }
            }
          }
          function startWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber;
              if (!beginFiberMark(fiber, null)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = true;
            }
          }
          function cancelWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              clearFiberMark(fiber, null);
            }
          }
          function stopWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber.return;
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              endFiberMark(fiber, null, null);
            }
          }
          function stopFailedWorkTimer(fiber) {
            {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return;
              }
              currentFiber = fiber.return;
              if (!fiber._debugIsCurrentlyTiming) {
                return;
              }
              fiber._debugIsCurrentlyTiming = false;
              var warning = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
              endFiberMark(fiber, null, warning);
            }
          }
          function startPhaseTimer(fiber, phase) {
            {
              if (!supportsUserTiming) {
                return;
              }
              clearPendingPhaseMeasurement();
              if (!beginFiberMark(fiber, phase)) {
                return;
              }
              currentPhaseFiber = fiber;
              currentPhase = phase;
            }
          }
          function stopPhaseTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
                endFiberMark(currentPhaseFiber, currentPhase, warning);
              }
              currentPhase = null;
              currentPhaseFiber = null;
            }
          }
          function startWorkLoopTimer(nextUnitOfWork) {
            {
              currentFiber = nextUnitOfWork;
              if (!supportsUserTiming) {
                return;
              }
              commitCountInCurrentWorkLoop = 0;
              beginMark("(React Tree Reconciliation)");
              resumeTimers();
            }
          }
          function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
            {
              if (!supportsUserTiming) {
                return;
              }
              var warning = null;
              if (interruptedBy2 !== null) {
                if (interruptedBy2.tag === HostRoot) {
                  warning = "A top-level update interrupted the previous render";
                } else {
                  var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                  warning = "An update to " + componentName + " interrupted the previous render";
                }
              } else if (commitCountInCurrentWorkLoop > 1) {
                warning = "There were cascading updates";
              }
              commitCountInCurrentWorkLoop = 0;
              var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
              pauseTimers();
              endMark(label, "(React Tree Reconciliation)", warning);
            }
          }
          function startCommitTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              isCommitting = true;
              hasScheduledUpdateInCurrentCommit = false;
              labelsInCurrentCommit.clear();
              beginMark("(Committing Changes)");
            }
          }
          function stopCommitTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var warning = null;
              if (hasScheduledUpdateInCurrentCommit) {
                warning = "Lifecycle hook scheduled a cascading update";
              } else if (commitCountInCurrentWorkLoop > 0) {
                warning = "Caused by a cascading update in earlier commit";
              }
              hasScheduledUpdateInCurrentCommit = false;
              commitCountInCurrentWorkLoop++;
              isCommitting = false;
              labelsInCurrentCommit.clear();
              endMark("(Committing Changes)", "(Committing Changes)", warning);
            }
          }
          function startCommitSnapshotEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Committing Snapshot Effects)");
            }
          }
          function stopCommitSnapshotEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
            }
          }
          function startCommitHostEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Committing Host Effects)");
            }
          }
          function stopCommitHostEffectsTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
            }
          }
          function startCommitLifeCyclesTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              effectCountInCurrentCommit = 0;
              beginMark("(Calling Lifecycle Methods)");
            }
          }
          function stopCommitLifeCyclesTimer() {
            {
              if (!supportsUserTiming) {
                return;
              }
              var count = effectCountInCurrentCommit;
              effectCountInCurrentCommit = 0;
              endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name, getCurrentFiberStackInDev);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext;
              startPhaseTimer(fiber, "getChildContext");
              childContext = instance.getChildContext();
              stopPhaseTimer();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name, getCurrentFiberStackInDev);
              }
              return _assign({}, parentContext, {}, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority = 99;
          var UserBlockingPriority$1 = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs = Scheduler_now();
          var now = initialTimeMs < 1e4 ? Scheduler_now : function() {
            return Scheduler_now() - initialTimeMs;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$1;
              case Scheduler_NormalPriority:
                return NormalPriority;
              case Scheduler_LowPriority:
                return LowPriority;
              case Scheduler_IdlePriority:
                return IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$1:
                return Scheduler_UserBlockingPriority;
              case NormalPriority:
                return Scheduler_NormalPriority;
              case LowPriority:
                return Scheduler_LowPriority;
              case IdlePriority:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              try {
                var _isSync = true;
                var queue = syncQueue;
                runWithPriority$1(ImmediatePriority, function() {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(_isSync);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var NoWork = 0;
          var Never = 1;
          var Idle = 2;
          var ContinuousHydration = 3;
          var Sync = MAX_SIGNED_31_BIT_INT;
          var Batched = Sync - 1;
          var UNIT_SIZE = 10;
          var MAGIC_NUMBER_OFFSET = Batched - 1;
          function msToExpirationTime(ms) {
            return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
          }
          function expirationTimeToMs(expirationTime) {
            return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
          }
          function ceiling(num, precision) {
            return ((num / precision | 0) + 1) * precision;
          }
          function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
            return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
          }
          var LOW_PRIORITY_EXPIRATION = 5e3;
          var LOW_PRIORITY_BATCH_SIZE = 250;
          function computeAsyncExpiration(currentTime) {
            return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
          }
          function computeSuspenseExpiration(currentTime, timeoutMs) {
            return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
          }
          var HIGH_PRIORITY_EXPIRATION = 500;
          var HIGH_PRIORITY_BATCH_SIZE = 100;
          function computeInteractiveExpiration(currentTime) {
            return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
          }
          function inferPriorityFromExpirationTime(currentTime, expirationTime) {
            if (expirationTime === Sync) {
              return ImmediatePriority;
            }
            if (expirationTime === Never || expirationTime === Idle) {
              return IdlePriority;
            }
            var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
            if (msUntil <= 0) {
              return ImmediatePriority;
            }
            if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
              return UserBlockingPriority$1;
            }
            if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
              return NormalPriority;
            }
            return IdlePriority;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              syncUpdates(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleWork(fiber, Sync);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function readLazyComponentType(lazyComponent) {
            initializeLazyComponentType(lazyComponent);
            if (lazyComponent._status !== Resolved) {
              throw lazyComponent._result;
            }
            return lazyComponent._result;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderExpirationTime2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (node.childExpirationTime < renderExpirationTime2) {
                node.childExpirationTime = renderExpirationTime2;
                if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                  alternate.childExpirationTime = renderExpirationTime2;
                }
              } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(renderExpirationTime2, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    if (fiber.expirationTime < renderExpirationTime2) {
                      fiber.expirationTime = renderExpirationTime2;
                    }
                    var alternate = fiber.alternate;
                    if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                      alternate.expirationTime = renderExpirationTime2;
                    }
                    scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                    if (list.expirationTime < renderExpirationTime2) {
                      list.expirationTime = renderExpirationTime2;
                    }
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderExpirationTime2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (dependencies.expirationTime >= renderExpirationTime2) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  expirationTime: NoWork,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              baseQueue: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                baseQueue: currentQueue.baseQueue,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(expirationTime, suspenseConfig) {
            var update = {
              expirationTime: expirationTime,
              suspenseConfig: suspenseConfig,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            update.next = update;
            {
              update.priority = getCurrentPriorityLevel();
            }
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, update) {
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              cloneUpdateQueue(current2, workInProgress2);
            }
            var queue = workInProgress2.updateQueue;
            var last = queue.baseQueue;
            if (last === null) {
              queue.baseQueue = update.next = update;
              update.next = update;
            } else {
              update.next = last.next;
              last.next = update;
            }
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress2.mode & StrictMode) {
                      payload.call(instance, prevState, nextProps);
                    }
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                    if (workInProgress2.mode & StrictMode) {
                      _payload.call(instance, prevState, nextProps);
                    }
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var baseQueue = queue.baseQueue;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              baseQueue = pendingQueue;
              queue.shared.pending = null;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                if (currentQueue !== null) {
                  currentQueue.baseQueue = pendingQueue;
                }
              }
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = queue.baseState;
              var newExpirationTime = NoWork;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              if (first !== null) {
                var update = first;
                do {
                  var updateExpirationTime = update.expirationTime;
                  if (updateExpirationTime < renderExpirationTime2) {
                    var clone = {
                      expirationTime: update.expirationTime,
                      suspenseConfig: update.suspenseConfig,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newBaseQueueLast === null) {
                      newBaseQueueFirst = newBaseQueueLast = clone;
                      newBaseState = newState;
                    } else {
                      newBaseQueueLast = newBaseQueueLast.next = clone;
                    }
                    if (updateExpirationTime > newExpirationTime) {
                      newExpirationTime = updateExpirationTime;
                    }
                  } else {
                    if (newBaseQueueLast !== null) {
                      var _clone = {
                        expirationTime: Sync,
                        suspenseConfig: update.suspenseConfig,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                      };
                      newBaseQueueLast = newBaseQueueLast.next = _clone;
                    }
                    markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                    newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                      workInProgress2.effectTag |= Callback;
                      var effects = queue.effects;
                      if (effects === null) {
                        queue.effects = [update];
                      } else {
                        effects.push(update);
                      }
                    }
                  }
                  update = update.next;
                  if (update === null || update === first) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) {
                      break;
                    } else {
                      update = baseQueue.next = pendingQueue.next;
                      pendingQueue.next = first;
                      queue.baseQueue = baseQueue = pendingQueue;
                      queue.shared.pending = null;
                    }
                  }
                } while (true);
              }
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              queue.baseState = newBaseState;
              queue.baseQueue = newBaseQueueLast;
              markUnprocessedUpdateTime(newExpirationTime);
              workInProgress2.expirationTime = newExpirationTime;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          function requestCurrentSuspenseConfig() {
            return ReactCurrentBatchConfig.suspense;
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                getDerivedStateFromProps(nextProps, prevState);
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.expirationTime === NoWork) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted: isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var currentTime = requestCurrentTimeForUpdate();
              var suspenseConfig = requestCurrentSuspenseConfig();
              var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
              var update = createUpdate(expirationTime, suspenseConfig);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                }
              }
              startPhaseTimer(workInProgress2, "shouldComponentUpdate");
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              stopPhaseTimer();
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                new ctor(props, context);
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            startPhaseTimer(workInProgress2, "componentWillMount");
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            stopPhaseTimer();
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            startPhaseTimer(workInProgress2, "componentWillReceiveProps");
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            stopPhaseTimer();
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                startPhaseTimer(workInProgress2, "componentWillMount");
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
                stopPhaseTimer();
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.effectTag |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var oldProps = workInProgress2.memoizedProps;
            instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                startPhaseTimer(workInProgress2, "componentWillUpdate");
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
                stopPhaseTimer();
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.effectTag |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.effectTag |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.effectTag |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
              }
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
                }
              }
            }
          }
          function warnOnFunctionType() {
            {
              var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
              if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.effectTag = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.effectTag = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.effectTag = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, expirationTime) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, expirationTime) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, expirationTime) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, expirationTime, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, expirationTime) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType();
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case FunctionComponent: {
                    var Component = returnFiber.type;
                    {
                      {
                        throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, renderExpirationTime2) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, renderExpirationTime2);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function createDeprecatedResponderListener(responder, props) {
            var eventResponderListener = {
              responder: responder,
              props: props
            };
            {
              Object.freeze(eventResponderListener);
            }
            return eventResponderListener;
          }
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderExpirationTime = NoWork;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderExpirationTime) {
            renderExpirationTime = nextRenderExpirationTime;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.expirationTime = NoWork;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (workInProgress2.expirationTime === renderExpirationTime) {
              var numberOfReRenders = 0;
              do {
                workInProgress2.expirationTime = NoWork;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (workInProgress2.expirationTime === renderExpirationTime);
            }
            ReactCurrentDispatcher.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderExpirationTime = NoWork;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, expirationTime) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.effectTag &= ~(Passive | Update);
            if (current2.expirationTime <= expirationTime) {
              current2.expirationTime = NoWork;
            }
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
            }
            renderExpirationTime = NoWork;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime) {
                  var clone = {
                    expirationTime: update.expirationTime,
                    suspenseConfig: update.suspenseConfig,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                    currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                    markUnprocessedUpdateTime(updateExpirationTime);
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update.suspenseConfig,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag: tag,
              create: create,
              destroy: destroy,
              deps: deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
            hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookEffectTag, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
            hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value, config) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config]);
            return prevValue;
          }
          function updateDeferredValue(value, config) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config]);
            return prevValue;
          }
          function rerenderDeferredValue(value, config) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            }, [value, config]);
            return prevValue;
          }
          function startTransition(setPending, config, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
              var previousConfig = ReactCurrentBatchConfig$1.suspense;
              ReactCurrentBatchConfig$1.suspense = config === void 0 ? null : config;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.suspense = previousConfig;
              }
            });
          }
          function mountTransition(config) {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
            return [start, isPending];
          }
          function updateTransition(config) {
            var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
            var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
            return [start, isPending];
          }
          function rerenderTransition(config) {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
            var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
            return [start, isPending];
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = {
              expirationTime: expirationTime,
              suspenseConfig: suspenseConfig,
              action: action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            {
              update.priority = getCurrentPriorityLevel();
            }
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdate = true;
              update.expirationTime = renderExpirationTime;
              currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
            } else {
              if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher.current;
                    ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleWork(fiber, expirationTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext: readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useResponder: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                mountHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition(config);
              }
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition(config);
              }
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition(config);
              }
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition(config);
              }
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition(config);
              }
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition(config);
              }
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useResponder: function(responder, props) {
                currentHookNameInDev = "useResponder";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return createDeprecatedResponderListener(responder, props);
              },
              useDeferredValue: function(value, config) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value, config);
              },
              useTransition: function(config) {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition(config);
              }
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.effectTag = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderExpirationTime2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type), getCurrentFiberStackInDev);
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type), getCurrentFiberStackInDev);
              }
            }
            var currentChild = current2.child;
            if (updateExpirationTime < renderExpirationTime2) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
            workInProgress2.effectTag |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  outerMemoType = refineResolvedLazyComponent(outerMemoType);
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType), getCurrentFiberStackInDev);
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (updateExpirationTime < renderExpirationTime2) {
                  workInProgress2.expirationTime = current2.expirationTime;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
          }
          function updateFragment(current2, workInProgress2, renderExpirationTime2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderExpirationTime2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
            {
              workInProgress2.effectTag |= Update;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.effectTag |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderExpirationTime2);
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderExpirationTime2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.effectTag |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
            {
              var inst = workInProgress2.stateNode;
              if (inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  instance.render();
                }
                setIsRendering(false);
              }
            }
            workInProgress2.effectTag |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.effectTag = node.effectTag & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.effectTag |= ContentReset;
            }
            markRef(current2, workInProgress2);
            if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
              {
                markSpawnedWork(Never);
              }
              workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
              return null;
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            var props = workInProgress2.pendingProps;
            cancelWorkTimer(workInProgress2);
            var Component = readLazyComponentType(elementType);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            startWorkTimer(workInProgress2);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component), getCurrentFiberStackInDev);
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateExpirationTime, renderExpirationTime2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
              setIsRendering(false);
            }
            workInProgress2.effectTag |= PerformedWork;
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  if (workInProgress2.memoizedState !== null) {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderExpirationTime2);
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderExpirationTime2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support contextType.", _componentName3);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryTime: NoWork
          };
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
            var mode = workInProgress2.mode;
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.effectTag |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var nextDidTimeout = false;
            var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              nextDidTimeout = true;
              workInProgress2.effectTag &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              if (nextDidTimeout) {
                var nextFallbackChildren = nextProps.fallback;
                var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
                primaryChildFragment.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var progressedState = workInProgress2.memoizedState;
                  var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  primaryChildFragment.child = progressedPrimaryChild;
                  var progressedChild = progressedPrimaryChild;
                  while (progressedChild !== null) {
                    progressedChild.return = primaryChildFragment;
                    progressedChild = progressedChild.sibling;
                  }
                }
                var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
                fallbackChildFragment.return = workInProgress2;
                primaryChildFragment.sibling = fallbackChildFragment;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = primaryChildFragment;
                return fallbackChildFragment;
              } else {
                var nextPrimaryChildren = nextProps.children;
                workInProgress2.memoizedState = null;
                return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var currentPrimaryChildFragment = current2.child;
                var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
                if (nextDidTimeout) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                  _primaryChildFragment2.return = workInProgress2;
                  if ((workInProgress2.mode & BlockingMode) === NoMode) {
                    var _progressedState = workInProgress2.memoizedState;
                    var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                    if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                      _primaryChildFragment2.child = _progressedPrimaryChild;
                      var _progressedChild2 = _progressedPrimaryChild;
                      while (_progressedChild2 !== null) {
                        _progressedChild2.return = _primaryChildFragment2;
                        _progressedChild2 = _progressedChild2.sibling;
                      }
                    }
                  }
                  if (workInProgress2.mode & ProfileMode) {
                    var _treeBaseDuration = 0;
                    var _hiddenChild = _primaryChildFragment2.child;
                    while (_hiddenChild !== null) {
                      _treeBaseDuration += _hiddenChild.treeBaseDuration;
                      _hiddenChild = _hiddenChild.sibling;
                    }
                    _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                  }
                  var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                  _fallbackChildFragment2.return = workInProgress2;
                  _primaryChildFragment2.sibling = _fallbackChildFragment2;
                  _primaryChildFragment2.childExpirationTime = NoWork;
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  workInProgress2.child = _primaryChildFragment2;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren = nextProps.children;
                  var currentPrimaryChild = currentPrimaryChildFragment.child;
                  var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                  workInProgress2.memoizedState = null;
                  return workInProgress2.child = primaryChild;
                }
              } else {
                var _currentPrimaryChild = current2.child;
                if (nextDidTimeout) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _primaryChildFragment3 = createFiberFromFragment(null, mode, NoWork, null);
                  _primaryChildFragment3.return = workInProgress2;
                  _primaryChildFragment3.child = _currentPrimaryChild;
                  if (_currentPrimaryChild !== null) {
                    _currentPrimaryChild.return = _primaryChildFragment3;
                  }
                  if ((workInProgress2.mode & BlockingMode) === NoMode) {
                    var _progressedState2 = workInProgress2.memoizedState;
                    var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                    _primaryChildFragment3.child = _progressedPrimaryChild2;
                    var _progressedChild3 = _progressedPrimaryChild2;
                    while (_progressedChild3 !== null) {
                      _progressedChild3.return = _primaryChildFragment3;
                      _progressedChild3 = _progressedChild3.sibling;
                    }
                  }
                  if (workInProgress2.mode & ProfileMode) {
                    var _treeBaseDuration2 = 0;
                    var _hiddenChild2 = _primaryChildFragment3.child;
                    while (_hiddenChild2 !== null) {
                      _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                      _hiddenChild2 = _hiddenChild2.sibling;
                    }
                    _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                  }
                  var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                  _fallbackChildFragment3.return = workInProgress2;
                  _primaryChildFragment3.sibling = _fallbackChildFragment3;
                  _fallbackChildFragment3.effectTag |= Placement;
                  _primaryChildFragment3.childExpirationTime = NoWork;
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  workInProgress2.child = _primaryChildFragment3;
                  return _fallbackChildFragment3;
                } else {
                  workInProgress2.memoizedState = null;
                  var _nextPrimaryChildren2 = nextProps.children;
                  return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
                }
              }
            }
          }
          function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
            if (fiber.expirationTime < renderExpirationTime2) {
              fiber.expirationTime = renderExpirationTime2;
            }
            var alternate = fiber.alternate;
            if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
              alternate.expirationTime = renderExpirationTime2;
            }
            scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderExpirationTime2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards: isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail: tail,
                tailExpiration: 0,
                tailMode: tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailExpiration = 0;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.effectTag |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            }
            return workInProgress2.child;
          }
          function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderExpirationTime2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderExpirationTime2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.effectTag |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
            cancelWorkTimer(workInProgress2);
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            var updateExpirationTime = workInProgress2.expirationTime;
            if (updateExpirationTime !== NoWork) {
              markUnprocessedUpdateTime(updateExpirationTime);
            }
            var childExpirationTime = workInProgress2.childExpirationTime;
            if (childExpirationTime < renderExpirationTime2) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.effectTag = Deletion;
              newWorkInProgress.effectTag |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderExpirationTime2) {
            var updateExpirationTime = workInProgress2.expirationTime;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (updateExpirationTime < renderExpirationTime2) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                      {
                        markSpawnedWork(Never);
                      }
                      workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                      return null;
                    }
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                      if (hasChildWork) {
                        workInProgress2.effectTag |= Update;
                      }
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                      if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                        return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                    var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                      }
                      workInProgress2.effectTag |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              } else {
                didReceiveUpdate = false;
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.expirationTime = NoWork;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderExpirationTime2);
              case Mode:
                return updateMode(current2, workInProgress2, renderExpirationTime2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderExpirationTime2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2), getCurrentFiberStackInDev);
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.effectTag |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.effectTag |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderExpirationTime2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                  workInProgress2.expirationTime = renderExpirationTime2;
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                  if (!nextDidTimeout && prevState !== null) {
                    var currentFallbackChild = current2.child.sibling;
                    if (currentFallbackChild !== null) {
                      var first = workInProgress2.firstEffect;
                      if (first !== null) {
                        workInProgress2.firstEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = first;
                      } else {
                        workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                        currentFallbackChild.nextEffect = null;
                      }
                      currentFallbackChild.effectTag = Deletion;
                    }
                  }
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.effectTag |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.effectTag |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.effectTag |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderExpirationTime2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.effectTag |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.effectTag |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                      workInProgress2.effectTag |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      var nextPriority = renderExpirationTime2 - 1;
                      workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                      {
                        markSpawnedWork(nextPriority);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  if (renderState.tailExpiration === 0) {
                    var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                    renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS;
                  }
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderExpirationTime2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var effectTag = workInProgress2.effectTag;
                if (effectTag & ShouldCapture) {
                  workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                var _effectTag = workInProgress2.effectTag;
                if (!((_effectTag & DidCapture) === NoEffect)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _effectTag2 = workInProgress2.effectTag;
                if (_effectTag2 & ShouldCapture) {
                  workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value: value,
              source: source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function logCapturedError(capturedError) {
            var error2 = capturedError.error;
            {
              var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
              if (error2 != null && error2._suppressLogging) {
                if (errorBoundaryFound && willRetry) {
                  return;
                }
                console["error"](error2);
              }
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (errorBoundaryFound && errorBoundaryName) {
                if (willRetry) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
                }
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          function logError(boundary, errorInfo) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            if (stack === null && source !== null) {
              stack = getStackByFiberInDevAndProd(source);
            }
            var capturedError = {
              componentName: source !== null ? getComponentName(source.type) : null,
              componentStack: stack !== null ? stack : "",
              error: errorInfo.value,
              errorBoundary: null,
              errorBoundaryName: null,
              errorBoundaryFound: false,
              willRetry: false
            };
            if (boundary !== null && boundary.tag === ClassComponent) {
              capturedError.errorBoundary = boundary.stateNode;
              capturedError.errorBoundaryName = getComponentName(boundary.type);
              capturedError.errorBoundaryFound = true;
              capturedError.willRetry = true;
            }
            try {
              logCapturedError(capturedError);
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            startPhaseTimer(current2, "componentWillUnmount");
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            instance.componentWillUnmount();
            stopPhaseTimer();
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.effectTag & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    stopPhaseTimer();
                  }
                }
                return;
              }
              case HostRoot:
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveHookEffects(finishedWork) {
            if ((finishedWork.effectTag & Passive) !== NoEffect) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                case Block: {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  break;
                }
              }
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update) {
                  if (current2 === null) {
                    startPhaseTimer(finishedWork, "componentDidMount");
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    instance.componentDidMount();
                    stopPhaseTimer();
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    startPhaseTimer(finishedWork, "componentDidUpdate");
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    stopPhaseTimer();
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.effectTag & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var onRender = finishedWork.memoizedProps.onRender;
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                  var fallbackChildFragment = node.child.sibling;
                  fallbackChildFragment.return = node;
                  node = fallbackChildFragment;
                  continue;
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    {
                      var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                      runWithPriority$1(priorityLevel, function() {
                        var effect = firstEffect;
                        do {
                          var _destroy = effect.destroy;
                          if (_destroy !== void 0) {
                            safelyCallDestroy(current2, _destroy);
                          }
                          effect = effect.next;
                        } while (effect !== firstEffect);
                      });
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiber(current2) {
            var alternate = current2.alternate;
            current2.return = null;
            current2.child = null;
            current2.memoizedState = null;
            current2.updateQueue = null;
            current2.dependencies = null;
            current2.alternate = null;
            current2.firstEffect = null;
            current2.lastEffect = null;
            current2.pendingProps = null;
            current2.memoizedProps = null;
            current2.stateNode = null;
            if (alternate !== null) {
              detachFiber(alternate);
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.effectTag & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.effectTag & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.effectTag & ContentReset) {
              resetTextContent(parent);
              parentFiber.effectTag &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node, renderPriorityLevel);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
            }
            detachFiber(current2);
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            var newDidTimeout;
            var primaryChildParent = finishedWork;
            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;
              markCommitTimeOfFallback();
            }
            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var thenables = finishedWork.updateQueue;
            if (thenables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              thenables.forEach(function(thenable) {
                var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
                if (!retryCache.has(thenable)) {
                  {
                    if (thenable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(thenable);
                  thenable.then(retry, retry);
                }
              });
            }
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
            var update = createUpdate(expirationTime, null);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
            var update = createUpdate(expirationTime, null);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (fiber.expirationTime !== Sync) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, renderExpirationTime2, thenable) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(thenable, threadIDs);
            } else {
              threadIDs = pingCache.get(thenable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(thenable, threadIDs);
              }
            }
            if (!threadIDs.has(renderExpirationTime2)) {
              threadIDs.add(renderExpirationTime2);
              var ping = pingSuspendedRoot.bind(null, root2, thenable, renderExpirationTime2);
              thenable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, renderExpirationTime2) {
            sourceFiber.effectTag |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var thenable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.expirationTime = currentSource.expirationTime;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var thenables = _workInProgress.updateQueue;
                  if (thenables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(thenable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    thenables.add(thenable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.effectTag |= DidCapture;
                    sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(Sync, null);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.expirationTime = Sync;
                    return;
                  }
                  attachPingListener(root2, renderExpirationTime2, thenable);
                  _workInProgress.effectTag |= ShouldCapture;
                  _workInProgress.expirationTime = renderExpirationTime2;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.effectTag |= ShouldCapture;
                    workInProgress2.expirationTime = renderExpirationTime2;
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var renderExpirationTime$1 = NoWork;
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootLatestProcessedExpirationTime = Sync;
          var workInProgressRootLatestSuspenseTimeout = Sync;
          var workInProgressRootCanSuspendUsingConfig = null;
          var workInProgressRootNextUnprocessedUpdateTime = NoWork;
          var workInProgressRootHasPendingPing = false;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority;
          var pendingPassiveEffectsExpirationTime = NoWork;
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var interruptedBy = null;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoWork;
          function requestCurrentTimeForUpdate() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return msToExpirationTime(now());
            }
            if (currentEventTime !== NoWork) {
              return currentEventTime;
            }
            currentEventTime = msToExpirationTime(now());
            return currentEventTime;
          }
          function getCurrentTime() {
            return msToExpirationTime(now());
          }
          function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return Sync;
            }
            var priorityLevel = getCurrentPriorityLevel();
            if ((mode & ConcurrentMode) === NoMode) {
              return priorityLevel === ImmediatePriority ? Sync : Batched;
            }
            if ((executionContext & RenderContext) !== NoContext) {
              return renderExpirationTime$1;
            }
            var expirationTime;
            if (suspenseConfig !== null) {
              expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
            } else {
              switch (priorityLevel) {
                case ImmediatePriority:
                  expirationTime = Sync;
                  break;
                case UserBlockingPriority$1:
                  expirationTime = computeInteractiveExpiration(currentTime);
                  break;
                case NormalPriority:
                case LowPriority:
                  expirationTime = computeAsyncExpiration(currentTime);
                  break;
                case IdlePriority:
                  expirationTime = Idle;
                  break;
                default: {
                  {
                    throw Error("Expected a valid priority level");
                  }
                }
              }
            }
            if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
              expirationTime -= 1;
            }
            return expirationTime;
          }
          function scheduleUpdateOnFiber(fiber, expirationTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return;
            }
            checkForInterruption(fiber, expirationTime);
            recordScheduleUpdate();
            var priorityLevel = getCurrentPriorityLevel();
            if (expirationTime === Sync) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, expirationTime);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2);
                schedulePendingInteractions(root2, expirationTime);
                if (executionContext === NoContext) {
                  flushSyncCallbackQueue();
                }
              }
            } else {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, expirationTime);
            }
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Map([[root2, expirationTime]]);
              } else {
                var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root2);
                if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                  rootsWithPendingDiscreteUpdates.set(root2, expirationTime);
                }
              }
            }
          }
          var scheduleWork = scheduleUpdateOnFiber;
          function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
            if (fiber.expirationTime < expirationTime) {
              fiber.expirationTime = expirationTime;
            }
            var alternate = fiber.alternate;
            if (alternate !== null && alternate.expirationTime < expirationTime) {
              alternate.expirationTime = expirationTime;
            }
            var node = fiber.return;
            var root2 = null;
            if (node === null && fiber.tag === HostRoot) {
              root2 = fiber.stateNode;
            } else {
              while (node !== null) {
                alternate = node.alternate;
                if (node.childExpirationTime < expirationTime) {
                  node.childExpirationTime = expirationTime;
                  if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                    alternate.childExpirationTime = expirationTime;
                  }
                } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
                if (node.return === null && node.tag === HostRoot) {
                  root2 = node.stateNode;
                  break;
                }
                node = node.return;
              }
            }
            if (root2 !== null) {
              if (workInProgressRoot === root2) {
                markUnprocessedUpdateTime(expirationTime);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspendedAtTime(root2, renderExpirationTime$1);
                }
              }
              markRootUpdatedAtTime(root2, expirationTime);
            }
            return root2;
          }
          function getNextRootExpirationTimeToWorkOn(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime !== NoWork) {
              return lastExpiredTime;
            }
            var firstPendingTime = root2.firstPendingTime;
            if (!isRootSuspendedAtTime(root2, firstPendingTime)) {
              return firstPendingTime;
            }
            var lastPingedTime = root2.lastPingedTime;
            var nextKnownPendingLevel = root2.nextKnownPendingLevel;
            var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
            if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
              return NoWork;
            }
            return nextLevel;
          }
          function ensureRootIsScheduled(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime !== NoWork) {
              root2.callbackExpirationTime = Sync;
              root2.callbackPriority = ImmediatePriority;
              root2.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              return;
            }
            var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
            var existingCallbackNode = root2.callbackNode;
            if (expirationTime === NoWork) {
              if (existingCallbackNode !== null) {
                root2.callbackNode = null;
                root2.callbackExpirationTime = NoWork;
                root2.callbackPriority = NoPriority;
              }
              return;
            }
            var currentTime = requestCurrentTimeForUpdate();
            var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              var existingCallbackExpirationTime = root2.callbackExpirationTime;
              if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            root2.callbackExpirationTime = expirationTime;
            root2.callbackPriority = priorityLevel;
            var callbackNode;
            if (expirationTime === Sync) {
              callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root2), {
                timeout: expirationTimeToMs(expirationTime) - now()
              });
            }
            root2.callbackNode = callbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            currentEventTime = NoWork;
            if (didTimeout) {
              var currentTime = requestCurrentTimeForUpdate();
              markRootExpiredAtTime(root2, currentTime);
              ensureRootIsScheduled(root2);
              return null;
            }
            var expirationTime = getNextRootExpirationTimeToWorkOn(root2);
            if (expirationTime !== NoWork) {
              var originalCallbackNode = root2.callbackNode;
              if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
                {
                  throw Error("Should not already be working.");
                }
              }
              flushPassiveEffects();
              if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
                prepareFreshStack(root2, expirationTime);
                startWorkOnPendingInteractions(root2, expirationTime);
              }
              if (workInProgress !== null) {
                var prevExecutionContext = executionContext;
                executionContext |= RenderContext;
                var prevDispatcher = pushDispatcher();
                var prevInteractions = pushInteractions(root2);
                startWorkLoopTimer(workInProgress);
                do {
                  try {
                    workLoopConcurrent();
                    break;
                  } catch (thrownValue) {
                    handleError(root2, thrownValue);
                  }
                } while (true);
                resetContextDependencies();
                executionContext = prevExecutionContext;
                popDispatcher(prevDispatcher);
                {
                  popInteractions(prevInteractions);
                }
                if (workInProgressRootExitStatus === RootFatalErrored) {
                  var fatalError = workInProgressRootFatalError;
                  stopInterruptedWorkLoopTimer();
                  prepareFreshStack(root2, expirationTime);
                  markRootSuspendedAtTime(root2, expirationTime);
                  ensureRootIsScheduled(root2);
                  throw fatalError;
                }
                if (workInProgress !== null) {
                  stopInterruptedWorkLoopTimer();
                } else {
                  stopFinishedWorkLoopTimer();
                  var finishedWork = root2.finishedWork = root2.current.alternate;
                  root2.finishedExpirationTime = expirationTime;
                  finishConcurrentRender(root2, finishedWork, workInProgressRootExitStatus, expirationTime);
                }
                ensureRootIsScheduled(root2);
                if (root2.callbackNode === originalCallbackNode) {
                  return performConcurrentWorkOnRoot.bind(null, root2);
                }
              }
            }
            return null;
          }
          function finishConcurrentRender(root2, finishedWork, exitStatus, expirationTime) {
            workInProgressRoot = null;
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                markRootExpiredAtTime(root2, expirationTime > Idle ? Idle : expirationTime);
                break;
              }
              case RootSuspended: {
                markRootSuspendedAtTime(root2, expirationTime);
                var lastSuspendedTime = root2.lastSuspendedTime;
                if (expirationTime === lastSuspendedTime) {
                  root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                }
                var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
                if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    if (workInProgressRootHasPendingPing) {
                      var lastPingedTime = root2.lastPingedTime;
                      if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                        root2.lastPingedTime = expirationTime;
                        prepareFreshStack(root2, expirationTime);
                        break;
                      }
                    }
                    var nextTime = getNextRootExpirationTimeToWorkOn(root2);
                    if (nextTime !== NoWork && nextTime !== expirationTime) {
                      break;
                    }
                    if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                      root2.lastPingedTime = lastSuspendedTime;
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspendedAtTime(root2, expirationTime);
                var _lastSuspendedTime = root2.lastSuspendedTime;
                if (expirationTime === _lastSuspendedTime) {
                  root2.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
                }
                if (!IsThisRendererActing.current) {
                  if (workInProgressRootHasPendingPing) {
                    var _lastPingedTime = root2.lastPingedTime;
                    if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                      root2.lastPingedTime = expirationTime;
                      prepareFreshStack(root2, expirationTime);
                      break;
                    }
                  }
                  var _nextTime = getNextRootExpirationTimeToWorkOn(root2);
                  if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                    break;
                  }
                  if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                    root2.lastPingedTime = _lastSuspendedTime;
                    break;
                  }
                  var _msUntilTimeout;
                  if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                    _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
                  } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                    _msUntilTimeout = 0;
                  } else {
                    var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                    var currentTimeMs = now();
                    var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                    var timeElapsed = currentTimeMs - eventTimeMs;
                    if (timeElapsed < 0) {
                      timeElapsed = 0;
                    }
                    _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                    if (timeUntilExpirationMs < _msUntilTimeout) {
                      _msUntilTimeout = timeUntilExpirationMs;
                    }
                  }
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                  var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                  if (_msUntilTimeout2 > 10) {
                    markRootSuspendedAtTime(root2, expirationTime);
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout2);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function performSyncWorkOnRoot(root2) {
            var lastExpiredTime = root2.lastExpiredTime;
            var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root2 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root2, expirationTime);
              startWorkOnPendingInteractions(root2, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root2);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopSync();
                  break;
                } catch (thrownValue) {
                  handleError(root2, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root2, expirationTime);
                markRootSuspendedAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
                throw fatalError;
              }
              if (workInProgress !== null) {
                {
                  {
                    throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
              } else {
                stopFinishedWorkLoopTimer();
                root2.finishedWork = root2.current.alternate;
                root2.finishedExpirationTime = expirationTime;
                finishSyncRender(root2);
              }
              ensureRootIsScheduled(root2);
            }
            return null;
          }
          function finishSyncRender(root2) {
            workInProgressRoot = null;
            commitRoot(root2);
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function syncUpdates(fn, a, b, c) {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(expirationTime, root2) {
                markRootExpiredAtTime(root2, expirationTime);
                ensureRootIsScheduled(root2);
              });
              flushSyncCallbackQueue();
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            try {
              return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                {
                  throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
                }
              }
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
          function prepareFreshStack(root2, expirationTime) {
            root2.finishedWork = null;
            root2.finishedExpirationTime = NoWork;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            renderExpirationTime$1 = expirationTime;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootLatestProcessedExpirationTime = Sync;
            workInProgressRootLatestSuspenseTimeout = Sync;
            workInProgressRootCanSuspendUsingConfig = null;
            workInProgressRootNextUnprocessedUpdateTime = NoWork;
            workInProgressRootHasPendingPing = false;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                if (workInProgress === null || workInProgress.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return null;
                }
                if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
                }
                throwException(root2, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
                workInProgress = completeUnitOfWork(workInProgress);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher(root2) {
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
            if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
              workInProgressRootLatestProcessedExpirationTime = expirationTime;
            }
            if (suspenseConfig !== null) {
              if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
                workInProgressRootLatestSuspenseTimeout = expirationTime;
                workInProgressRootCanSuspendUsingConfig = suspenseConfig;
              }
            }
          }
          function markUnprocessedUpdateTime(expirationTime) {
            if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
              workInProgressRootNextUnprocessedUpdateTime = expirationTime;
            }
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
              markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
              markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function inferTimeFromExpirationTime(expirationTime) {
            var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
            return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
          }
          function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
            var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
            return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              workInProgress = performUnitOfWork(workInProgress);
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              workInProgress = performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            startWorkTimer(unitOfWork);
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              next = completeUnitOfWork(unitOfWork);
            }
            ReactCurrentOwner$2.current = null;
            return next;
          }
          function completeUnitOfWork(unitOfWork) {
            workInProgress = unitOfWork;
            do {
              var current2 = workInProgress.alternate;
              var returnFiber = workInProgress.return;
              if ((workInProgress.effectTag & Incomplete) === NoEffect) {
                setCurrentFiber(workInProgress);
                var next = void 0;
                if ((workInProgress.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, workInProgress, renderExpirationTime$1);
                } else {
                  startProfilerTimer(workInProgress);
                  next = completeWork(current2, workInProgress, renderExpirationTime$1);
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                }
                stopWorkTimer(workInProgress);
                resetCurrentFiber();
                resetChildExpirationTime(workInProgress);
                if (next !== null) {
                  return next;
                }
                if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = workInProgress.firstEffect;
                  }
                  if (workInProgress.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                    }
                    returnFiber.lastEffect = workInProgress.lastEffect;
                  }
                  var effectTag = workInProgress.effectTag;
                  if (effectTag > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = workInProgress;
                    } else {
                      returnFiber.firstEffect = workInProgress;
                    }
                    returnFiber.lastEffect = workInProgress;
                  }
                }
              } else {
                var _next = unwindWork(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                  var actualDuration = workInProgress.actualDuration;
                  var child = workInProgress.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  workInProgress.actualDuration = actualDuration;
                }
                if (_next !== null) {
                  stopFailedWorkTimer(workInProgress);
                  _next.effectTag &= HostEffectMask;
                  return _next;
                }
                stopWorkTimer(workInProgress);
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.effectTag |= Incomplete;
                }
              }
              var siblingFiber = workInProgress.sibling;
              if (siblingFiber !== null) {
                return siblingFiber;
              }
              workInProgress = returnFiber;
            } while (workInProgress !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
            return null;
          }
          function getRemainingExpirationTime(fiber) {
            var updateExpirationTime = fiber.expirationTime;
            var childExpirationTime = fiber.childExpirationTime;
            return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
          }
          function resetChildExpirationTime(completedWork) {
            if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
              return;
            }
            var newChildExpirationTime = NoWork;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                var childUpdateExpirationTime = child.expirationTime;
                var childChildExpirationTime = child.childExpirationTime;
                if (childUpdateExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = childUpdateExpirationTime;
                }
                if (childChildExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = childChildExpirationTime;
                }
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                var _childUpdateExpirationTime = _child.expirationTime;
                var _childChildExpirationTime = _child.childExpirationTime;
                if (_childUpdateExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = _childUpdateExpirationTime;
                }
                if (_childChildExpirationTime > newChildExpirationTime) {
                  newChildExpirationTime = _childChildExpirationTime;
                }
                _child = _child.sibling;
              }
            }
            completedWork.childExpirationTime = newChildExpirationTime;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var expirationTime = root2.finishedExpirationTime;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedExpirationTime = NoWork;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            root2.callbackExpirationTime = NoWork;
            root2.callbackPriority = NoPriority;
            root2.nextKnownPendingLevel = NoWork;
            startCommitTimer();
            var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
            markRootFinishedAtTime(root2, expirationTime, remainingExpirationTimeBeforeCommit);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              renderExpirationTime$1 = NoWork;
            }
            var firstEffect;
            if (finishedWork.effectTag > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              startCommitSnapshotEffectsTimer();
              prepareForCommit(root2.containerInfo);
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitSnapshotEffectsTimer();
              {
                recordCommitTime();
              }
              startCommitHostEffectsTimer();
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitHostEffectsTimer();
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              startCommitLifeCyclesTimer();
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, expirationTime);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              stopCommitLifeCyclesTimer();
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              startCommitSnapshotEffectsTimer();
              stopCommitSnapshotEffectsTimer();
              {
                recordCommitTime();
              }
              startCommitHostEffectsTimer();
              stopCommitHostEffectsTimer();
              startCommitLifeCyclesTimer();
              stopCommitLifeCyclesTimer();
            }
            stopCommitTimer();
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsExpirationTime = expirationTime;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                nextEffect = nextNextEffect;
              }
            }
            var remainingExpirationTime = root2.firstPendingTime;
            if (remainingExpirationTime !== NoWork) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingExpirationTime);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, expirationTime);
              }
            }
            if (remainingExpirationTime === Sync) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, expirationTime);
            ensureRootIsScheduled(root2);
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var effectTag = nextEffect.effectTag;
              if ((effectTag & Snapshot) !== NoEffect) {
                setCurrentFiber(nextEffect);
                recordEffect();
                var current2 = nextEffect.alternate;
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((effectTag & Passive) !== NoEffect) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var effectTag = nextEffect.effectTag;
              if (effectTag & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (effectTag & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
              switch (primaryEffectTag) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.effectTag &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.effectTag &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.effectTag &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect, renderPriorityLevel);
                  break;
                }
              }
              recordEffect();
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedExpirationTime) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var effectTag = nextEffect.effectTag;
              if (effectTag & (Update | Callback)) {
                recordEffect();
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              if (effectTag & Ref) {
                recordEffect();
                commitAttachRef(nextEffect);
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority;
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var expirationTime = pendingPassiveEffectsExpirationTime;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsExpirationTime = NoWork;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            {
              var _effect2 = root2.current.firstEffect;
              while (_effect2 !== null) {
                {
                  setCurrentFiber(_effect2);
                  invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                  if (hasCaughtError()) {
                    if (!(_effect2 !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error5 = clearCaughtError();
                    captureCommitPhaseError(_effect2, _error5);
                  }
                  resetCurrentFiber();
                }
                var nextNextEffect = _effect2.nextEffect;
                _effect2.nextEffect = null;
                _effect2 = nextNextEffect;
              }
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, expirationTime);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
            enqueueUpdate(rootFiber, update);
            var root2 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
            if (root2 !== null) {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, Sync);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, Sync);
                  enqueueUpdate(fiber, update);
                  var root2 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                  if (root2 !== null) {
                    ensureRootIsScheduled(root2);
                    schedulePendingInteractions(root2, Sync);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, thenable, suspendedTime) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(thenable);
            }
            if (workInProgressRoot === root2 && renderExpirationTime$1 === suspendedTime) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, renderExpirationTime$1);
              } else {
                workInProgressRootHasPendingPing = true;
              }
              return;
            }
            if (!isRootSuspendedAtTime(root2, suspendedTime)) {
              return;
            }
            var lastPingedTime = root2.lastPingedTime;
            if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
              return;
            }
            root2.lastPingedTime = suspendedTime;
            ensureRootIsScheduled(root2);
            schedulePendingInteractions(root2, suspendedTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryTime) {
            if (retryTime === NoWork) {
              var suspenseConfig = null;
              var currentTime = requestCurrentTimeForUpdate();
              retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
            }
            var root2 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
            if (root2 !== null) {
              ensureRootIsScheduled(root2);
              schedulePendingInteractions(root2, retryTime);
            }
          }
          function resolveRetryThenable(boundaryFiber, thenable) {
            var retryTime = NoWork;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(thenable);
            }
            retryTimedOutBoundary(boundaryFiber, retryTime);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
            var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
            if (busyMinDurationMs <= 0) {
              return 0;
            }
            var busyDelayMs = suspenseConfig.busyDelayMs | 0;
            var currentTimeMs = now();
            var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
            var timeElapsed = currentTimeMs - eventTimeMs;
            if (timeElapsed <= busyDelayMs) {
              return 0;
            }
            var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
            return msUntilTimeout;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function stopFinishedWorkLoopTimer() {
            var didCompleteRoot = true;
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
          }
          function stopInterruptedWorkLoopTimer() {
            var didCompleteRoot = false;
            stopWorkLoopTimer(interruptedBy, didCompleteRoot);
            interruptedBy = null;
          }
          function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
            if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
              interruptedBy = fiberThatReceivedUpdate;
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, expirationTime) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, expirationTime);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://fb.me/react-mock-scheduler");
                }
              }
            }
          }
          function computeThreadID(root2, expirationTime) {
            return expirationTime * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(expirationTime) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [expirationTime];
            } else {
              spawnedWorkDuringRender.push(expirationTime);
            }
          }
          function scheduleInteractions(root2, expirationTime, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(expirationTime);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(expirationTime, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, expirationTime) {
            scheduleInteractions(root2, expirationTime, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, expirationTime) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime >= expirationTime) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, expirationTime);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedExpirationTime) {
            var earliestRemainingTimeAfterCommit = root2.firstPendingTime;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedExpirationTime);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
                if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                  pendingInteractionMap.delete(scheduledExpirationTime);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          var onScheduleFiberRoot = null;
          var onCommitFiberRoot = null;
          var onCommitFiberUnmount = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
              }
              return true;
            }
            try {
              var rendererID = hook.inject(internals);
              if (true) {
                if (typeof hook.onScheduleFiberRoot === "function") {
                  onScheduleFiberRoot = function(root2, children) {
                    try {
                      hook.onScheduleFiberRoot(rendererID, root2, children);
                    } catch (err) {
                      if (!hasLoggedError) {
                        hasLoggedError = true;
                        error("React instrumentation encountered an error: %s", err);
                      }
                    }
                  };
                }
              }
              onCommitFiberRoot = function(root2, expirationTime) {
                try {
                  var didError = (root2.current.effectTag & DidCapture) === DidCapture;
                  if (enableProfilerTimer) {
                    var currentTime = getCurrentTime();
                    var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                    hook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                  } else {
                    hook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                  }
                } catch (err) {
                  if (true) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              };
              onCommitFiberUnmount = function(fiber) {
                try {
                  hook.onCommitFiberUnmount(rendererID, fiber);
                } catch (err) {
                  if (true) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              };
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            if (typeof onScheduleFiberRoot === "function") {
              onScheduleFiberRoot(root2, children);
            }
          }
          function onCommitRoot(root2, expirationTime) {
            if (typeof onCommitFiberRoot === "function") {
              onCommitFiberRoot(root2, expirationTime);
            }
          }
          function onCommitUnmount(fiber) {
            if (typeof onCommitFiberUnmount === "function") {
              onCommitFiberUnmount(fiber);
            }
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              var testMap = /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              var testSet = /* @__PURE__ */ new Set([nonExtensibleObject]);
              testMap.set(0, 0);
              testSet.add(0);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.effectTag = NoEffect;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.expirationTime = NoWork;
            this.childExpirationTime = NoWork;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugIsCurrentlyTiming = false;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                {
                  workInProgress2._debugID = current2._debugID;
                }
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.effectTag = NoEffect;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
            workInProgress2.effectTag &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childExpirationTime = NoWork;
              workInProgress2.expirationTime = renderExpirationTime2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childExpirationTime = current2.childExpirationTime;
              workInProgress2.expirationTime = current2.expirationTime;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                expirationTime: currentDependencies.expirationTime,
                firstContext: currentDependencies.firstContext,
                responders: currentDependencies.responders
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
            var fiber;
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                  case REACT_CONCURRENT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= ConcurrentMode | BlockingMode | StrictMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromElement(element, mode, expirationTime) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, expirationTime, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
            {
              if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
                error('Profiler must specify an "id" string and "onRender" function as props');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromText(content, mode, expirationTime) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.expirationTime = expirationTime;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, expirationTime) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.expirationTime = expirationTime;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.effectTag = source.effectTag;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.expirationTime = source.expirationTime;
            target.childExpirationTime = source.childExpirationTime;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            {
              target._debugID = source._debugID;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.current = null;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.pingCache = null;
            this.finishedExpirationTime = NoWork;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoPriority;
            this.firstPendingTime = NoWork;
            this.firstSuspendedTime = NoWork;
            this.lastSuspendedTime = NoWork;
            this.nextKnownPendingLevel = NoWork;
            this.lastPingedTime = NoWork;
            this.lastExpiredTime = NoWork;
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function isRootSuspendedAtTime(root2, expirationTime) {
            var firstSuspendedTime = root2.firstSuspendedTime;
            var lastSuspendedTime = root2.lastSuspendedTime;
            return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
          }
          function markRootSuspendedAtTime(root2, expirationTime) {
            var firstSuspendedTime = root2.firstSuspendedTime;
            var lastSuspendedTime = root2.lastSuspendedTime;
            if (firstSuspendedTime < expirationTime) {
              root2.firstSuspendedTime = expirationTime;
            }
            if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
              root2.lastSuspendedTime = expirationTime;
            }
            if (expirationTime <= root2.lastPingedTime) {
              root2.lastPingedTime = NoWork;
            }
            if (expirationTime <= root2.lastExpiredTime) {
              root2.lastExpiredTime = NoWork;
            }
          }
          function markRootUpdatedAtTime(root2, expirationTime) {
            var firstPendingTime = root2.firstPendingTime;
            if (expirationTime > firstPendingTime) {
              root2.firstPendingTime = expirationTime;
            }
            var firstSuspendedTime = root2.firstSuspendedTime;
            if (firstSuspendedTime !== NoWork) {
              if (expirationTime >= firstSuspendedTime) {
                root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
              } else if (expirationTime >= root2.lastSuspendedTime) {
                root2.lastSuspendedTime = expirationTime + 1;
              }
              if (expirationTime > root2.nextKnownPendingLevel) {
                root2.nextKnownPendingLevel = expirationTime;
              }
            }
          }
          function markRootFinishedAtTime(root2, finishedExpirationTime, remainingExpirationTime) {
            root2.firstPendingTime = remainingExpirationTime;
            if (finishedExpirationTime <= root2.lastSuspendedTime) {
              root2.firstSuspendedTime = root2.lastSuspendedTime = root2.nextKnownPendingLevel = NoWork;
            } else if (finishedExpirationTime <= root2.firstSuspendedTime) {
              root2.firstSuspendedTime = finishedExpirationTime - 1;
            }
            if (finishedExpirationTime <= root2.lastPingedTime) {
              root2.lastPingedTime = NoWork;
            }
            if (finishedExpirationTime <= root2.lastExpiredTime) {
              root2.lastExpiredTime = NoWork;
            }
          }
          function markRootExpiredAtTime(root2, expirationTime) {
            var lastExpiredTime = root2.lastExpiredTime;
            if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
              root2.lastExpiredTime = expirationTime;
            }
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var currentTime = requestCurrentTimeForUpdate();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = {
              element: element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleWork(current$1, expirationTime);
            return expirationTime;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryTimeImpl(fiber, retryTime) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (suspenseState.retryTime < retryTime) {
                suspenseState.retryTime = retryTime;
              }
            }
          }
          function markRetryTimeIfNotHydrated(fiber, retryTime) {
            markRetryTimeImpl(fiber, retryTime);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryTimeImpl(alternate, retryTime);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
            scheduleWork(fiber, expTime);
            markRetryTimeIfNotHydrated(fiber, expTime);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            scheduleWork(fiber, ContinuousHydration);
            markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var currentTime = requestCurrentTimeForUpdate();
            var expTime = computeExpirationForFiber(currentTime, fiber, null);
            scheduleWork(fiber, expTime);
            markRetryTimeIfNotHydrated(fiber, expTime);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideProps = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithSetImpl = function(obj, path, idx, value) {
              if (idx >= path.length) {
                return value;
              }
              var key = path[idx];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            overrideHookState = function(fiber, id, path, value) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              if (currentHook2 !== null) {
                var newState = copyWithSet(currentHook2.memoizedState, path, value);
                currentHook2.memoizedState = newState;
                currentHook2.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleWork(fiber, Sync);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleWork(fiber, Sync);
            };
            scheduleUpdate = function(fiber) {
              scheduleWork(fiber, Sync);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals(_assign({}, devToolsConfig, {
              overrideHookState: overrideHookState,
              overrideProps: overrideProps,
              setSuspenseHandler: setSuspenseHandler,
              scheduleUpdate: scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber: function(fiber) {
                var hostFiber = findCurrentHostFiber(fiber);
                if (hostFiber === null) {
                  return null;
                }
                return hostFiber.stateNode;
              },
              findFiberByHostInstance: function(instance) {
                if (!findFiberByHostInstance) {
                  return null;
                }
                return findFiberByHostInstance(instance);
              },
              findHostInstancesForRefresh: findHostInstancesForRefresh,
              scheduleRefresh: scheduleRefresh,
              scheduleRoot: scheduleRoot,
              setRefreshHandler: setRefreshHandler,
              getCurrentFiber: function() {
                return current;
              }
            }));
          }
          var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
          function ReactDOMRoot(container, options) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
          }
          function ReactDOMBlockingRoot(container, tag, options) {
            this._internalRoot = createRootImpl(container, tag, options);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options) {
            var hydrate2 = options != null && options.hydrate === true;
            var hydrationCallbacks = options != null && options.hydrationOptions || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            if (hydrate2 && tag !== LegacyRoot) {
              var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
              eagerlyTrapReplayableEvents(container, doc);
            }
            return root2;
          }
          function createLegacyRoot(container, options) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children,
              containerInfo: containerInfo,
              implementation: implementation
            };
          }
          var ReactVersion = "16.14.0";
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js": function(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-redux/lib/utils/reactBatchedUpdates.js
  var require_reactBatchedUpdates = __commonJS({
    "node_modules/react-redux/lib/utils/reactBatchedUpdates.js": function(exports) {
      "use strict";
      exports.__esModule = true;
      exports.unstable_batchedUpdates = void 0;
      var _reactDom2 = require_react_dom();
      exports.unstable_batchedUpdates = _reactDom2.unstable_batchedUpdates;
    }
  });

  // node_modules/react-redux/lib/index.js
  var require_lib = __commonJS({
    "node_modules/react-redux/lib/index.js": function(exports) {
      "use strict";
      var _interopRequireDefault2 = require_interopRequireDefault2();
      exports.__esModule = true;
      var _Provider = _interopRequireDefault2(require_Provider());
      exports.Provider = _Provider["default"];
      var _connectAdvanced = _interopRequireDefault2(require_connectAdvanced());
      exports.connectAdvanced = _connectAdvanced["default"];
      var _Context = require_Context();
      exports.ReactReduxContext = _Context.ReactReduxContext;
      var _connect = _interopRequireDefault2(require_connect());
      exports.connect = _connect["default"];
      var _useDispatch = require_useDispatch();
      exports.useDispatch = _useDispatch.useDispatch;
      exports.createDispatchHook = _useDispatch.createDispatchHook;
      var _useSelector = require_useSelector();
      exports.useSelector = _useSelector.useSelector;
      exports.createSelectorHook = _useSelector.createSelectorHook;
      var _useStore = require_useStore();
      exports.useStore = _useStore.useStore;
      exports.createStoreHook = _useStore.createStoreHook;
      var _batch = require_batch();
      var _reactBatchedUpdates = require_reactBatchedUpdates();
      exports.batch = _reactBatchedUpdates.unstable_batchedUpdates;
      var _shallowEqual = _interopRequireDefault2(require_shallowEqual());
      exports.shallowEqual = _shallowEqual["default"];
      (0, _batch.setBatch)(_reactBatchedUpdates.unstable_batchedUpdates);
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
  var require_define_property7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js": function(exports, module) {
      module.exports = require_define_property2();
    }
  });

  // node_modules/core-js-pure/modules/es.array.is-array.js
  var require_es_array_is_array = __commonJS({
    "node_modules/core-js-pure/modules/es.array.is-array.js": function() {
      var $ = require_export();
      var isArray = require_is_array();
      $({ target: "Array", stat: true }, {
        isArray: isArray
      });
    }
  });

  // node_modules/core-js-pure/es/array/is-array.js
  var require_is_array2 = __commonJS({
    "node_modules/core-js-pure/es/array/is-array.js": function(exports, module) {
      require_es_array_is_array();
      var path = require_path();
      module.exports = path.Array.isArray;
    }
  });

  // node_modules/core-js-pure/stable/array/is-array.js
  var require_is_array3 = __commonJS({
    "node_modules/core-js-pure/stable/array/is-array.js": function(exports, module) {
      var parent = require_is_array2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/array/is-array.js
  var require_is_array4 = __commonJS({
    "node_modules/core-js-pure/actual/array/is-array.js": function(exports, module) {
      var parent = require_is_array3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/array/is-array.js
  var require_is_array5 = __commonJS({
    "node_modules/core-js-pure/full/array/is-array.js": function(exports, module) {
      var parent = require_is_array4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/array/is-array.js
  var require_is_array6 = __commonJS({
    "node_modules/core-js-pure/features/array/is-array.js": function(exports, module) {
      module.exports = require_is_array5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/array/is-array.js
  var require_is_array7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/array/is-array.js": function(exports, module) {
      module.exports = require_is_array6();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
  var require_arrayWithHoles = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js": function(exports, module) {
      var _Array$isArray = require_is_array7();
      function _arrayWithHoles(arr) {
        if (_Array$isArray(arr))
          return arr;
      }
      module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/es/get-iterator-method.js
  var require_get_iterator_method3 = __commonJS({
    "node_modules/core-js-pure/es/get-iterator-method.js": function(exports, module) {
      require_es_array_iterator();
      require_es_string_iterator();
      var getIteratorMethod = require_get_iterator_method();
      module.exports = getIteratorMethod;
    }
  });

  // node_modules/core-js-pure/stable/get-iterator-method.js
  var require_get_iterator_method4 = __commonJS({
    "node_modules/core-js-pure/stable/get-iterator-method.js": function(exports, module) {
      var parent = require_get_iterator_method3();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/get-iterator-method.js
  var require_get_iterator_method5 = __commonJS({
    "node_modules/core-js-pure/actual/get-iterator-method.js": function(exports, module) {
      var parent = require_get_iterator_method4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/get-iterator-method.js
  var require_get_iterator_method6 = __commonJS({
    "node_modules/core-js-pure/full/get-iterator-method.js": function(exports, module) {
      var parent = require_get_iterator_method5();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/get-iterator-method.js
  var require_get_iterator_method7 = __commonJS({
    "node_modules/core-js-pure/features/get-iterator-method.js": function(exports, module) {
      module.exports = require_get_iterator_method6();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
  var require_get_iterator_method8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js": function(exports, module) {
      module.exports = require_get_iterator_method7();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
  var require_iterableToArrayLimit = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js": function(exports, module) {
      var _Symbol = require_symbol6();
      var _getIteratorMethod = require_get_iterator_method8();
      function _iterableToArrayLimit(arr, i) {
        var _i = arr == null ? null : typeof _Symbol != "undefined" && _getIteratorMethod(arr) || arr["@@iterator"];
        if (_i != null) {
          var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
          try {
            if (_x = (_i = _i.call(arr)).next, i === 0) {
              if (Object(_i) !== _i)
                return;
              _n = false;
            } else
              for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true) {
                ;
              }
          } catch (err) {
            _d = true, _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null && (_r = _i["return"](), Object(_r) !== _r))
                return;
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
      }
      module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/modules/es.array.slice.js
  var require_es_array_slice = __commonJS({
    "node_modules/core-js-pure/modules/es.array.slice.js": function() {
      "use strict";
      var $ = require_export();
      var isArray = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject = require_is_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIndexedObject = require_to_indexed_object();
      var createProperty = require_create_property();
      var wellKnownSymbol = require_well_known_symbol();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var nativeSlice = require_array_slice();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
      var SPECIES = wellKnownSymbol("species");
      var $Array = Array;
      var max = Math.max;
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = lengthOfArrayLike(O);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var Constructor, result, n;
          if (isArray(O)) {
            Constructor = O.constructor;
            if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
              Constructor = void 0;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null)
                Constructor = void 0;
            }
            if (Constructor === $Array || Constructor === void 0) {
              return nativeSlice(O, k, fin);
            }
          }
          result = new (Constructor === void 0 ? $Array : Constructor)(max(fin - k, 0));
          for (n = 0; k < fin; k++, n++)
            if (k in O)
              createProperty(result, n, O[k]);
          result.length = n;
          return result;
        }
      });
    }
  });

  // node_modules/core-js-pure/internals/entry-virtual.js
  var require_entry_virtual = __commonJS({
    "node_modules/core-js-pure/internals/entry-virtual.js": function(exports, module) {
      var path = require_path();
      module.exports = function(CONSTRUCTOR) {
        return path[CONSTRUCTOR + "Prototype"];
      };
    }
  });

  // node_modules/core-js-pure/es/array/virtual/slice.js
  var require_slice = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/slice.js": function(exports, module) {
      require_es_array_slice();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").slice;
    }
  });

  // node_modules/core-js-pure/es/instance/slice.js
  var require_slice2 = __commonJS({
    "node_modules/core-js-pure/es/instance/slice.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_slice();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.slice;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/slice.js
  var require_slice3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/slice.js": function(exports, module) {
      var parent = require_slice2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/instance/slice.js
  var require_slice4 = __commonJS({
    "node_modules/core-js-pure/actual/instance/slice.js": function(exports, module) {
      var parent = require_slice3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/instance/slice.js
  var require_slice5 = __commonJS({
    "node_modules/core-js-pure/full/instance/slice.js": function(exports, module) {
      var parent = require_slice4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/instance/slice.js
  var require_slice6 = __commonJS({
    "node_modules/core-js-pure/features/instance/slice.js": function(exports, module) {
      module.exports = require_slice5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/instance/slice.js
  var require_slice7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/instance/slice.js": function(exports, module) {
      module.exports = require_slice6();
    }
  });

  // node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
  var require_call_with_safe_iteration_closing = __commonJS({
    "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js": function(exports, module) {
      var anObject = require_an_object();
      var iteratorClose = require_iterator_close();
      module.exports = function(iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (error) {
          iteratorClose(iterator, "throw", error);
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/array-from.js
  var require_array_from = __commonJS({
    "node_modules/core-js-pure/internals/array-from.js": function(exports, module) {
      "use strict";
      var bind = require_function_bind_context();
      var call = require_function_call();
      var toObject = require_to_object();
      var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var isConstructor = require_is_constructor();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var $Array = Array;
      module.exports = function from(arrayLike) {
        var O = toObject(arrayLike);
        var IS_CONSTRUCTOR = isConstructor(this);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
        var mapping = mapfn !== void 0;
        if (mapping)
          mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = getIterator(O, iteratorMethod);
          next = iterator.next;
          result = IS_CONSTRUCTOR ? new this() : [];
          for (; !(step = call(next, iterator)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = lengthOfArrayLike(O);
          result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }
        result.length = index;
        return result;
      };
    }
  });

  // node_modules/core-js-pure/internals/check-correctness-of-iteration.js
  var require_check_correctness_of_iteration2 = __commonJS({
    "node_modules/core-js-pure/internals/check-correctness-of-iteration.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        called = 0;
        iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var called;
      var iteratorWithReturn;
      module.exports = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING)
          return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.array.from.js
  var require_es_array_from = __commonJS({
    "node_modules/core-js-pure/modules/es.array.from.js": function() {
      var $ = require_export();
      var from = require_array_from();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration2();
      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        Array.from(iterable);
      });
      $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
        from: from
      });
    }
  });

  // node_modules/core-js-pure/es/array/from.js
  var require_from = __commonJS({
    "node_modules/core-js-pure/es/array/from.js": function(exports, module) {
      require_es_string_iterator();
      require_es_array_from();
      var path = require_path();
      module.exports = path.Array.from;
    }
  });

  // node_modules/core-js-pure/stable/array/from.js
  var require_from2 = __commonJS({
    "node_modules/core-js-pure/stable/array/from.js": function(exports, module) {
      var parent = require_from();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/array/from.js
  var require_from3 = __commonJS({
    "node_modules/core-js-pure/actual/array/from.js": function(exports, module) {
      var parent = require_from2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/array/from.js
  var require_from4 = __commonJS({
    "node_modules/core-js-pure/full/array/from.js": function(exports, module) {
      var parent = require_from3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/array/from.js
  var require_from5 = __commonJS({
    "node_modules/core-js-pure/features/array/from.js": function(exports, module) {
      module.exports = require_from4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/array/from.js
  var require_from6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/array/from.js": function(exports, module) {
      module.exports = require_from5();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
  var require_arrayLikeToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js": function(exports, module) {
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
  var require_unsupportedIterableToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js": function(exports, module) {
      var _sliceInstanceProperty = require_slice7();
      var _Array$from = require_from6();
      var arrayLikeToArray = require_arrayLikeToArray();
      function _unsupportedIterableToArray(o, minLen) {
        var _context;
        if (!o)
          return;
        if (typeof o === "string")
          return arrayLikeToArray(o, minLen);
        var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return _Array$from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return arrayLikeToArray(o, minLen);
      }
      module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
  var require_nonIterableRest = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js": function(exports, module) {
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
  var require_slicedToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js": function(exports, module) {
      var arrayWithHoles = require_arrayWithHoles();
      var iterableToArrayLimit = require_iterableToArrayLimit();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableRest = require_nonIterableRest();
      function _slicedToArray(arr, i) {
        return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
      }
      module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@emotion/sheet/dist/sheet.browser.cjs.js
  var require_sheet_browser_cjs = __commonJS({
    "node_modules/@emotion/sheet/dist/sheet.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      }
      function createStyleElement(options) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", options.key);
        if (options.nonce !== void 0) {
          tag.setAttribute("nonce", options.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            var _tag = createStyleElement(this);
            var before;
            if (this.tags.length === 0) {
              before = this.before;
            } else {
              before = this.tags[this.tags.length - 1].nextSibling;
            }
            this.container.insertBefore(_tag, before);
            this.tags.push(_tag);
          }
          var tag = this.tags[this.tags.length - 1];
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64;
              sheet.insertRule(rule, isImportRule ? 0 : sheet.cssRules.length);
            } catch (e) {
              if (true) {
                console.warn('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
        };
        return StyleSheet2;
      }();
      exports.StyleSheet = StyleSheet;
    }
  });

  // node_modules/@emotion/stylis/dist/stylis.browser.cjs.js
  var require_stylis_browser_cjs = __commonJS({
    "node_modules/@emotion/stylis/dist/stylis.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function stylis_min(W) {
        function M(d, c, e, h, a) {
          for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B2 = e.length, J = B2 - 1, y, f = "", p = "", F2 = "", G2 = "", C; l < B2; ) {
            g = e.charCodeAt(l);
            l === J && b + n + v + m !== 0 && (b !== 0 && (g = b === 47 ? 10 : 47), n = v = m = 0, B2++, J++);
            if (b + n + v + m === 0) {
              if (l === J && (0 < r && (f = f.replace(N, "")), 0 < f.trim().length)) {
                switch (g) {
                  case 32:
                  case 9:
                  case 59:
                  case 13:
                  case 10:
                    break;
                  default:
                    f += e.charAt(l);
                }
                g = 59;
              }
              switch (g) {
                case 123:
                  f = f.trim();
                  q = f.charCodeAt(0);
                  k = 1;
                  for (t = ++l; l < B2; ) {
                    switch (g = e.charCodeAt(l)) {
                      case 123:
                        k++;
                        break;
                      case 125:
                        k--;
                        break;
                      case 47:
                        switch (g = e.charCodeAt(l + 1)) {
                          case 42:
                          case 47:
                            a: {
                              for (u = l + 1; u < J; ++u) {
                                switch (e.charCodeAt(u)) {
                                  case 47:
                                    if (g === 42 && e.charCodeAt(u - 1) === 42 && l + 2 !== u) {
                                      l = u + 1;
                                      break a;
                                    }
                                    break;
                                  case 10:
                                    if (g === 47) {
                                      l = u + 1;
                                      break a;
                                    }
                                }
                              }
                              l = u;
                            }
                        }
                        break;
                      case 91:
                        g++;
                      case 40:
                        g++;
                      case 34:
                      case 39:
                        for (; l++ < J && e.charCodeAt(l) !== g; ) {
                        }
                    }
                    if (k === 0)
                      break;
                    l++;
                  }
                  k = e.substring(t, l);
                  q === 0 && (q = (f = f.replace(ca, "").trim()).charCodeAt(0));
                  switch (q) {
                    case 64:
                      0 < r && (f = f.replace(N, ""));
                      g = f.charCodeAt(1);
                      switch (g) {
                        case 100:
                        case 109:
                        case 115:
                        case 45:
                          r = c;
                          break;
                        default:
                          r = O;
                      }
                      k = M(c, r, k, g, a + 1);
                      t = k.length;
                      0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(""), C !== void 0 && (t = (k = C.trim()).length) === 0 && (g = 0, k = ""));
                      if (0 < t)
                        switch (g) {
                          case 115:
                            f = f.replace(da, ea);
                          case 100:
                          case 109:
                          case 45:
                            k = f + "{" + k + "}";
                            break;
                          case 107:
                            f = f.replace(fa, "$1 $2");
                            k = f + "{" + k + "}";
                            k = w === 1 || w === 2 && L("@" + k, 3) ? "@-webkit-" + k + "@" + k : "@" + k;
                            break;
                          default:
                            k = f + k, h === 112 && (k = (p += k, ""));
                        }
                      else
                        k = "";
                      break;
                    default:
                      k = M(c, X(c, f, I), k, h, a + 1);
                  }
                  F2 += k;
                  k = I = r = u = q = 0;
                  f = "";
                  g = e.charCodeAt(++l);
                  break;
                case 125:
                case 59:
                  f = (0 < r ? f.replace(N, "") : f).trim();
                  if (1 < (t = f.length))
                    switch (u === 0 && (q = f.charCodeAt(0), q === 45 || 96 < q && 123 > q) && (t = (f = f.replace(" ", ":")).length), 0 < A && (C = H(1, f, c, d, D, z, p.length, h, a, h)) !== void 0 && (t = (f = C.trim()).length) === 0 && (f = "\0\0"), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                      case 0:
                        break;
                      case 64:
                        if (g === 105 || g === 99) {
                          G2 += f + e.charAt(l);
                          break;
                        }
                      default:
                        f.charCodeAt(t - 1) !== 58 && (p += P(f, q, g, f.charCodeAt(2)));
                    }
                  I = r = u = q = 0;
                  f = "";
                  g = e.charCodeAt(++l);
              }
            }
            switch (g) {
              case 13:
              case 10:
                b === 47 ? b = 0 : 1 + q === 0 && h !== 107 && 0 < f.length && (r = 1, f += "\0");
                0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
                z = 1;
                D++;
                break;
              case 59:
              case 125:
                if (b + n + v + m === 0) {
                  z++;
                  break;
                }
              default:
                z++;
                y = e.charAt(l);
                switch (g) {
                  case 9:
                  case 32:
                    if (n + m + b === 0)
                      switch (x) {
                        case 44:
                        case 58:
                        case 9:
                        case 32:
                          y = "";
                          break;
                        default:
                          g !== 32 && (y = " ");
                      }
                    break;
                  case 0:
                    y = "\\0";
                    break;
                  case 12:
                    y = "\\f";
                    break;
                  case 11:
                    y = "\\v";
                    break;
                  case 38:
                    n + b + m === 0 && (r = I = 1, y = "\f" + y);
                    break;
                  case 108:
                    if (n + b + m + E === 0 && 0 < u)
                      switch (l - u) {
                        case 2:
                          x === 112 && e.charCodeAt(l - 3) === 58 && (E = x);
                        case 8:
                          K === 111 && (E = K);
                      }
                    break;
                  case 58:
                    n + b + m === 0 && (u = l);
                    break;
                  case 44:
                    b + v + n + m === 0 && (r = 1, y += "\r");
                    break;
                  case 34:
                  case 39:
                    b === 0 && (n = n === g ? 0 : n === 0 ? g : n);
                    break;
                  case 91:
                    n + b + v === 0 && m++;
                    break;
                  case 93:
                    n + b + v === 0 && m--;
                    break;
                  case 41:
                    n + b + m === 0 && v--;
                    break;
                  case 40:
                    if (n + b + m === 0) {
                      if (q === 0)
                        switch (2 * x + 3 * K) {
                          case 533:
                            break;
                          default:
                            q = 1;
                        }
                      v++;
                    }
                    break;
                  case 64:
                    b + v + n + m + u + k === 0 && (k = 1);
                    break;
                  case 42:
                  case 47:
                    if (!(0 < n + m + v))
                      switch (b) {
                        case 0:
                          switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                            case 235:
                              b = 47;
                              break;
                            case 220:
                              t = l, b = 42;
                          }
                          break;
                        case 42:
                          g === 47 && x === 42 && t + 2 !== l && (e.charCodeAt(t + 2) === 33 && (p += e.substring(t, l + 1)), y = "", b = 0);
                      }
                }
                b === 0 && (f += y);
            }
            K = x;
            x = g;
            l++;
          }
          t = p.length;
          if (0 < t) {
            r = c;
            if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), C !== void 0 && (p = C).length === 0))
              return G2 + p + F2;
            p = r.join(",") + "{" + p + "}";
            if (w * E !== 0) {
              w !== 2 || L(p, 2) || (E = 0);
              switch (E) {
                case 111:
                  p = p.replace(ha, ":-moz-$1") + p;
                  break;
                case 112:
                  p = p.replace(Q, "::-webkit-input-$1") + p.replace(Q, "::-moz-$1") + p.replace(Q, ":-ms-input-$1") + p;
              }
              E = 0;
            }
          }
          return G2 + p + F2;
        }
        function X(d, c, e) {
          var h = c.trim().split(ia);
          c = h;
          var a = h.length, m = d.length;
          switch (m) {
            case 0:
            case 1:
              var b = 0;
              for (d = m === 0 ? "" : d[0] + " "; b < a; ++b) {
                c[b] = Z(d, c[b], e).trim();
              }
              break;
            default:
              var v = b = 0;
              for (c = []; b < a; ++b) {
                for (var n = 0; n < m; ++n) {
                  c[v++] = Z(d[n] + " ", h[b], e).trim();
                }
              }
          }
          return c;
        }
        function Z(d, c, e) {
          var h = c.charCodeAt(0);
          33 > h && (h = (c = c.trim()).charCodeAt(0));
          switch (h) {
            case 38:
              return c.replace(F, "$1" + d.trim());
            case 58:
              return d.trim() + c.replace(F, "$1" + d.trim());
            default:
              if (0 < 1 * e && 0 < c.indexOf("\f"))
                return c.replace(F, (d.charCodeAt(0) === 58 ? "" : "$1") + d.trim());
          }
          return d + c;
        }
        function P(d, c, e, h) {
          var a = d + ";", m = 2 * c + 3 * e + 4 * h;
          if (m === 944) {
            d = a.indexOf(":", 9) + 1;
            var b = a.substring(d, a.length - 1).trim();
            b = a.substring(0, d).trim() + b + ";";
            return w === 1 || w === 2 && L(b, 1) ? "-webkit-" + b + b : b;
          }
          if (w === 0 || w === 2 && !L(a, 1))
            return a;
          switch (m) {
            case 1015:
              return a.charCodeAt(10) === 97 ? "-webkit-" + a + a : a;
            case 951:
              return a.charCodeAt(3) === 116 ? "-webkit-" + a + a : a;
            case 963:
              return a.charCodeAt(5) === 110 ? "-webkit-" + a + a : a;
            case 1009:
              if (a.charCodeAt(4) !== 100)
                break;
            case 969:
            case 942:
              return "-webkit-" + a + a;
            case 978:
              return "-webkit-" + a + "-moz-" + a + a;
            case 1019:
            case 983:
              return "-webkit-" + a + "-moz-" + a + "-ms-" + a + a;
            case 883:
              if (a.charCodeAt(8) === 45)
                return "-webkit-" + a + a;
              if (0 < a.indexOf("image-set(", 11))
                return a.replace(ja, "$1-webkit-$2") + a;
              break;
            case 932:
              if (a.charCodeAt(4) === 45)
                switch (a.charCodeAt(5)) {
                  case 103:
                    return "-webkit-box-" + a.replace("-grow", "") + "-webkit-" + a + "-ms-" + a.replace("grow", "positive") + a;
                  case 115:
                    return "-webkit-" + a + "-ms-" + a.replace("shrink", "negative") + a;
                  case 98:
                    return "-webkit-" + a + "-ms-" + a.replace("basis", "preferred-size") + a;
                }
              return "-webkit-" + a + "-ms-" + a + a;
            case 964:
              return "-webkit-" + a + "-ms-flex-" + a + a;
            case 1023:
              if (a.charCodeAt(8) !== 99)
                break;
              b = a.substring(a.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
              return "-webkit-box-pack" + b + "-webkit-" + a + "-ms-flex-pack" + b + a;
            case 1005:
              return ka.test(a) ? a.replace(aa, ":-webkit-") + a.replace(aa, ":-moz-") + a : a;
            case 1e3:
              b = a.substring(13).trim();
              c = b.indexOf("-") + 1;
              switch (b.charCodeAt(0) + b.charCodeAt(c)) {
                case 226:
                  b = a.replace(G, "tb");
                  break;
                case 232:
                  b = a.replace(G, "tb-rl");
                  break;
                case 220:
                  b = a.replace(G, "lr");
                  break;
                default:
                  return a;
              }
              return "-webkit-" + a + "-ms-" + b + a;
            case 1017:
              if (a.indexOf("sticky", 9) === -1)
                break;
            case 975:
              c = (a = d).length - 10;
              b = (a.charCodeAt(c) === 33 ? a.substring(0, c) : a).substring(d.indexOf(":", 7) + 1).trim();
              switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
                case 203:
                  if (111 > b.charCodeAt(8))
                    break;
                case 115:
                  a = a.replace(b, "-webkit-" + b) + ";" + a;
                  break;
                case 207:
                case 102:
                  a = a.replace(b, "-webkit-" + (102 < m ? "inline-" : "") + "box") + ";" + a.replace(b, "-webkit-" + b) + ";" + a.replace(b, "-ms-" + b + "box") + ";" + a;
              }
              return a + ";";
            case 938:
              if (a.charCodeAt(5) === 45)
                switch (a.charCodeAt(6)) {
                  case 105:
                    return b = a.replace("-items", ""), "-webkit-" + a + "-webkit-box-" + b + "-ms-flex-" + b + a;
                  case 115:
                    return "-webkit-" + a + "-ms-flex-item-" + a.replace(ba, "") + a;
                  default:
                    return "-webkit-" + a + "-ms-flex-line-pack" + a.replace("align-content", "").replace(ba, "") + a;
                }
              break;
            case 973:
            case 989:
              if (a.charCodeAt(3) !== 45 || a.charCodeAt(4) === 122)
                break;
            case 931:
            case 953:
              if (la.test(d) === true)
                return (b = d.substring(d.indexOf(":") + 1)).charCodeAt(0) === 115 ? P(d.replace("stretch", "fill-available"), c, e, h).replace(":fill-available", ":stretch") : a.replace(b, "-webkit-" + b) + a.replace(b, "-moz-" + b.replace("fill-", "")) + a;
              break;
            case 962:
              if (a = "-webkit-" + a + (a.charCodeAt(5) === 102 ? "-ms-" + a : "") + a, e + h === 211 && a.charCodeAt(13) === 105 && 0 < a.indexOf("transform", 10))
                return a.substring(0, a.indexOf(";", 27) + 1).replace(ma, "$1-webkit-$2") + a;
          }
          return a;
        }
        function L(d, c) {
          var e = d.indexOf(c === 1 ? ":" : "{"), h = d.substring(0, c !== 3 ? e : 10);
          e = d.substring(e + 1, d.length - 1);
          return R(c !== 2 ? h : h.replace(na, "$1"), e, c);
        }
        function ea(d, c) {
          var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
          return e !== c + ";" ? e.replace(oa, " or ($1)").substring(4) : "(" + c + ")";
        }
        function H(d, c, e, h, a, m, b, v, n, q) {
          for (var g = 0, x = c, w2; g < A; ++g) {
            switch (w2 = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
              case void 0:
              case false:
              case true:
              case null:
                break;
              default:
                x = w2;
            }
          }
          if (x !== c)
            return x;
        }
        function T(d) {
          switch (d) {
            case void 0:
            case null:
              A = S.length = 0;
              break;
            default:
              if (typeof d === "function")
                S[A++] = d;
              else if (typeof d === "object")
                for (var c = 0, e = d.length; c < e; ++c) {
                  T(d[c]);
                }
              else
                Y = !!d | 0;
          }
          return T;
        }
        function U(d) {
          d = d.prefix;
          d !== void 0 && (R = null, d ? typeof d !== "function" ? w = 1 : (w = 2, R = d) : w = 0);
          return U;
        }
        function B(d, c) {
          var e = d;
          33 > e.charCodeAt(0) && (e = e.trim());
          V = e;
          e = [V];
          if (0 < A) {
            var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
            h !== void 0 && typeof h === "string" && (c = h);
          }
          var a = M(O, e, c, 0, 0);
          0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), h !== void 0 && (a = h));
          V = "";
          E = 0;
          z = D = 1;
          return a;
        }
        var ca = /^\0+/g, N = /[\0\r\f]/g, aa = /: */g, ka = /zoo|gra/, ma = /([,: ])(transform)/g, ia = /,\r+?/g, F = /([\t\r\n ])*\f?&/g, fa = /@(k\w+)\s*(\S*)\s*/, Q = /::(place)/g, ha = /:(read-only)/g, G = /[svh]\w+-[tblr]{2}/, da = /\(\s*(.*)\s*\)/g, oa = /([\s\S]*?);/g, ba = /-self|flex-/g, na = /[^]*?(:[rp][el]a[\w-]+)[^]*/, la = /stretch|:\s*\w+\-(?:conte|avail)/, ja = /([^-])(image-set\()/, z = 1, D = 1, E = 0, w = 1, O = [], S = [], A = 0, R = null, Y = 0, V = "";
        B.use = T;
        B.set = U;
        W !== void 0 && U(W);
        return B;
      }
      exports.default = stylis_min;
    }
  });

  // node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.cjs.js
  var require_weak_memoize_browser_cjs = __commonJS({
    "node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
      exports.default = weakMemoize;
    }
  });

  // node_modules/@emotion/cache/dist/cache.browser.cjs.js
  var require_cache_browser_cjs = __commonJS({
    "node_modules/@emotion/cache/dist/cache.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var sheet = require_sheet_browser_cjs();
      var Stylis = _interopDefault(require_stylis_browser_cjs());
      require_weak_memoize_browser_cjs();
      var delimiter = "/*|*/";
      var needle = delimiter + "}";
      function toSheet(block) {
        if (block) {
          Sheet.current.insert(block + "}");
        }
      }
      var Sheet = {
        current: null
      };
      var ruleSheet = function ruleSheet2(context, content, selectors, parents, line, column, length, ns, depth, at) {
        switch (context) {
          case 1: {
            switch (content.charCodeAt(0)) {
              case 64: {
                Sheet.current.insert(content + ";");
                return "";
              }
              case 108: {
                if (content.charCodeAt(2) === 98) {
                  return "";
                }
              }
            }
            break;
          }
          case 2: {
            if (ns === 0)
              return content + delimiter;
            break;
          }
          case 3: {
            switch (ns) {
              case 102:
              case 112: {
                Sheet.current.insert(selectors[0] + content);
                return "";
              }
              default: {
                return content + (at === 0 ? delimiter : "");
              }
            }
          }
          case -2: {
            content.split(needle).forEach(toSheet);
          }
        }
      };
      var createCache = function createCache2(options) {
        if (options === void 0)
          options = {};
        var key = options.key || "css";
        var stylisOptions;
        if (options.prefix !== void 0) {
          stylisOptions = {
            prefix: options.prefix
          };
        }
        var stylis = new Stylis(stylisOptions);
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        {
          container = options.container || document.head;
          var nodes = document.querySelectorAll("style[data-emotion-" + key + "]");
          Array.prototype.forEach.call(nodes, function(node) {
            var attrib = node.getAttribute("data-emotion-" + key);
            attrib.split(" ").forEach(function(id) {
              inserted[id] = true;
            });
            if (node.parentNode !== container) {
              container.appendChild(node);
            }
          });
        }
        var _insert;
        {
          stylis.use(options.stylisPlugins)(ruleSheet);
          _insert = function insert(selector, serialized, sheet2, shouldCache) {
            var name = serialized.name;
            Sheet.current = sheet2;
            if (serialized.map !== void 0) {
              var map = serialized.map;
              Sheet.current = {
                insert: function insert2(rule) {
                  sheet2.insert(rule + map);
                }
              };
            }
            stylis(selector, serialized.styles);
            if (shouldCache) {
              cache.inserted[name] = true;
            }
          };
        }
        if (true) {
          var commentStart = /\/\*/g;
          var commentEnd = /\*\//g;
          stylis.use(function(context, content) {
            switch (context) {
              case -1: {
                while (commentStart.test(content)) {
                  commentEnd.lastIndex = commentStart.lastIndex;
                  if (commentEnd.test(content)) {
                    commentStart.lastIndex = commentEnd.lastIndex;
                    continue;
                  }
                  throw new Error('Your styles have an unterminated comment ("/*" without corresponding "*/").');
                }
                commentStart.lastIndex = 0;
                break;
              }
            }
          });
          stylis.use(function(context, content, selectors) {
            switch (context) {
              case -1: {
                var flag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
                var unsafePseudoClasses = content.match(/(:first|:nth|:nth-last)-child/g);
                if (unsafePseudoClasses && cache.compat !== true) {
                  unsafePseudoClasses.forEach(function(unsafePseudoClass) {
                    var ignoreRegExp = new RegExp(unsafePseudoClass + ".*\\/\\* " + flag + " \\*\\/");
                    var ignore = ignoreRegExp.test(content);
                    if (unsafePseudoClass && !ignore) {
                      console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
                    }
                  });
                }
                break;
              }
            }
          });
        }
        var cache = {
          key: key,
          sheet: new sheet.StyleSheet({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy
          }),
          nonce: options.nonce,
          inserted: inserted,
          registered: {},
          insert: _insert
        };
        return cache;
      };
      exports.default = createCache;
    }
  });

  // node_modules/@emotion/hash/dist/hash.browser.cjs.js
  var require_hash_browser_cjs = __commonJS({
    "node_modules/@emotion/hash/dist/hash.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function murmur2(str) {
        var h = 0;
        var k, i = 0, len = str.length;
        for (; len >= 4; ++i, len -= 4) {
          k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
          k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
          k ^= k >>> 24;
          h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        switch (len) {
          case 3:
            h ^= (str.charCodeAt(i + 2) & 255) << 16;
          case 2:
            h ^= (str.charCodeAt(i + 1) & 255) << 8;
          case 1:
            h ^= str.charCodeAt(i) & 255;
            h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        }
        h ^= h >>> 13;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
        return ((h ^ h >>> 15) >>> 0).toString(36);
      }
      exports.default = murmur2;
    }
  });

  // node_modules/@emotion/unitless/dist/unitless.browser.cjs.js
  var require_unitless_browser_cjs = __commonJS({
    "node_modules/@emotion/unitless/dist/unitless.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      exports.default = unitlessKeys;
    }
  });

  // node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/memoize.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize;
    }
  });

  // node_modules/@emotion/serialize/dist/serialize.browser.cjs.js
  var require_serialize_browser_cjs = __commonJS({
    "node_modules/@emotion/serialize/dist/serialize.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var hashString = _interopDefault(require_hash_browser_cjs());
      var unitless = _interopDefault(require_unitless_browser_cjs());
      var memoize = _interopDefault(require_memoize_browser_cjs());
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
      var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      var hyphenateRegex = /[A-Z]|^ms/g;
      var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      var isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      var isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      var processStyleName = memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitless[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(attr|calc|counters?|url)\(/;
        contentValues = ["normal", "none", "counter", "open-quote", "close-quote", "no-open-quote", "no-close-quote", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue2(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var msPattern;
      var hyphenPattern;
      var hyphenatedCache;
      var shouldWarnAboutInterpolatingClassNameFromCss = true;
      function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
        if (interpolation == null) {
          return "";
        }
        if (interpolation.__emotion_styles !== void 0) {
          if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
            throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");
          }
          return interpolation;
        }
        switch (typeof interpolation) {
          case "boolean": {
            return "";
          }
          case "object": {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }
            if (interpolation.styles !== void 0) {
              var next = interpolation.next;
              if (next !== void 0) {
                while (next !== void 0) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }
              var styles = interpolation.styles + ";";
              if (interpolation.map !== void 0) {
                styles += interpolation.map;
              }
              return styles;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
          }
          case "function": {
            if (mergedProps !== void 0) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
            } else if (true) {
              console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            }
            break;
          }
          case "string":
            if (true) {
              var matched = [];
              var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
              });
              if (matched.length) {
                console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
              }
            }
            break;
        }
        if (registered == null) {
          return interpolation;
        }
        var cached = registered[interpolation];
        if (couldBeSelectorInterpolation && shouldWarnAboutInterpolatingClassNameFromCss && cached !== void 0) {
          console.error("Interpolating a className from css`` is not recommended and will cause problems with composition.\nInterpolating a className from css`` will be completely unsupported in a future major version of Emotion");
          shouldWarnAboutInterpolatingClassNameFromCss = false;
        }
        return cached !== void 0 && !couldBeSelectorInterpolation ? cached : interpolation;
      }
      function createStringFromObject(mergedProps, registered, obj) {
        var string = "";
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            string += handleInterpolation(mergedProps, registered, obj[i], false);
          }
        } else {
          for (var _key in obj) {
            var value = obj[_key];
            if (typeof value !== "object") {
              if (registered != null && registered[value] !== void 0) {
                string += _key + "{" + registered[value] + "}";
              } else if (isProcessableValue(value)) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
              }
            } else {
              if (_key === "NO_COMPONENT_SELECTOR" && true) {
                throw new Error("Component selectors can only be used in conjunction with babel-plugin-emotion.");
              }
              if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
                for (var _i = 0; _i < value.length; _i++) {
                  if (isProcessableValue(value[_i])) {
                    string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                  }
                }
              } else {
                var interpolated = handleInterpolation(mergedProps, registered, value, false);
                switch (_key) {
                  case "animation":
                  case "animationName": {
                    string += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }
                  default: {
                    if (_key === "undefined") {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }
                    string += _key + "{" + interpolated + "}";
                  }
                }
              }
            }
          }
        }
        return string;
      }
      var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
      var sourceMapPattern;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//;
      }
      var cursor;
      var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles += handleInterpolation(mergedProps, registered, strings, false);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles = styles.replace(sourceMapPattern, function(match2) {
            sourceMap = match2;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match;
        while ((match = labelPattern.exec(styles)) !== null) {
          identifierName += "-" + match[1];
        }
        var name = hashString(styles) + identifierName;
        if (true) {
          return {
            name: name,
            styles: styles,
            map: sourceMap,
            next: cursor,
            toString: function toString() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name: name,
          styles: styles,
          next: cursor
        };
      };
      exports.serializeStyles = serializeStyles;
    }
  });

  // node_modules/@emotion/utils/dist/utils.browser.cjs.js
  var require_utils_browser_cjs = __commonJS({
    "node_modules/@emotion/utils/dist/utils.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var isBrowser = true;
      function getRegisteredStyles(registered, registeredStyles, classNames) {
        var rawClassName = "";
        classNames.split(" ").forEach(function(className) {
          if (registered[className] !== void 0) {
            registeredStyles.push(registered[className]);
          } else {
            rawClassName += className + " ";
          }
        });
        return rawClassName;
      }
      var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
        var className = cache.key + "-" + serialized.name;
        if ((isStringTag === false || isBrowser === false && cache.compat !== void 0) && cache.registered[className] === void 0) {
          cache.registered[className] = serialized.styles;
        }
        if (cache.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            var maybeStyles = cache.insert("." + className, current, cache.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.insertStyles = insertStyles;
    }
  });

  // node_modules/create-emotion/dist/create-emotion.browser.cjs.js
  var require_create_emotion_browser_cjs = __commonJS({
    "node_modules/create-emotion/dist/create-emotion.browser.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var createCache = _interopDefault(require_cache_browser_cjs());
      var serialize = require_serialize_browser_cjs();
      var utils = require_utils_browser_cjs();
      function insertWithoutScoping(cache, serialized) {
        if (cache.inserted[serialized.name] === void 0) {
          return cache.insert("", serialized, cache.sheet, true);
        }
      }
      function merge(registered, css, className) {
        var registeredStyles = [];
        var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
        if (registeredStyles.length < 2) {
          return className;
        }
        return rawClassName + css(registeredStyles);
      }
      var createEmotion = function createEmotion2(options) {
        var cache = createCache(options);
        cache.sheet.speedy = function(value) {
          if (this.ctr !== 0) {
            throw new Error("speedy must be changed before any rules are inserted");
          }
          this.isSpeedy = value;
        };
        cache.compat = true;
        var css = function css2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serialize.serializeStyles(args, cache.registered, void 0);
          utils.insertStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var keyframes = function keyframes2() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          var serialized = serialize.serializeStyles(args, cache.registered);
          var animation = "animation-" + serialized.name;
          insertWithoutScoping(cache, {
            name: serialized.name,
            styles: "@keyframes " + animation + "{" + serialized.styles + "}"
          });
          return animation;
        };
        var injectGlobal = function injectGlobal2() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          var serialized = serialize.serializeStyles(args, cache.registered);
          insertWithoutScoping(cache, serialized);
        };
        var cx = function cx2() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return merge(cache.registered, css, classnames(args));
        };
        return {
          css: css,
          cx: cx,
          injectGlobal: injectGlobal,
          keyframes: keyframes,
          hydrate: function hydrate(ids) {
            ids.forEach(function(key) {
              cache.inserted[key] = true;
            });
          },
          flush: function flush() {
            cache.registered = {};
            cache.inserted = {};
            cache.sheet.flush();
          },
          sheet: cache.sheet,
          cache: cache,
          getRegisteredStyles: utils.getRegisteredStyles.bind(null, cache.registered),
          merge: merge.bind(null, cache.registered, css)
        };
      };
      var classnames = function classnames2(args) {
        var cls = "";
        for (var i = 0; i < args.length; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      exports.default = createEmotion;
    }
  });

  // node_modules/emotion/dist/emotion.cjs.dev.js
  var require_emotion_cjs_dev = __commonJS({
    "node_modules/emotion/dist/emotion.cjs.dev.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var createEmotion = _interopDefault(require_create_emotion_browser_cjs());
      var _createEmotion = createEmotion();
      var flush = _createEmotion.flush;
      var hydrate = _createEmotion.hydrate;
      var cx = _createEmotion.cx;
      var merge = _createEmotion.merge;
      var getRegisteredStyles = _createEmotion.getRegisteredStyles;
      var injectGlobal = _createEmotion.injectGlobal;
      var keyframes = _createEmotion.keyframes;
      var css = _createEmotion.css;
      var sheet = _createEmotion.sheet;
      var cache = _createEmotion.cache;
      exports.cache = cache;
      exports.css = css;
      exports.cx = cx;
      exports.flush = flush;
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.hydrate = hydrate;
      exports.injectGlobal = injectGlobal;
      exports.keyframes = keyframes;
      exports.merge = merge;
      exports.sheet = sheet;
    }
  });

  // node_modules/emotion/dist/emotion.cjs.js
  var require_emotion_cjs = __commonJS({
    "node_modules/emotion/dist/emotion.cjs.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_cjs_dev();
      }
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js": function(exports, module) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module !== "undefined" && module.exports) {
          classNames.default = classNames;
          module.exports = classNames;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }
  });

  // node_modules/core-js-pure/modules/es.array.map.js
  var require_es_array_map = __commonJS({
    "node_modules/core-js-pure/modules/es.array.map.js": function() {
      "use strict";
      var $ = require_export();
      var $map = require_array_iteration().map;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        map: function map(callbackfn) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/map.js
  var require_map = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/map.js": function(exports, module) {
      require_es_array_map();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").map;
    }
  });

  // node_modules/core-js-pure/es/instance/map.js
  var require_map2 = __commonJS({
    "node_modules/core-js-pure/es/instance/map.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_map();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.map;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/map.js
  var require_map3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/map.js": function(exports, module) {
      var parent = require_map2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
  var require_map4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js": function(exports, module) {
      module.exports = require_map3();
    }
  });

  // lib/landing/ui/Row.js
  var require_Row = __commonJS({
    "lib/landing/ui/Row.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _emotion = require_emotion_cjs();
      var _react2 = _interopRequireDefault2(require_react());
      var ROOT_CSS = (0, _emotion.css)({
        margin: "1em 0",
        "& > label, & > div": {
          alignItems: "flex-start",
          display: "flex",
          "& > header": {
            display: "inline-block",
            width: 100
          },
          "& > div": {
            flex: 1
          }
        }
      });
      var Row = function Row2(_ref) {
        var children = _ref.children, className = _ref.className, header = _ref.header, _ref$rowLabel = _ref.rowLabel, rowLabel = _ref$rowLabel === void 0 ? true : _ref$rowLabel;
        return /* @__PURE__ */ _react2["default"].createElement("section", {
          className: ROOT_CSS
        }, rowLabel ? /* @__PURE__ */ _react2["default"].createElement("label", null, /* @__PURE__ */ _react2["default"].createElement("header", null, header), /* @__PURE__ */ _react2["default"].createElement("div", {
          className: className
        }, children)) : /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("header", null, header), /* @__PURE__ */ _react2["default"].createElement("div", {
          className: className
        }, children)));
      };
      var _default = Row;
      exports["default"] = _default;
    }
  });

  // lib/landing/data/action/loadBotPreset.js
  var require_loadBotPreset = __commonJS({
    "lib/landing/data/action/loadBotPreset.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.LOAD_BOT_PRESET = void 0;
      exports["default"] = loadBotPreset;
      var LOAD_BOT_PRESET = "LOAD_BOT_PRESET";
      exports.LOAD_BOT_PRESET = LOAD_BOT_PRESET;
      function loadBotPreset(name) {
        return {
          payload: {
            name: name
          },
          type: LOAD_BOT_PRESET
        };
      }
    }
  });

  // lib/landing/ui/BotPresets.js
  var require_BotPresets = __commonJS({
    "lib/landing/ui/BotPresets.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _map = _interopRequireDefault2(require_map4());
      var _emotion = require_emotion_cjs();
      var _reactRedux2 = require_lib();
      var _classnames = _interopRequireDefault2(require_classnames());
      var _react2 = _interopRequireWildcard2(require_react());
      var _Row = _interopRequireDefault2(require_Row());
      var _loadBotPreset = _interopRequireDefault2(require_loadBotPreset());
      var ROOT_CSS = (0, _emotion.css)({
        "& .bot-presets__preset": {
          appearance: "none",
          background: "transparent",
          border: 0,
          color: "rgb(0, 0, 238)",
          cursor: "pointer",
          display: "inline",
          fontFamily: "inherit",
          fontSize: "inherit",
          margin: 0,
          padding: 0,
          textDecoration: "underline"
        },
        "& .bot-presets__preset:disabled": {
          color: "#CCC",
          cursor: "inherit",
          textDecoration: "none"
        }
      });
      var PRESETS = [
        {
          id: "mockbot",
          name: "[Public] MockBot",
          title: "MockBot via Web Socket with speech-enabled."
        },
        {
          id: "mockbot3",
          name: "[Public] MockBot 3 via Web Socket (Preview)",
          title: "MockBot3 via Direct Line App Service Extension."
        },
        {
          id: "mockbot3-dlase",
          name: "[Public] MockBot 3 via Direct Line ASE (Preview)",
          title: "MockBot3 via Direct Line App Service Extension."
        },
        {
          id: "mockbot-dls",
          name: "[Public] MockBot (Direct Line Speech)",
          title: "MockBot via Direct Line Speech."
        },
        {
          id: "dev",
          name: "[Dev] http://localhost:3978/directline/tokens",
          title: "Bot using tokens fetched locally."
        }
      ];
      var BotPreset = function BotPreset2(_ref) {
        var children = _ref.children, onLoad = _ref.onLoad, title = _ref.title, value = _ref.value;
        var handleClick = (0, _react2.useCallback)(function(event) {
          event.preventDefault();
          onLoad && onLoad(value);
        }, [onLoad, value]);
        return /* @__PURE__ */ _react2["default"].createElement("button", {
          className: "bot-presets__preset",
          onClick: handleClick,
          title: title,
          type: "button"
        }, /* @__PURE__ */ _react2["default"].createElement("nobr", null, children));
      };
      var BotPresets = function BotPresets2() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        var handleLoad = (0, _react2.useCallback)(function(value) {
          return dispatch((0, _loadBotPreset["default"])(value));
        }, []);
        return /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          className: (0, _classnames["default"])("bot-presets", ROOT_CSS),
          header: "Preset"
        }, (0, _map["default"])(PRESETS).call(PRESETS, function(_ref2) {
          var id = _ref2.id, name = _ref2.name, title = _ref2.title;
          return /* @__PURE__ */ _react2["default"].createElement("div", {
            key: id
          }, /* @__PURE__ */ _react2["default"].createElement(BotPreset, {
            title: title,
            onLoad: handleLoad,
            value: id
          }, name));
        }));
      };
      var _default = BotPresets;
      exports["default"] = _default;
    }
  });

  // node_modules/core-js-pure/es/array/virtual/concat.js
  var require_concat = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/concat.js": function(exports, module) {
      require_es_array_concat();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").concat;
    }
  });

  // node_modules/core-js-pure/es/instance/concat.js
  var require_concat2 = __commonJS({
    "node_modules/core-js-pure/es/instance/concat.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_concat();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.concat;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/concat.js
  var require_concat3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/concat.js": function(exports, module) {
      var parent = require_concat2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
  var require_concat4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js": function(exports, module) {
      module.exports = require_concat3();
    }
  });

  // node_modules/core-js-pure/modules/es.date.now.js
  var require_es_date_now = __commonJS({
    "node_modules/core-js-pure/modules/es.date.now.js": function() {
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var $Date = Date;
      var thisTimeValue = uncurryThis($Date.prototype.getTime);
      $({ target: "Date", stat: true }, {
        now: function now() {
          return thisTimeValue(new $Date());
        }
      });
    }
  });

  // node_modules/core-js-pure/es/date/now.js
  var require_now = __commonJS({
    "node_modules/core-js-pure/es/date/now.js": function(exports, module) {
      require_es_date_now();
      var path = require_path();
      module.exports = path.Date.now;
    }
  });

  // node_modules/core-js-pure/stable/date/now.js
  var require_now2 = __commonJS({
    "node_modules/core-js-pure/stable/date/now.js": function(exports, module) {
      var parent = require_now();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js
  var require_now3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/date/now.js": function(exports, module) {
      module.exports = require_now2();
    }
  });

  // node_modules/core-js-pure/internals/validate-arguments-length.js
  var require_validate_arguments_length2 = __commonJS({
    "node_modules/core-js-pure/internals/validate-arguments-length.js": function(exports, module) {
      var $TypeError = TypeError;
      module.exports = function(passed, required) {
        if (passed < required)
          throw $TypeError("Not enough arguments");
        return passed;
      };
    }
  });

  // node_modules/core-js-pure/internals/schedulers-fix.js
  var require_schedulers_fix = __commonJS({
    "node_modules/core-js-pure/internals/schedulers-fix.js": function(exports, module) {
      var global2 = require_global();
      var apply = require_function_apply();
      var isCallable = require_is_callable();
      var userAgent = require_engine_user_agent();
      var arraySlice = require_array_slice();
      var validateArgumentsLength = require_validate_arguments_length2();
      var MSIE = /MSIE .\./.test(userAgent);
      var Function2 = global2.Function;
      var wrap = function(scheduler) {
        return MSIE ? function(handler, timeout) {
          var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
          var fn = isCallable(handler) ? handler : Function2(handler);
          var args = boundArgs ? arraySlice(arguments, 2) : void 0;
          return scheduler(boundArgs ? function() {
            apply(fn, this, args);
          } : fn, timeout);
        } : scheduler;
      };
      module.exports = {
        setTimeout: wrap(global2.setTimeout),
        setInterval: wrap(global2.setInterval)
      };
    }
  });

  // node_modules/core-js-pure/modules/web.set-interval.js
  var require_web_set_interval = __commonJS({
    "node_modules/core-js-pure/modules/web.set-interval.js": function() {
      var $ = require_export();
      var global2 = require_global();
      var setInterval = require_schedulers_fix().setInterval;
      $({ global: true, bind: true, forced: global2.setInterval !== setInterval }, {
        setInterval: setInterval
      });
    }
  });

  // node_modules/core-js-pure/modules/web.set-timeout.js
  var require_web_set_timeout = __commonJS({
    "node_modules/core-js-pure/modules/web.set-timeout.js": function() {
      var $ = require_export();
      var global2 = require_global();
      var setTimeout2 = require_schedulers_fix().setTimeout;
      $({ global: true, bind: true, forced: global2.setTimeout !== setTimeout2 }, {
        setTimeout: setTimeout2
      });
    }
  });

  // node_modules/core-js-pure/modules/web.timers.js
  var require_web_timers = __commonJS({
    "node_modules/core-js-pure/modules/web.timers.js": function() {
      require_web_set_interval();
      require_web_set_timeout();
    }
  });

  // node_modules/core-js-pure/stable/set-timeout.js
  var require_set_timeout = __commonJS({
    "node_modules/core-js-pure/stable/set-timeout.js": function(exports, module) {
      require_web_timers();
      var path = require_path();
      module.exports = path.setTimeout;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js
  var require_set_timeout2 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/set-timeout.js": function(exports, module) {
      module.exports = require_set_timeout();
    }
  });

  // node_modules/core-js-pure/modules/es.array.includes.js
  var require_es_array_includes = __commonJS({
    "node_modules/core-js-pure/modules/es.array.includes.js": function() {
      "use strict";
      var $ = require_export();
      var $includes = require_array_includes().includes;
      var fails = require_fails();
      var addToUnscopables = require_add_to_unscopables();
      var BROKEN_ON_SPARSE = fails(function() {
        return !Array(1).includes();
      });
      $({ target: "Array", proto: true, forced: BROKEN_ON_SPARSE }, {
        includes: function includes(el) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables("includes");
    }
  });

  // node_modules/core-js-pure/es/array/virtual/includes.js
  var require_includes = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/includes.js": function(exports, module) {
      require_es_array_includes();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").includes;
    }
  });

  // node_modules/core-js-pure/internals/is-regexp.js
  var require_is_regexp = __commonJS({
    "node_modules/core-js-pure/internals/is-regexp.js": function(exports, module) {
      var isObject = require_is_object();
      var classof = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
      };
    }
  });

  // node_modules/core-js-pure/internals/not-a-regexp.js
  var require_not_a_regexp = __commonJS({
    "node_modules/core-js-pure/internals/not-a-regexp.js": function(exports, module) {
      var isRegExp = require_is_regexp();
      var $TypeError = TypeError;
      module.exports = function(it) {
        if (isRegExp(it)) {
          throw $TypeError("The method doesn't accept regular expressions");
        }
        return it;
      };
    }
  });

  // node_modules/core-js-pure/internals/correct-is-regexp-logic.js
  var require_correct_is_regexp_logic = __commonJS({
    "node_modules/core-js-pure/internals/correct-is-regexp-logic.js": function(exports, module) {
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(METHOD_NAME) {
        var regexp = /./;
        try {
          "/./"[METHOD_NAME](regexp);
        } catch (error1) {
          try {
            regexp[MATCH] = false;
            return "/./"[METHOD_NAME](regexp);
          } catch (error2) {
          }
        }
        return false;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.string.includes.js
  var require_es_string_includes = __commonJS({
    "node_modules/core-js-pure/modules/es.string.includes.js": function() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var stringIndexOf = uncurryThis("".indexOf);
      $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
        includes: function includes(searchString) {
          return !!~stringIndexOf(toString(requireObjectCoercible(this)), toString(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/string/virtual/includes.js
  var require_includes2 = __commonJS({
    "node_modules/core-js-pure/es/string/virtual/includes.js": function(exports, module) {
      require_es_string_includes();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("String").includes;
    }
  });

  // node_modules/core-js-pure/es/instance/includes.js
  var require_includes3 = __commonJS({
    "node_modules/core-js-pure/es/instance/includes.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var arrayMethod = require_includes();
      var stringMethod = require_includes2();
      var ArrayPrototype = Array.prototype;
      var StringPrototype = String.prototype;
      module.exports = function(it) {
        var own = it.includes;
        if (it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.includes)
          return arrayMethod;
        if (typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.includes) {
          return stringMethod;
        }
        return own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/includes.js
  var require_includes4 = __commonJS({
    "node_modules/core-js-pure/stable/instance/includes.js": function(exports, module) {
      var parent = require_includes3();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js
  var require_includes5 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/includes.js": function(exports, module) {
      module.exports = require_includes4();
    }
  });

  // node_modules/core-js-pure/es/json/stringify.js
  var require_stringify = __commonJS({
    "node_modules/core-js-pure/es/json/stringify.js": function(exports, module) {
      require_es_json_stringify();
      var path = require_path();
      var apply = require_function_apply();
      if (!path.JSON)
        path.JSON = { stringify: JSON.stringify };
      module.exports = function stringify(it, replacer, space) {
        return apply(path.JSON.stringify, null, arguments);
      };
    }
  });

  // node_modules/core-js-pure/stable/json/stringify.js
  var require_stringify2 = __commonJS({
    "node_modules/core-js-pure/stable/json/stringify.js": function(exports, module) {
      var parent = require_stringify();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js
  var require_stringify3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js": function(exports, module) {
      module.exports = require_stringify2();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js
  var require_arrayWithoutHoles = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/arrayWithoutHoles.js": function(exports, module) {
      var _Array$isArray = require_is_array7();
      var arrayLikeToArray = require_arrayLikeToArray();
      function _arrayWithoutHoles(arr) {
        if (_Array$isArray(arr))
          return arrayLikeToArray(arr);
      }
      module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js
  var require_iterableToArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/iterableToArray.js": function(exports, module) {
      var _Symbol = require_symbol6();
      var _getIteratorMethod = require_get_iterator_method8();
      var _Array$from = require_from6();
      function _iterableToArray(iter) {
        if (typeof _Symbol !== "undefined" && _getIteratorMethod(iter) != null || iter["@@iterator"] != null)
          return _Array$from(iter);
      }
      module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js
  var require_nonIterableSpread = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/nonIterableSpread.js": function(exports, module) {
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js
  var require_toConsumableArray = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/toConsumableArray.js": function(exports, module) {
      var arrayWithoutHoles = require_arrayWithoutHoles();
      var iterableToArray = require_iterableToArray();
      var unsupportedIterableToArray = require_unsupportedIterableToArray();
      var nonIterableSpread = require_nonIterableSpread();
      function _toConsumableArray(arr) {
        return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
      }
      module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/ms/index.js
  var require_ms = __commonJS({
    "node_modules/ms/index.js": function(exports, module) {
      var s = 1e3;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      module.exports = function(val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0) {
          return parse(val);
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
      };
      function parse(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return n * y;
          case "weeks":
          case "week":
          case "w":
            return n * w;
          case "days":
          case "day":
          case "d":
            return n * d;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return n * h;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return n * m;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return n * s;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return n;
          default:
            return void 0;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return Math.round(ms / d) + "d";
        }
        if (msAbs >= h) {
          return Math.round(ms / h) + "h";
        }
        if (msAbs >= m) {
          return Math.round(ms / m) + "m";
        }
        if (msAbs >= s) {
          return Math.round(ms / s) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d) {
          return plural(ms, msAbs, d, "day");
        }
        if (msAbs >= h) {
          return plural(ms, msAbs, h, "hour");
        }
        if (msAbs >= m) {
          return plural(ms, msAbs, m, "minute");
        }
        if (msAbs >= s) {
          return plural(ms, msAbs, s, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
      }
    }
  });

  // node_modules/jwt-decode/build/jwt-decode.cjs.js
  var require_jwt_decode_cjs = __commonJS({
    "node_modules/jwt-decode/build/jwt-decode.cjs.js": function(exports, module) {
      "use strict";
      function e(e2) {
        this.message = e2;
      }
      e.prototype = new Error(), e.prototype.name = "InvalidCharacterError";
      var r = typeof window != "undefined" && window.atob && window.atob.bind(window) || function(r2) {
        var t2 = String(r2).replace(/=+$/, "");
        if (t2.length % 4 == 1)
          throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
        for (var n2, o2, a2 = 0, i = 0, c = ""; o2 = t2.charAt(i++); ~o2 && (n2 = a2 % 4 ? 64 * n2 + o2 : o2, a2++ % 4) ? c += String.fromCharCode(255 & n2 >> (-2 * a2 & 6)) : 0)
          o2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o2);
        return c;
      };
      function t(e2) {
        var t2 = e2.replace(/-/g, "+").replace(/_/g, "/");
        switch (t2.length % 4) {
          case 0:
            break;
          case 2:
            t2 += "==";
            break;
          case 3:
            t2 += "=";
            break;
          default:
            throw "Illegal base64url string!";
        }
        try {
          return function(e3) {
            return decodeURIComponent(r(e3).replace(/(.)/g, function(e4, r2) {
              var t3 = r2.charCodeAt(0).toString(16).toUpperCase();
              return t3.length < 2 && (t3 = "0" + t3), "%" + t3;
            }));
          }(t2);
        } catch (e3) {
          return r(t2);
        }
      }
      function n(e2) {
        this.message = e2;
      }
      function o(e2, r2) {
        if (typeof e2 != "string")
          throw new n("Invalid token specified");
        var o2 = (r2 = r2 || {}).header === true ? 0 : 1;
        try {
          return JSON.parse(t(e2.split(".")[o2]));
        } catch (e3) {
          throw new n("Invalid token specified: " + e3.message);
        }
      }
      n.prototype = new Error(), n.prototype.name = "InvalidTokenError";
      var a = o;
      a.default = o, a.InvalidTokenError = n, module.exports = a;
    }
  });

  // lib/landing/util/tryDecodeJWT.js
  var require_tryDecodeJWT = __commonJS({
    "lib/landing/util/tryDecodeJWT.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = tryDecodeJWT2;
      var _jwtDecode = _interopRequireDefault2(require_jwt_decode_cjs());
      function tryDecodeJWT2(token) {
        try {
          return token && (0, _jwtDecode["default"])(token);
        } catch (error) {
        }
      }
    }
  });

  // lib/landing/data/action/setDirectLineSecret.js
  var require_setDirectLineSecret = __commonJS({
    "lib/landing/data/action/setDirectLineSecret.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_DIRECT_LINE_SECRET = void 0;
      exports["default"] = setDirectLineSecret;
      var SET_DIRECT_LINE_SECRET = "SET_DIRECT_LINE_SECRET";
      exports.SET_DIRECT_LINE_SECRET = SET_DIRECT_LINE_SECRET;
      function setDirectLineSecret(secret) {
        return {
          payload: {
            secret: secret
          },
          type: SET_DIRECT_LINE_SECRET
        };
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineSecret.js
  var require_useDirectLineSecret = __commonJS({
    "lib/landing/data/hooks/useDirectLineSecret.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineSecret;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setDirectLineSecret = _interopRequireDefault2(require_setDirectLineSecret());
      function useDirectLineSecret() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var secret = _ref.directLineCredentials.secret;
          return secret;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setDirectLineSecret["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setDirectLineToken.js
  var require_setDirectLineToken = __commonJS({
    "lib/landing/data/action/setDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_DIRECT_LINE_TOKEN = void 0;
      exports["default"] = setDirectLineToken;
      var SET_DIRECT_LINE_TOKEN = "SET_DIRECT_LINE_TOKEN";
      exports.SET_DIRECT_LINE_TOKEN = SET_DIRECT_LINE_TOKEN;
      function setDirectLineToken(token) {
        return {
          payload: {
            token: token
          },
          type: SET_DIRECT_LINE_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineToken.js
  var require_useDirectLineToken = __commonJS({
    "lib/landing/data/hooks/useDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setDirectLineToken = _interopRequireDefault2(require_setDirectLineToken());
      function useDirectLineToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var token = _ref.directLineCredentials.token;
          return token;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setDirectLineToken["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setDirectLineUserId.js
  var require_setDirectLineUserId = __commonJS({
    "lib/landing/data/action/setDirectLineUserId.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_DIRECT_LINE_USER_ID = void 0;
      exports["default"] = setDirectLineUserId;
      var SET_DIRECT_LINE_USER_ID = "SET_DIRECT_LINE_USER_ID";
      exports.SET_DIRECT_LINE_USER_ID = SET_DIRECT_LINE_USER_ID;
      function setDirectLineUserId(userId) {
        return {
          payload: {
            userId: userId
          },
          type: SET_DIRECT_LINE_USER_ID
        };
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineUserId.js
  var require_useDirectLineUserId = __commonJS({
    "lib/landing/data/hooks/useDirectLineUserId.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineUserId;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setDirectLineUserId = _interopRequireDefault2(require_setDirectLineUserId());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var _useDirectLineToken3 = _interopRequireDefault2(require_useDirectLineToken());
      function useDirectLineUserId() {
        var _useDirectLineToken = (0, _useDirectLineToken3["default"])(), _useDirectLineToken2 = (0, _slicedToArray2["default"])(_useDirectLineToken, 1), token = _useDirectLineToken2[0];
        var dispatch = (0, _reactRedux2.useDispatch)();
        var value = (0, _reactRedux2.useSelector)(function(_ref) {
          var userId = _ref.directLineCredentials.userId;
          return userId;
        });
        var setter = (0, _react2.useCallback)(function(value2) {
          return dispatch((0, _setDirectLineUserId["default"])(value2));
        });
        return [((0, _tryDecodeJWT["default"])(token) || {}).user || value, setter];
      }
    }
  });

  // lib/landing/data/action/fetchDirectLineToken.js
  var require_fetchDirectLineToken = __commonJS({
    "lib/landing/data/action/fetchDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FETCH_DIRECT_LINE_TOKEN = void 0;
      exports["default"] = fetchDirectLineToken;
      var FETCH_DIRECT_LINE_TOKEN = "FETCH_DIRECT_LINE_TOKEN";
      exports.FETCH_DIRECT_LINE_TOKEN = FETCH_DIRECT_LINE_TOKEN;
      function fetchDirectLineToken() {
        return {
          type: FETCH_DIRECT_LINE_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useFetchDirectLineToken.js
  var require_useFetchDirectLineToken = __commonJS({
    "lib/landing/data/hooks/useFetchDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useFetchDirectLineToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _fetchDirectLineToken = _interopRequireDefault2(require_fetchDirectLineToken());
      function useFetchDirectLineToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return (0, _react2.useCallback)(function() {
          return dispatch((0, _fetchDirectLineToken["default"])());
        });
      }
    }
  });

  // lib/landing/data/action/generateDirectLineToken.js
  var require_generateDirectLineToken = __commonJS({
    "lib/landing/data/action/generateDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.GENERATE_DIRECT_LINE_TOKEN = void 0;
      exports["default"] = generateDirectLineToken;
      var GENERATE_DIRECT_LINE_TOKEN = "GENERATE_DIRECT_LINE_TOKEN";
      exports.GENERATE_DIRECT_LINE_TOKEN = GENERATE_DIRECT_LINE_TOKEN;
      function generateDirectLineToken() {
        return {
          type: GENERATE_DIRECT_LINE_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useGenerateDirectLineToken.js
  var require_useGenerateDirectLineToken = __commonJS({
    "lib/landing/data/hooks/useGenerateDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useGenerateDirectLineToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _generateDirectLineToken = _interopRequireDefault2(require_generateDirectLineToken());
      function useGenerateDirectLineToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return (0, _react2.useCallback)(function() {
          return dispatch((0, _generateDirectLineToken["default"])());
        });
      }
    }
  });

  // lib/landing/data/action/setProtocolAppServiceExtension.js
  var require_setProtocolAppServiceExtension = __commonJS({
    "lib/landing/data/action/setProtocolAppServiceExtension.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_APP_SERVICE_EXTENSION = void 0;
      exports["default"] = setProtocolAppServiceExtension;
      var SET_PROTOCOL_APP_SERVICE_EXTENSION = "SET_PROTOCOL_APP_SERVICE_EXTENSION";
      exports.SET_PROTOCOL_APP_SERVICE_EXTENSION = SET_PROTOCOL_APP_SERVICE_EXTENSION;
      function setProtocolAppServiceExtension() {
        return {
          type: SET_PROTOCOL_APP_SERVICE_EXTENSION
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolAppServiceExtension.js
  var require_useProtocolAppServiceExtension = __commonJS({
    "lib/landing/data/hooks/useProtocolAppServiceExtension.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolAppServiceExtension;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolAppServiceExtension = _interopRequireDefault2(require_setProtocolAppServiceExtension());
      function useProtocolAppServiceExtension() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "app service extension";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolAppServiceExtension["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setProtocolAppServiceExtensionInsecure.js
  var require_setProtocolAppServiceExtensionInsecure = __commonJS({
    "lib/landing/data/action/setProtocolAppServiceExtensionInsecure.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE = void 0;
      exports["default"] = setProtocolAppServiceExtensionInsecure;
      var SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE = "SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE";
      exports.SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE = SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE;
      function setProtocolAppServiceExtensionInsecure() {
        return {
          type: SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolAppServiceExtensionInsecure.js
  var require_useProtocolAppServiceExtensionInsecure = __commonJS({
    "lib/landing/data/hooks/useProtocolAppServiceExtensionInsecure.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolAppServiceExtensionInsecure;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolAppServiceExtensionInsecure = _interopRequireDefault2(require_setProtocolAppServiceExtensionInsecure());
      function useProtocolAppServiceExtensionInsecure() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "app service extension insecure";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolAppServiceExtensionInsecure["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setProtocolDirectLineSpeech.js
  var require_setProtocolDirectLineSpeech = __commonJS({
    "lib/landing/data/action/setProtocolDirectLineSpeech.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_DIRECT_LINE_SPEECH = void 0;
      exports["default"] = setProtocolDirectLineSpeech;
      var SET_PROTOCOL_DIRECT_LINE_SPEECH = "SET_PROTOCOL_DIRECT_LINE_SPEECH";
      exports.SET_PROTOCOL_DIRECT_LINE_SPEECH = SET_PROTOCOL_DIRECT_LINE_SPEECH;
      function setProtocolDirectLineSpeech() {
        return {
          type: SET_PROTOCOL_DIRECT_LINE_SPEECH
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolDirectLineSpeech.js
  var require_useProtocolDirectLineSpeech = __commonJS({
    "lib/landing/data/hooks/useProtocolDirectLineSpeech.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolDirectLineSpeech;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolDirectLineSpeech = _interopRequireDefault2(require_setProtocolDirectLineSpeech());
      function useProtocolDirectLineSpeech() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "direct line speech";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolDirectLineSpeech["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setProtocolREST.js
  var require_setProtocolREST = __commonJS({
    "lib/landing/data/action/setProtocolREST.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_REST = void 0;
      exports["default"] = setProtocolREST;
      var SET_PROTOCOL_REST = "SET_PROTOCOL_REST";
      exports.SET_PROTOCOL_REST = SET_PROTOCOL_REST;
      function setProtocolREST() {
        return {
          type: SET_PROTOCOL_REST
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolREST.js
  var require_useProtocolREST = __commonJS({
    "lib/landing/data/hooks/useProtocolREST.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolREST;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolREST = _interopRequireDefault2(require_setProtocolREST());
      function useProtocolREST() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "rest";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolREST["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setProtocolTranscript.js
  var require_setProtocolTranscript = __commonJS({
    "lib/landing/data/action/setProtocolTranscript.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_TRANSCRIPT = void 0;
      exports["default"] = setProtocolTranscript;
      var SET_PROTOCOL_TRANSCRIPT = "SET_PROTOCOL_TRANSCRIPT";
      exports.SET_PROTOCOL_TRANSCRIPT = SET_PROTOCOL_TRANSCRIPT;
      function setProtocolTranscript() {
        return {
          type: SET_PROTOCOL_TRANSCRIPT
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolTranscript.js
  var require_useProtocolTranscript = __commonJS({
    "lib/landing/data/hooks/useProtocolTranscript.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolTranscript;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolTranscript = _interopRequireDefault2(require_setProtocolTranscript());
      function useProtocolTranscript() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "transcript";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolTranscript["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setProtocolWebSocket.js
  var require_setProtocolWebSocket = __commonJS({
    "lib/landing/data/action/setProtocolWebSocket.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_PROTOCOL_WEB_SOCKET = void 0;
      exports["default"] = setProtocolWebSocket;
      var SET_PROTOCOL_WEB_SOCKET = "SET_PROTOCOL_WEB_SOCKET";
      exports.SET_PROTOCOL_WEB_SOCKET = SET_PROTOCOL_WEB_SOCKET;
      function setProtocolWebSocket() {
        return {
          type: SET_PROTOCOL_WEB_SOCKET
        };
      }
    }
  });

  // lib/landing/data/hooks/useProtocolWebSocket.js
  var require_useProtocolWebSocket = __commonJS({
    "lib/landing/data/hooks/useProtocolWebSocket.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useProtocolWebSocket;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setProtocolWebSocket = _interopRequireDefault2(require_setProtocolWebSocket());
      function useProtocolWebSocket() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var protocol = _ref.protocol;
          return protocol === "web socket";
        }), (0, _react2.useCallback)(function() {
          return dispatch((0, _setProtocolWebSocket["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/refreshDirectLineToken.js
  var require_refreshDirectLineToken = __commonJS({
    "lib/landing/data/action/refreshDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.REFRESH_DIRECT_LINE_TOKEN = void 0;
      exports["default"] = refreshDirectLineToken;
      var REFRESH_DIRECT_LINE_TOKEN = "REFRESH_DIRECT_LINE_TOKEN";
      exports.REFRESH_DIRECT_LINE_TOKEN = REFRESH_DIRECT_LINE_TOKEN;
      function refreshDirectLineToken() {
        return {
          type: REFRESH_DIRECT_LINE_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useRefreshToken.js
  var require_useRefreshToken = __commonJS({
    "lib/landing/data/hooks/useRefreshToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useRefreshToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _refreshDirectLineToken = _interopRequireDefault2(require_refreshDirectLineToken());
      function useRefreshToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return (0, _react2.useCallback)(function() {
          return dispatch((0, _refreshDirectLineToken["default"])());
        });
      }
    }
  });

  // lib/landing/data/action/removeSavedDirectLineSecret.js
  var require_removeSavedDirectLineSecret = __commonJS({
    "lib/landing/data/action/removeSavedDirectLineSecret.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.REMOVE_SAVED_DIRECT_LINE_SECRET = void 0;
      exports["default"] = removeSavedDirectLineSecret;
      var REMOVE_SAVED_DIRECT_LINE_SECRET = "REMOVE_SAVED_DIRECT_LINE_SECRET";
      exports.REMOVE_SAVED_DIRECT_LINE_SECRET = REMOVE_SAVED_DIRECT_LINE_SECRET;
      function removeSavedDirectLineSecret(secret) {
        return {
          payload: {
            secret: secret
          },
          type: REMOVE_SAVED_DIRECT_LINE_SECRET
        };
      }
    }
  });

  // lib/landing/data/action/saveDirectLineSecret.js
  var require_saveDirectLineSecret = __commonJS({
    "lib/landing/data/action/saveDirectLineSecret.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SAVE_DIRECT_LINE_SECRET = void 0;
      exports["default"] = saveDirectLineSecret;
      var SAVE_DIRECT_LINE_SECRET = "SAVE_DIRECT_LINE_SECRET";
      exports.SAVE_DIRECT_LINE_SECRET = SAVE_DIRECT_LINE_SECRET;
      function saveDirectLineSecret(secret) {
        return {
          payload: {
            secret: secret
          },
          type: SAVE_DIRECT_LINE_SECRET
        };
      }
    }
  });

  // lib/landing/data/hooks/useSavedDirectLineSecrets.js
  var require_useSavedDirectLineSecrets = __commonJS({
    "lib/landing/data/hooks/useSavedDirectLineSecrets.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useSavedDirectLineSecrets;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _removeSavedDirectLineSecret = _interopRequireDefault2(require_removeSavedDirectLineSecret());
      var _saveDirectLineSecret = _interopRequireDefault2(require_saveDirectLineSecret());
      function useSavedDirectLineSecrets() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var savedSecrets = _ref.directLineCredentials.savedSecrets;
          return savedSecrets;
        }), (0, _react2.useCallback)(function(secret) {
          return dispatch((0, _saveDirectLineSecret["default"])(secret));
        }, [dispatch]), (0, _react2.useCallback)(function(secret) {
          return dispatch((0, _removeSavedDirectLineSecret["default"])(secret));
        }, [dispatch])];
      }
    }
  });

  // node_modules/core-js-pure/es/array/virtual/values.js
  var require_values = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/values.js": function(exports, module) {
      require_es_array_iterator();
      require_es_object_to_string();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").values;
    }
  });

  // node_modules/core-js-pure/stable/array/virtual/values.js
  var require_values2 = __commonJS({
    "node_modules/core-js-pure/stable/array/virtual/values.js": function(exports, module) {
      var parent = require_values();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/stable/instance/values.js
  var require_values3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/values.js": function(exports, module) {
      require_web_dom_collections_iterator();
      var classof = require_classof();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_values2();
      var ArrayPrototype = Array.prototype;
      var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
      };
      module.exports = function(it) {
        var own = it.values;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.values || hasOwn(DOMIterables, classof(it)) ? method : own;
      };
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js
  var require_values4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/values.js": function(exports, module) {
      module.exports = require_values3();
    }
  });

  // lib/landing/ui/Presets.js
  var require_Presets = __commonJS({
    "lib/landing/ui/Presets.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _values = _interopRequireDefault2(require_values4());
      var _map = _interopRequireDefault2(require_map4());
      var _emotion = require_emotion_cjs();
      var _classnames = _interopRequireDefault2(require_classnames());
      var _propTypes = _interopRequireDefault2(require_prop_types());
      var _react2 = _interopRequireWildcard2(require_react());
      var ROOT_CSS = (0, _emotion.css)({
        "& .presets__delete-preset, & .presets__preset, & .presets__save-preset": {
          appearance: "none",
          background: "transparent",
          border: 0,
          color: "rgb(0, 0, 238)",
          cursor: "pointer",
          display: "inline",
          fontFamily: "inherit",
          fontSize: "inherit",
          margin: 0,
          padding: 0,
          textDecoration: "underline"
        },
        "& .presets__preset:disabled": {
          color: "#CCC",
          cursor: "inherit",
          textDecoration: "none"
        }
      });
      var Preset = function Preset2(_ref) {
        var onDelete = _ref.onDelete, onLoad = _ref.onLoad, text = _ref.text, value = _ref.value;
        var handleDeleteClick = (0, _react2.useCallback)(function(event) {
          event.preventDefault();
          onDelete(value);
        }, [value]);
        var handleLoadClick = (0, _react2.useCallback)(function(event) {
          event.preventDefault();
          onLoad && onLoad(value);
        }, [onLoad, value]);
        return /* @__PURE__ */ _react2["default"].createElement(_react2.Fragment, null, /* @__PURE__ */ _react2["default"].createElement("button", {
          className: "presets__preset",
          disabled: !value,
          onClick: handleLoadClick,
          title: value ? "" : "Not available",
          type: "button"
        }, typeof text === "function" ? text() : text || value), !!onDelete && !/^#/.test(value) && /* @__PURE__ */ _react2["default"].createElement("button", {
          className: "presets__delete-preset",
          onClick: handleDeleteClick,
          type: "button"
        }, "[\xD7]"), "\xA0");
      };
      Preset.defaultProps = {
        onDelete: void 0,
        onLoad: void 0,
        text: void 0
      };
      Preset.propTypes = {
        onDelete: _propTypes["default"].func,
        onLoad: _propTypes["default"].func,
        text: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string]),
        value: _propTypes["default"].string.isRequired
      };
      var Presets = function Presets2(_ref2) {
        var onDelete = _ref2.onDelete, onLoad = _ref2.onLoad, onSave = _ref2.onSave, texts = _ref2.texts, values = (0, _values["default"])(_ref2);
        var handleSaveClick = (0, _react2.useCallback)(function(event) {
          event.preventDefault();
          onSave();
        }, [onSave]);
        return /* @__PURE__ */ _react2["default"].createElement("small", {
          className: (0, _classnames["default"])("presets", ROOT_CSS)
        }, (0, _map["default"])(values).call(values, function(value, index) {
          return /* @__PURE__ */ _react2["default"].createElement(Preset, {
            key: value,
            onDelete: onDelete,
            onLoad: onLoad,
            text: texts[index] || value,
            value: value
          });
        }), !!onSave && /* @__PURE__ */ _react2["default"].createElement("button", {
          className: "presets__save-preset",
          onClick: handleSaveClick,
          type: "button"
        }, "Save"));
      };
      Presets.defaultProps = {
        onDelete: void 0,
        onLoad: void 0,
        onSave: void 0
      };
      Presets.propTypes = {
        onDelete: _propTypes["default"].func,
        onLoad: _propTypes["default"].func,
        onSave: _propTypes["default"].func,
        texts: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].string])).isRequired,
        values: _propTypes["default"].arrayOf(_propTypes["default"].string).isRequired
      };
      var _default = Presets;
      exports["default"] = _default;
    }
  });

  // lib/landing/ui/DirectLineCredentials.js
  var require_DirectLineCredentials = __commonJS({
    "lib/landing/ui/DirectLineCredentials.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _concat = _interopRequireDefault2(require_concat4());
      var _map = _interopRequireDefault2(require_map4());
      var _now = _interopRequireDefault2(require_now3());
      var _setTimeout2 = _interopRequireDefault2(require_set_timeout2());
      var _includes = _interopRequireDefault2(require_includes5());
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _toConsumableArray2 = _interopRequireDefault2(require_toConsumableArray());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _emotion = require_emotion_cjs();
      var _ms = _interopRequireDefault2(require_ms());
      var _react2 = _interopRequireWildcard2(require_react());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var _useDirectLineSecret3 = _interopRequireDefault2(require_useDirectLineSecret());
      var _useDirectLineToken3 = _interopRequireDefault2(require_useDirectLineToken());
      var _useDirectLineUserId3 = _interopRequireDefault2(require_useDirectLineUserId());
      var _useFetchDirectLineToken = _interopRequireDefault2(require_useFetchDirectLineToken());
      var _useGenerateDirectLineToken = _interopRequireDefault2(require_useGenerateDirectLineToken());
      var _useProtocolAppServiceExtension = _interopRequireDefault2(require_useProtocolAppServiceExtension());
      var _useProtocolAppServiceExtensionInsecure = _interopRequireDefault2(require_useProtocolAppServiceExtensionInsecure());
      var _useProtocolDirectLineSpeech = _interopRequireDefault2(require_useProtocolDirectLineSpeech());
      var _useProtocolREST3 = _interopRequireDefault2(require_useProtocolREST());
      var _useProtocolTranscript = _interopRequireDefault2(require_useProtocolTranscript());
      var _useProtocolWebSocket3 = _interopRequireDefault2(require_useProtocolWebSocket());
      var _useRefreshToken = _interopRequireDefault2(require_useRefreshToken());
      var _useSavedDirectLineSecrets = _interopRequireDefault2(require_useSavedDirectLineSecrets());
      var _Presets = _interopRequireDefault2(require_Presets());
      var _Row = _interopRequireDefault2(require_Row());
      var EXPIRED_FOOTNOTE_CSS = (0, _emotion.css)({
        color: "Red"
      });
      var INPUT_ROW_CSS = (0, _emotion.css)({
        display: "flex",
        flex: 1,
        position: "relative",
        "& > input:invalid": {
          borderColor: "Red",
          borderStyle: "solid",
          borderWidth: 1
        }
      });
      var REFRESH_TOKEN_BUTTON_CSS = (0, _emotion.css)({
        appearance: "none",
        backgroundColor: "transparent",
        border: 0,
        color: "rgba(0, 0, 238)",
        cursor: "pointer",
        fontFamily: "inherit",
        fontSize: "inherit",
        padding: 0,
        textDecoration: "underline"
      });
      var SECRET_AND_TOKEN_CSS = (0, _emotion.css)({
        flex: 1,
        fontFamily: "Consolas, 'Courier New', monospace",
        marginRight: "1em"
      });
      var DirectLineCredential = function DirectLineCredential2() {
        var fetchDirectLineToken = (0, _useFetchDirectLineToken["default"])();
        var generateDirectLineToken = (0, _useGenerateDirectLineToken["default"])();
        var _useProtocolDirectLin = (0, _useProtocolAppServiceExtension["default"])(), _useProtocolDirectLin2 = (0, _slicedToArray2["default"])(_useProtocolDirectLin, 1), protocolDirectLineAppServiceExtension = _useProtocolDirectLin2[0];
        var _useProtocolDirectLin3 = (0, _useProtocolAppServiceExtensionInsecure["default"])(), _useProtocolDirectLin4 = (0, _slicedToArray2["default"])(_useProtocolDirectLin3, 1), protocolDirectLineAppServiceExtensionInsecure = _useProtocolDirectLin4[0];
        var _useProtocolDirectLin5 = (0, _useProtocolDirectLineSpeech["default"])(), _useProtocolDirectLin6 = (0, _slicedToArray2["default"])(_useProtocolDirectLin5, 1), protocolDirectLineSpeech = _useProtocolDirectLin6[0];
        var _useProtocolREST = (0, _useProtocolREST3["default"])(), _useProtocolREST2 = (0, _slicedToArray2["default"])(_useProtocolREST, 1), protocolREST = _useProtocolREST2[0];
        var _useProtocolTranscrip = (0, _useProtocolTranscript["default"])(), _useProtocolTranscrip2 = (0, _slicedToArray2["default"])(_useProtocolTranscrip, 1), protocolTranscript = _useProtocolTranscrip2[0];
        var _useProtocolWebSocket = (0, _useProtocolWebSocket3["default"])(), _useProtocolWebSocket2 = (0, _slicedToArray2["default"])(_useProtocolWebSocket, 1), protocolWebSocket = _useProtocolWebSocket2[0];
        var _useSavedDirectLineSe = (0, _useSavedDirectLineSecrets["default"])(), _useSavedDirectLineSe2 = (0, _slicedToArray2["default"])(_useSavedDirectLineSe, 3), savedSecrets = _useSavedDirectLineSe2[0], saveSecret = _useSavedDirectLineSe2[1], removeSavedSecret = _useSavedDirectLineSe2[2];
        var _useDirectLineSecret = (0, _useDirectLineSecret3["default"])(), _useDirectLineSecret2 = (0, _slicedToArray2["default"])(_useDirectLineSecret, 2), secret = _useDirectLineSecret2[0], setSecret = _useDirectLineSecret2[1];
        var _useDirectLineToken = (0, _useDirectLineToken3["default"])(), _useDirectLineToken2 = (0, _slicedToArray2["default"])(_useDirectLineToken, 2), token = _useDirectLineToken2[0], setToken = _useDirectLineToken2[1];
        var _useDirectLineUserId = (0, _useDirectLineUserId3["default"])(), _useDirectLineUserId2 = (0, _slicedToArray2["default"])(_useDirectLineUserId, 1), userId = _useDirectLineUserId2[0];
        var refreshToken = (0, _useRefreshToken["default"])();
        var tokenFromURL = /^https?:/.test(secret);
        var savedSecretsTexts = (0, _react2.useMemo)(function() {
          var _context;
          return (0, _concat["default"])(_context = ["MockBot", "MockBot3"]).call(_context, (0, _toConsumableArray2["default"])((0, _map["default"])(savedSecrets).call(savedSecrets, function(secret2) {
            return function() {
              return (secret2 || "").substr(0, 5) + "\u2026";
            };
          })));
        }, [savedSecrets]);
        var handleClearSecretClick = (0, _react2.useCallback)(function() {
          return setSecret("");
        }, [setSecret]);
        var handleClearTokenClick = (0, _react2.useCallback)(function() {
          return setToken("");
        }, [setToken]);
        var handleFocus = (0, _react2.useCallback)(function(_ref) {
          var target = _ref.target;
          return target.select();
        });
        var handleLoadSecret = (0, _react2.useCallback)(function(value) {
          if (value === "#mockbot") {
            setSecret("https://webchat-mockbot.azurewebsites.net/directline/token");
            fetchDirectLineToken();
          } else if (value === "#mockbot3") {
            setSecret("https://webchat-mockbot3.azurewebsites.net/api/token/directline");
            fetchDirectLineToken();
          } else {
            setSecret(value);
            setToken("");
          }
        }, [fetchDirectLineToken, setSecret, setToken]);
        var handleSaveSecret = (0, _react2.useCallback)(function() {
          return saveSecret(secret);
        });
        var handleSecretChange = (0, _react2.useCallback)(function(_ref2) {
          var value = _ref2.target.value;
          return setSecret(value);
        }, [setSecret]);
        var handleTokenChange = (0, _react2.useCallback)(function(_ref3) {
          var value = _ref3.target.value;
          return setToken(value);
        }, [setToken]);
        var secretDisabled = !!token || !!protocolDirectLineSpeech || !!protocolTranscript;
        var tokenDisabled = !!protocolDirectLineSpeech || !!protocolTranscript;
        var decodedToken = (0, _tryDecodeJWT["default"])(token);
        var timeToExpire = decodedToken && decodedToken.exp * 1e3 - (0, _now["default"])();
        var validDirectLineAppServiceExtensionToken = !decodedToken || decodedToken.iss === "https://directlineextension.botframework.com/";
        var validDirectLineToken = !decodedToken || decodedToken.iss === "https://directline.botframework.com/";
        var _useState = (0, _react2.useState)(), _useState2 = (0, _slicedToArray2["default"])(_useState, 2), setForceRender = _useState2[1];
        (0, _react2.useEffect)(function() {
          if (decodedToken) {
            var timeout = (0, _setTimeout2["default"])(function() {
              return setForceRender({});
            }, 6e4);
            return function() {
              return clearTimeout(timeout);
            };
          }
        }, [decodedToken]);
        return /* @__PURE__ */ _react2["default"].createElement(_react2["default"].Fragment, null, /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: tokenFromURL ? "Token URL" : "Secret"
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: INPUT_ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          className: SECRET_AND_TOKEN_CSS,
          disabled: secretDisabled,
          onChange: handleSecretChange,
          onFocus: handleFocus,
          placeholder: token ? "<No secret>" : "",
          required: !secretDisabled,
          title: secretDisabled ? "You cannot set secret when token is set.\n\nPlease clear token first." : tokenFromURL ? 'Will POST to this endpoint for either JSON or text depends on "Content-Type" header.\n\n"{userid}" will be replaced by generated user ID "'.concat(userId, '".') : "",
          type: "text",
          value: secret
        }), /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !secret || !!token,
          onClick: handleClearSecretClick,
          type: "button"
        }, "\xD7"), "\xA0", tokenFromURL ? /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !!token,
          onClick: fetchDirectLineToken,
          type: "button"
        }, "Fetch token") : /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !secret || !!token,
          onClick: generateDirectLineToken,
          type: "button"
        }, "Generate token")), /* @__PURE__ */ _react2["default"].createElement(_Presets["default"], {
          onDelete: removeSavedSecret,
          onLoad: handleLoadSecret,
          onSave: secret && !(0, _includes["default"])(savedSecrets).call(savedSecrets, secret) ? handleSaveSecret : void 0,
          texts: savedSecretsTexts,
          values: (0, _react2.useMemo)(function() {
            var _context2;
            return (0, _concat["default"])(_context2 = ["#mockbot", "#mockbot3"]).call(_context2, (0, _toConsumableArray2["default"])(savedSecrets));
          }, [savedSecrets])
        })), /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: "Token"
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: INPUT_ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          className: SECRET_AND_TOKEN_CSS,
          disabled: tokenDisabled,
          onChange: handleTokenChange,
          onFocus: handleFocus,
          required: tokenFromURL,
          title: decodedToken && (0, _stringify["default"])(decodedToken, null, 2),
          type: "text",
          value: token
        }), /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !token,
          onClick: handleClearTokenClick,
          type: "button"
        }, "Clear")), (protocolDirectLineAppServiceExtension || protocolDirectLineAppServiceExtensionInsecure) && !validDirectLineAppServiceExtensionToken && /* @__PURE__ */ _react2["default"].createElement("div", {
          className: EXPIRED_FOOTNOTE_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token is not for Direct Line App Service Extension.")), (protocolREST || protocolWebSocket) && !validDirectLineToken && /* @__PURE__ */ _react2["default"].createElement("div", {
          className: EXPIRED_FOOTNOTE_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token is not for Direct Line channel.")), secretDisabled && !tokenDisabled && (timeToExpire > 0 ? /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token will expire in ", (0, _ms["default"])(timeToExpire, {
          "long": true
        }), ".", " ", /* @__PURE__ */ _react2["default"].createElement("button", {
          className: REFRESH_TOKEN_BUTTON_CSS,
          onClick: refreshToken,
          title: "Auto refresh when expire in 20 minutes",
          type: "button"
        }, "Refresh now"))) : /* @__PURE__ */ _react2["default"].createElement("div", {
          className: EXPIRED_FOOTNOTE_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token has already expired.")))));
      };
      var _default = DirectLineCredential;
      exports["default"] = _default;
    }
  });

  // lib/landing/data/hooks/useDirectLineAppServiceExtensionErrorReason.js
  var require_useDirectLineAppServiceExtensionErrorReason = __commonJS({
    "lib/landing/data/hooks/useDirectLineAppServiceExtensionErrorReason.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineAppServiceExtensionErrorReason;
      var _reactRedux2 = require_lib();
      function useDirectLineAppServiceExtensionErrorReason() {
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var _ref$directLineAppSer = _ref.directLineAppServiceExtensionStatus, reason = _ref$directLineAppSer.reason, status = _ref$directLineAppSer.status;
          return status === "error" ? reason : void 0;
        })];
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineAppServiceExtensionResponse.js
  var require_useDirectLineAppServiceExtensionResponse = __commonJS({
    "lib/landing/data/hooks/useDirectLineAppServiceExtensionResponse.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineAppServiceExtensionResponse;
      var _reactRedux2 = require_lib();
      function useDirectLineAppServiceExtensionResponse() {
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var _ref$directLineAppSer = _ref.directLineAppServiceExtensionStatus, reason = _ref$directLineAppSer.reason, status = _ref$directLineAppSer.status;
          return status === "ready" ? reason : void 0;
        })];
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineAppServiceExtensionStatus.js
  var require_useDirectLineAppServiceExtensionStatus = __commonJS({
    "lib/landing/data/hooks/useDirectLineAppServiceExtensionStatus.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineAppServiceExtensionStatus;
      var _reactRedux2 = require_lib();
      function useDirectLineAppServiceExtensionStatus() {
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var status = _ref.directLineAppServiceExtensionStatus.status;
          return status;
        })];
      }
    }
  });

  // lib/landing/data/action/setDirectLineDomainHost.js
  var require_setDirectLineDomainHost = __commonJS({
    "lib/landing/data/action/setDirectLineDomainHost.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_DIRECT_LINE_DOMAIN_HOST = void 0;
      exports["default"] = setDirectLineDomainHost;
      var SET_DIRECT_LINE_DOMAIN_HOST = "SET_DIRECT_LINE_DOMAIN_HOST";
      exports.SET_DIRECT_LINE_DOMAIN_HOST = SET_DIRECT_LINE_DOMAIN_HOST;
      function setDirectLineDomainHost(host) {
        return {
          payload: {
            host: host
          },
          type: SET_DIRECT_LINE_DOMAIN_HOST
        };
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineDomainHost.js
  var require_useDirectLineDomainHost = __commonJS({
    "lib/landing/data/hooks/useDirectLineDomainHost.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineDomainHost;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setDirectLineDomainHost = _interopRequireDefault2(require_setDirectLineDomainHost());
      function useDirectLineDomainHost() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var domainHost = _ref.directLineCredentials.domainHost;
          return domainHost || "";
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setDirectLineDomainHost["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // node_modules/core-js-pure/internals/url-constructor-detection.js
  var require_url_constructor_detection = __commonJS({
    "node_modules/core-js-pure/internals/url-constructor-detection.js": function(exports, module) {
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = !fails(function() {
        var url = new URL("b?a=1&b=2&c=3", "http://a");
        var searchParams = url.searchParams;
        var result = "";
        url.pathname = "c%20d";
        searchParams.forEach(function(value, key) {
          searchParams["delete"]("b");
          result += key + value;
        });
        return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
      });
    }
  });

  // node_modules/core-js-pure/internals/define-built-in-accessor.js
  var require_define_built_in_accessor = __commonJS({
    "node_modules/core-js-pure/internals/define-built-in-accessor.js": function(exports, module) {
      var defineProperty = require_object_define_property();
      module.exports = function(target, name, descriptor) {
        return defineProperty.f(target, name, descriptor);
      };
    }
  });

  // node_modules/core-js-pure/internals/object-assign.js
  var require_object_assign2 = __commonJS({
    "node_modules/core-js-pure/internals/object-assign.js": function(exports, module) {
      "use strict";
      var DESCRIPTORS = require_descriptors();
      var uncurryThis = require_function_uncurry_this();
      var call = require_function_call();
      var fails = require_fails();
      var objectKeys = require_object_keys();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var toObject = require_to_object();
      var IndexedObject = require_indexed_object();
      var $assign = Object.assign;
      var defineProperty = Object.defineProperty;
      var concat = uncurryThis([].concat);
      module.exports = !$assign || fails(function() {
        if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
          enumerable: true,
          get: function() {
            defineProperty(this, "b", {
              value: 3,
              enumerable: false
            });
          }
        }), { b: 2 })).b !== 1)
          return true;
        var A = {};
        var B = {};
        var symbol = Symbol();
        var alphabet = "abcdefghijklmnopqrst";
        A[symbol] = 7;
        alphabet.split("").forEach(function(chr) {
          B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join("") != alphabet;
      }) ? function assign(target, source) {
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;
        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;
          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || call(propertyIsEnumerable, S, key))
              T[key] = S[key];
          }
        }
        return T;
      } : $assign;
    }
  });

  // node_modules/core-js-pure/internals/string-punycode-to-ascii.js
  var require_string_punycode_to_ascii = __commonJS({
    "node_modules/core-js-pure/internals/string-punycode-to-ascii.js": function(exports, module) {
      "use strict";
      var uncurryThis = require_function_uncurry_this();
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexNonASCII = /[^\0-\u007E]/;
      var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
      var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
      var baseMinusTMin = base - tMin;
      var $RangeError = RangeError;
      var exec = uncurryThis(regexSeparators.exec);
      var floor = Math.floor;
      var fromCharCode = String.fromCharCode;
      var charCodeAt = uncurryThis("".charCodeAt);
      var join = uncurryThis([].join);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var split = uncurryThis("".split);
      var toLowerCase = uncurryThis("".toLowerCase);
      var ucs2decode = function(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = charCodeAt(string, counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = charCodeAt(string, counter++);
            if ((extra & 64512) == 56320) {
              push(output, ((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              push(output, value);
              counter--;
            }
          } else {
            push(output, value);
          }
        }
        return output;
      };
      var digitToBasic = function(digit) {
        return digit + 22 + 75 * (digit < 26);
      };
      var adapt = function(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        while (delta > baseMinusTMin * tMax >> 1) {
          delta = floor(delta / baseMinusTMin);
          k += base;
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var encode = function(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var i, currentValue;
        for (i = 0; i < input.length; i++) {
          currentValue = input[i];
          if (currentValue < 128) {
            push(output, fromCharCode(currentValue));
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          push(output, delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          for (i = 0; i < input.length; i++) {
            currentValue = input[i];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            throw $RangeError(OVERFLOW_ERROR);
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (i = 0; i < input.length; i++) {
            currentValue = input[i];
            if (currentValue < n && ++delta > maxInt) {
              throw $RangeError(OVERFLOW_ERROR);
            }
            if (currentValue == n) {
              var q = delta;
              var k = base;
              while (true) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t)
                  break;
                var qMinusT = q - t;
                var baseMinusT = base - t;
                push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                q = floor(qMinusT / baseMinusT);
                k += base;
              }
              push(output, fromCharCode(digitToBasic(q)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              handledCPCount++;
            }
          }
          delta++;
          n++;
        }
        return join(output, "");
      };
      module.exports = function(input) {
        var encoded = [];
        var labels = split(replace(toLowerCase(input), regexSeparators, "."), ".");
        var i, label;
        for (i = 0; i < labels.length; i++) {
          label = labels[i];
          push(encoded, exec(regexNonASCII, label) ? "xn--" + encode(label) : label);
        }
        return join(encoded, ".");
      };
    }
  });

  // node_modules/core-js-pure/internals/array-sort.js
  var require_array_sort = __commonJS({
    "node_modules/core-js-pure/internals/array-sort.js": function(exports, module) {
      var arraySlice = require_array_slice_simple();
      var floor = Math.floor;
      var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);
      };
      var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;
        while (i < length) {
          j = i;
          element = array[i];
          while (j && comparefn(array[j - 1], element) > 0) {
            array[j] = array[--j];
          }
          if (j !== i++)
            array[j] = element;
        }
        return array;
      };
      var merge = function(array, left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        while (lindex < llength || rindex < rlength) {
          array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
        }
        return array;
      };
      module.exports = mergeSort;
    }
  });

  // node_modules/core-js-pure/modules/web.url-search-params.constructor.js
  var require_web_url_search_params_constructor = __commonJS({
    "node_modules/core-js-pure/modules/web.url-search-params.constructor.js": function(exports, module) {
      "use strict";
      require_es_array_iterator();
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var DESCRIPTORS = require_descriptors();
      var USE_NATIVE_URL = require_url_constructor_detection();
      var defineBuiltIn = require_define_built_in();
      var defineBuiltIns = require_define_built_ins();
      var setToStringTag = require_set_to_string_tag();
      var createIteratorConstructor = require_iterator_create_constructor();
      var InternalStateModule = require_internal_state();
      var anInstance = require_an_instance();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var bind = require_function_bind_context();
      var classof = require_classof();
      var anObject = require_an_object();
      var isObject = require_is_object();
      var $toString = require_to_string();
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var validateArgumentsLength = require_validate_arguments_length2();
      var wellKnownSymbol = require_well_known_symbol();
      var arraySort = require_array_sort();
      var ITERATOR = wellKnownSymbol("iterator");
      var URL_SEARCH_PARAMS = "URLSearchParams";
      var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
      var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var safeGetBuiltIn = function(name) {
        if (!DESCRIPTORS)
          return global2[name];
        var descriptor = getOwnPropertyDescriptor(global2, name);
        return descriptor && descriptor.value;
      };
      var nativeFetch = safeGetBuiltIn("fetch");
      var NativeRequest = safeGetBuiltIn("Request");
      var Headers = safeGetBuiltIn("Headers");
      var RequestPrototype = NativeRequest && NativeRequest.prototype;
      var HeadersPrototype = Headers && Headers.prototype;
      var RegExp2 = global2.RegExp;
      var TypeError2 = global2.TypeError;
      var decodeURIComponent2 = global2.decodeURIComponent;
      var encodeURIComponent2 = global2.encodeURIComponent;
      var charAt = uncurryThis("".charAt);
      var join = uncurryThis([].join);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var shift = uncurryThis([].shift);
      var splice = uncurryThis([].splice);
      var split = uncurryThis("".split);
      var stringSlice = uncurryThis("".slice);
      var plus = /\+/g;
      var sequences = Array(4);
      var percentSequence = function(bytes) {
        return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp2("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
      };
      var percentDecode = function(sequence) {
        try {
          return decodeURIComponent2(sequence);
        } catch (error) {
          return sequence;
        }
      };
      var deserialize = function(it) {
        var result = replace(it, plus, " ");
        var bytes = 4;
        try {
          return decodeURIComponent2(result);
        } catch (error) {
          while (bytes) {
            result = replace(result, percentSequence(bytes--), percentDecode);
          }
          return result;
        }
      };
      var find = /[!'()~]|%20/g;
      var replacements = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+"
      };
      var replacer = function(match) {
        return replacements[match];
      };
      var serialize = function(it) {
        return replace(encodeURIComponent2(it), find, replacer);
      };
      var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
        setInternalState(this, {
          type: URL_SEARCH_PARAMS_ITERATOR,
          iterator: getIterator(getInternalParamsState(params).entries),
          kind: kind
        });
      }, "Iterator", function next() {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var step = state.iterator.next();
        var entry = step.value;
        if (!step.done) {
          step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
        }
        return step;
      }, true);
      var URLSearchParamsState = function(init) {
        this.entries = [];
        this.url = null;
        if (init !== void 0) {
          if (isObject(init))
            this.parseObject(init);
          else
            this.parseQuery(typeof init == "string" ? charAt(init, 0) === "?" ? stringSlice(init, 1) : init : $toString(init));
        }
      };
      URLSearchParamsState.prototype = {
        type: URL_SEARCH_PARAMS,
        bindURL: function(url) {
          this.url = url;
          this.update();
        },
        parseObject: function(object) {
          var iteratorMethod = getIteratorMethod(object);
          var iterator, next, step, entryIterator, entryNext, first, second;
          if (iteratorMethod) {
            iterator = getIterator(object, iteratorMethod);
            next = iterator.next;
            while (!(step = call(next, iterator)).done) {
              entryIterator = getIterator(anObject(step.value));
              entryNext = entryIterator.next;
              if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done)
                throw TypeError2("Expected sequence with length 2");
              push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
            }
          } else
            for (var key in object)
              if (hasOwn(object, key)) {
                push(this.entries, { key: key, value: $toString(object[key]) });
              }
        },
        parseQuery: function(query) {
          if (query) {
            var attributes = split(query, "&");
            var index = 0;
            var attribute, entry;
            while (index < attributes.length) {
              attribute = attributes[index++];
              if (attribute.length) {
                entry = split(attribute, "=");
                push(this.entries, {
                  key: deserialize(shift(entry)),
                  value: deserialize(join(entry, "="))
                });
              }
            }
          }
        },
        serialize: function() {
          var entries = this.entries;
          var result = [];
          var index = 0;
          var entry;
          while (index < entries.length) {
            entry = entries[index++];
            push(result, serialize(entry.key) + "=" + serialize(entry.value));
          }
          return join(result, "&");
        },
        update: function() {
          this.entries.length = 0;
          this.parseQuery(this.url.query);
        },
        updateURL: function() {
          if (this.url)
            this.url.update();
        }
      };
      var URLSearchParamsConstructor = function URLSearchParams2() {
        anInstance(this, URLSearchParamsPrototype);
        var init = arguments.length > 0 ? arguments[0] : void 0;
        setInternalState(this, new URLSearchParamsState(init));
      };
      var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
      defineBuiltIns(URLSearchParamsPrototype, {
        append: function append(name, value) {
          validateArgumentsLength(arguments.length, 2);
          var state = getInternalParamsState(this);
          push(state.entries, { key: $toString(name), value: $toString(value) });
          state.updateURL();
        },
        "delete": function(name) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var key = $toString(name);
          var index = 0;
          while (index < entries.length) {
            if (entries[index].key === key)
              splice(entries, index, 1);
            else
              index++;
          }
          state.updateURL();
        },
        get: function get(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var index = 0;
          for (; index < entries.length; index++) {
            if (entries[index].key === key)
              return entries[index].value;
          }
          return null;
        },
        getAll: function getAll(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var result = [];
          var index = 0;
          for (; index < entries.length; index++) {
            if (entries[index].key === key)
              push(result, entries[index].value);
          }
          return result;
        },
        has: function has(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var index = 0;
          while (index < entries.length) {
            if (entries[index++].key === key)
              return true;
          }
          return false;
        },
        set: function set(name, value) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var found = false;
          var key = $toString(name);
          var val = $toString(value);
          var index = 0;
          var entry;
          for (; index < entries.length; index++) {
            entry = entries[index];
            if (entry.key === key) {
              if (found)
                splice(entries, index--, 1);
              else {
                found = true;
                entry.value = val;
              }
            }
          }
          if (!found)
            push(entries, { key: key, value: val });
          state.updateURL();
        },
        sort: function sort() {
          var state = getInternalParamsState(this);
          arraySort(state.entries, function(a, b) {
            return a.key > b.key ? 1 : -1;
          });
          state.updateURL();
        },
        forEach: function forEach(callback) {
          var entries = getInternalParamsState(this).entries;
          var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0);
          var index = 0;
          var entry;
          while (index < entries.length) {
            entry = entries[index++];
            boundFunction(entry.value, entry.key, this);
          }
        },
        keys: function keys() {
          return new URLSearchParamsIterator(this, "keys");
        },
        values: function values() {
          return new URLSearchParamsIterator(this, "values");
        },
        entries: function entries() {
          return new URLSearchParamsIterator(this, "entries");
        }
      }, { enumerable: true });
      defineBuiltIn(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: "entries" });
      defineBuiltIn(URLSearchParamsPrototype, "toString", function toString() {
        return getInternalParamsState(this).serialize();
      }, { enumerable: true });
      setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
      $({ global: true, constructor: true, forced: !USE_NATIVE_URL }, {
        URLSearchParams: URLSearchParamsConstructor
      });
      if (!USE_NATIVE_URL && isCallable(Headers)) {
        headersHas = uncurryThis(HeadersPrototype.has);
        headersSet = uncurryThis(HeadersPrototype.set);
        wrapRequestOptions = function(init) {
          if (isObject(init)) {
            var body = init.body;
            var headers;
            if (classof(body) === URL_SEARCH_PARAMS) {
              headers = init.headers ? new Headers(init.headers) : new Headers();
              if (!headersHas(headers, "content-type")) {
                headersSet(headers, "content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
              return create(init, {
                body: createPropertyDescriptor(0, $toString(body)),
                headers: createPropertyDescriptor(0, headers)
              });
            }
          }
          return init;
        };
        if (isCallable(nativeFetch)) {
          $({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, {
            fetch: function fetch2(input) {
              return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
            }
          });
        }
        if (isCallable(NativeRequest)) {
          RequestConstructor = function Request(input) {
            anInstance(this, RequestPrototype);
            return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          };
          RequestPrototype.constructor = RequestConstructor;
          RequestConstructor.prototype = RequestPrototype;
          $({ global: true, constructor: true, dontCallGetSet: true, forced: true }, {
            Request: RequestConstructor
          });
        }
      }
      var headersHas;
      var headersSet;
      var wrapRequestOptions;
      var RequestConstructor;
      module.exports = {
        URLSearchParams: URLSearchParamsConstructor,
        getState: getInternalParamsState
      };
    }
  });

  // node_modules/core-js-pure/modules/web.url.constructor.js
  var require_web_url_constructor = __commonJS({
    "node_modules/core-js-pure/modules/web.url.constructor.js": function() {
      "use strict";
      require_es_string_iterator();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var USE_NATIVE_URL = require_url_constructor_detection();
      var global2 = require_global();
      var bind = require_function_bind_context();
      var uncurryThis = require_function_uncurry_this();
      var defineBuiltIn = require_define_built_in();
      var defineBuiltInAccessor = require_define_built_in_accessor();
      var anInstance = require_an_instance();
      var hasOwn = require_has_own_property();
      var assign = require_object_assign2();
      var arrayFrom = require_array_from();
      var arraySlice = require_array_slice_simple();
      var codeAt = require_string_multibyte().codeAt;
      var toASCII = require_string_punycode_to_ascii();
      var $toString = require_to_string();
      var setToStringTag = require_set_to_string_tag();
      var validateArgumentsLength = require_validate_arguments_length2();
      var URLSearchParamsModule = require_web_url_search_params_constructor();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var getInternalURLState = InternalStateModule.getterFor("URL");
      var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
      var getInternalSearchParamsState = URLSearchParamsModule.getState;
      var NativeURL = global2.URL;
      var TypeError2 = global2.TypeError;
      var parseInt = global2.parseInt;
      var floor = Math.floor;
      var pow = Math.pow;
      var charAt = uncurryThis("".charAt);
      var exec = uncurryThis(/./.exec);
      var join = uncurryThis([].join);
      var numberToString = uncurryThis(1 .toString);
      var pop = uncurryThis([].pop);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var shift = uncurryThis([].shift);
      var split = uncurryThis("".split);
      var stringSlice = uncurryThis("".slice);
      var toLowerCase = uncurryThis("".toLowerCase);
      var unshift = uncurryThis([].unshift);
      var INVALID_AUTHORITY = "Invalid authority";
      var INVALID_SCHEME = "Invalid scheme";
      var INVALID_HOST = "Invalid host";
      var INVALID_PORT = "Invalid port";
      var ALPHA = /[a-z]/i;
      var ALPHANUMERIC = /[\d+-.a-z]/i;
      var DIGIT = /\d/;
      var HEX_START = /^0x/i;
      var OCT = /^[0-7]+$/;
      var DEC = /^\d+$/;
      var HEX = /^[\da-f]+$/i;
      var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
      var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
      var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
      var TAB_AND_NEW_LINE = /[\t\n\r]/g;
      var EOF;
      var parseIPv4 = function(input) {
        var parts = split(input, ".");
        var partsLength, numbers, index, part, radix, number, ipv4;
        if (parts.length && parts[parts.length - 1] == "") {
          parts.length--;
        }
        partsLength = parts.length;
        if (partsLength > 4)
          return input;
        numbers = [];
        for (index = 0; index < partsLength; index++) {
          part = parts[index];
          if (part == "")
            return input;
          radix = 10;
          if (part.length > 1 && charAt(part, 0) == "0") {
            radix = exec(HEX_START, part) ? 16 : 8;
            part = stringSlice(part, radix == 8 ? 1 : 2);
          }
          if (part === "") {
            number = 0;
          } else {
            if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part))
              return input;
            number = parseInt(part, radix);
          }
          push(numbers, number);
        }
        for (index = 0; index < partsLength; index++) {
          number = numbers[index];
          if (index == partsLength - 1) {
            if (number >= pow(256, 5 - partsLength))
              return null;
          } else if (number > 255)
            return null;
        }
        ipv4 = pop(numbers);
        for (index = 0; index < numbers.length; index++) {
          ipv4 += numbers[index] * pow(256, 3 - index);
        }
        return ipv4;
      };
      var parseIPv6 = function(input) {
        var address = [0, 0, 0, 0, 0, 0, 0, 0];
        var pieceIndex = 0;
        var compress = null;
        var pointer = 0;
        var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
        var chr = function() {
          return charAt(input, pointer);
        };
        if (chr() == ":") {
          if (charAt(input, 1) != ":")
            return;
          pointer += 2;
          pieceIndex++;
          compress = pieceIndex;
        }
        while (chr()) {
          if (pieceIndex == 8)
            return;
          if (chr() == ":") {
            if (compress !== null)
              return;
            pointer++;
            pieceIndex++;
            compress = pieceIndex;
            continue;
          }
          value = length = 0;
          while (length < 4 && exec(HEX, chr())) {
            value = value * 16 + parseInt(chr(), 16);
            pointer++;
            length++;
          }
          if (chr() == ".") {
            if (length == 0)
              return;
            pointer -= length;
            if (pieceIndex > 6)
              return;
            numbersSeen = 0;
            while (chr()) {
              ipv4Piece = null;
              if (numbersSeen > 0) {
                if (chr() == "." && numbersSeen < 4)
                  pointer++;
                else
                  return;
              }
              if (!exec(DIGIT, chr()))
                return;
              while (exec(DIGIT, chr())) {
                number = parseInt(chr(), 10);
                if (ipv4Piece === null)
                  ipv4Piece = number;
                else if (ipv4Piece == 0)
                  return;
                else
                  ipv4Piece = ipv4Piece * 10 + number;
                if (ipv4Piece > 255)
                  return;
                pointer++;
              }
              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              numbersSeen++;
              if (numbersSeen == 2 || numbersSeen == 4)
                pieceIndex++;
            }
            if (numbersSeen != 4)
              return;
            break;
          } else if (chr() == ":") {
            pointer++;
            if (!chr())
              return;
          } else if (chr())
            return;
          address[pieceIndex++] = value;
        }
        if (compress !== null) {
          swaps = pieceIndex - compress;
          pieceIndex = 7;
          while (pieceIndex != 0 && swaps > 0) {
            swap = address[pieceIndex];
            address[pieceIndex--] = address[compress + swaps - 1];
            address[compress + --swaps] = swap;
          }
        } else if (pieceIndex != 8)
          return;
        return address;
      };
      var findLongestZeroSequence = function(ipv6) {
        var maxIndex = null;
        var maxLength = 1;
        var currStart = null;
        var currLength = 0;
        var index = 0;
        for (; index < 8; index++) {
          if (ipv6[index] !== 0) {
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }
            currStart = null;
            currLength = 0;
          } else {
            if (currStart === null)
              currStart = index;
            ++currLength;
          }
        }
        if (currLength > maxLength) {
          maxIndex = currStart;
          maxLength = currLength;
        }
        return maxIndex;
      };
      var serializeHost = function(host) {
        var result, index, compress, ignore0;
        if (typeof host == "number") {
          result = [];
          for (index = 0; index < 4; index++) {
            unshift(result, host % 256);
            host = floor(host / 256);
          }
          return join(result, ".");
        } else if (typeof host == "object") {
          result = "";
          compress = findLongestZeroSequence(host);
          for (index = 0; index < 8; index++) {
            if (ignore0 && host[index] === 0)
              continue;
            if (ignore0)
              ignore0 = false;
            if (compress === index) {
              result += index ? ":" : "::";
              ignore0 = true;
            } else {
              result += numberToString(host[index], 16);
              if (index < 7)
                result += ":";
            }
          }
          return "[" + result + "]";
        }
        return host;
      };
      var C0ControlPercentEncodeSet = {};
      var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
        " ": 1,
        '"': 1,
        "<": 1,
        ">": 1,
        "`": 1
      });
      var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
        "#": 1,
        "?": 1,
        "{": 1,
        "}": 1
      });
      var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
        "/": 1,
        ":": 1,
        ";": 1,
        "=": 1,
        "@": 1,
        "[": 1,
        "\\": 1,
        "]": 1,
        "^": 1,
        "|": 1
      });
      var percentEncode = function(chr, set) {
        var code = codeAt(chr, 0);
        return code > 32 && code < 127 && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
      };
      var specialSchemes = {
        ftp: 21,
        file: null,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };
      var isWindowsDriveLetter = function(string, normalized) {
        var second;
        return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ":" || !normalized && second == "|");
      };
      var startsWithWindowsDriveLetter = function(string) {
        var third;
        return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || ((third = charAt(string, 2)) === "/" || third === "\\" || third === "?" || third === "#"));
      };
      var isSingleDot = function(segment) {
        return segment === "." || toLowerCase(segment) === "%2e";
      };
      var isDoubleDot = function(segment) {
        segment = toLowerCase(segment);
        return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
      };
      var SCHEME_START = {};
      var SCHEME = {};
      var NO_SCHEME = {};
      var SPECIAL_RELATIVE_OR_AUTHORITY = {};
      var PATH_OR_AUTHORITY = {};
      var RELATIVE = {};
      var RELATIVE_SLASH = {};
      var SPECIAL_AUTHORITY_SLASHES = {};
      var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
      var AUTHORITY = {};
      var HOST = {};
      var HOSTNAME = {};
      var PORT = {};
      var FILE = {};
      var FILE_SLASH = {};
      var FILE_HOST = {};
      var PATH_START = {};
      var PATH = {};
      var CANNOT_BE_A_BASE_URL_PATH = {};
      var QUERY = {};
      var FRAGMENT = {};
      var URLState = function(url, isBase, base) {
        var urlString = $toString(url);
        var baseState, failure, searchParams;
        if (isBase) {
          failure = this.parse(urlString);
          if (failure)
            throw TypeError2(failure);
          this.searchParams = null;
        } else {
          if (base !== void 0)
            baseState = new URLState(base, true);
          failure = this.parse(urlString, null, baseState);
          if (failure)
            throw TypeError2(failure);
          searchParams = getInternalSearchParamsState(new URLSearchParams2());
          searchParams.bindURL(this);
          this.searchParams = searchParams;
        }
      };
      URLState.prototype = {
        type: "URL",
        parse: function(input, stateOverride, base) {
          var url = this;
          var state = stateOverride || SCHEME_START;
          var pointer = 0;
          var buffer = "";
          var seenAt = false;
          var seenBracket = false;
          var seenPasswordToken = false;
          var codePoints, chr, bufferCodePoints, failure;
          input = $toString(input);
          if (!stateOverride) {
            url.scheme = "";
            url.username = "";
            url.password = "";
            url.host = null;
            url.port = null;
            url.path = [];
            url.query = null;
            url.fragment = null;
            url.cannotBeABaseURL = false;
            input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
          }
          input = replace(input, TAB_AND_NEW_LINE, "");
          codePoints = arrayFrom(input);
          while (pointer <= codePoints.length) {
            chr = codePoints[pointer];
            switch (state) {
              case SCHEME_START:
                if (chr && exec(ALPHA, chr)) {
                  buffer += toLowerCase(chr);
                  state = SCHEME;
                } else if (!stateOverride) {
                  state = NO_SCHEME;
                  continue;
                } else
                  return INVALID_SCHEME;
                break;
              case SCHEME:
                if (chr && (exec(ALPHANUMERIC, chr) || chr == "+" || chr == "-" || chr == ".")) {
                  buffer += toLowerCase(chr);
                } else if (chr == ":") {
                  if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == "file" && (url.includesCredentials() || url.port !== null) || url.scheme == "file" && !url.host))
                    return;
                  url.scheme = buffer;
                  if (stateOverride) {
                    if (url.isSpecial() && specialSchemes[url.scheme] == url.port)
                      url.port = null;
                    return;
                  }
                  buffer = "";
                  if (url.scheme == "file") {
                    state = FILE;
                  } else if (url.isSpecial() && base && base.scheme == url.scheme) {
                    state = SPECIAL_RELATIVE_OR_AUTHORITY;
                  } else if (url.isSpecial()) {
                    state = SPECIAL_AUTHORITY_SLASHES;
                  } else if (codePoints[pointer + 1] == "/") {
                    state = PATH_OR_AUTHORITY;
                    pointer++;
                  } else {
                    url.cannotBeABaseURL = true;
                    push(url.path, "");
                    state = CANNOT_BE_A_BASE_URL_PATH;
                  }
                } else if (!stateOverride) {
                  buffer = "";
                  state = NO_SCHEME;
                  pointer = 0;
                  continue;
                } else
                  return INVALID_SCHEME;
                break;
              case NO_SCHEME:
                if (!base || base.cannotBeABaseURL && chr != "#")
                  return INVALID_SCHEME;
                if (base.cannotBeABaseURL && chr == "#") {
                  url.scheme = base.scheme;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  url.cannotBeABaseURL = true;
                  state = FRAGMENT;
                  break;
                }
                state = base.scheme == "file" ? FILE : RELATIVE;
                continue;
              case SPECIAL_RELATIVE_OR_AUTHORITY:
                if (chr == "/" && codePoints[pointer + 1] == "/") {
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  pointer++;
                } else {
                  state = RELATIVE;
                  continue;
                }
                break;
              case PATH_OR_AUTHORITY:
                if (chr == "/") {
                  state = AUTHORITY;
                  break;
                } else {
                  state = PATH;
                  continue;
                }
              case RELATIVE:
                url.scheme = base.scheme;
                if (chr == EOF) {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                } else if (chr == "/" || chr == "\\" && url.isSpecial()) {
                  state = RELATIVE_SLASH;
                } else if (chr == "?") {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice(base.path);
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  state = FRAGMENT;
                } else {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice(base.path);
                  url.path.length--;
                  state = PATH;
                  continue;
                }
                break;
              case RELATIVE_SLASH:
                if (url.isSpecial() && (chr == "/" || chr == "\\")) {
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                } else if (chr == "/") {
                  state = AUTHORITY;
                } else {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  state = PATH;
                  continue;
                }
                break;
              case SPECIAL_AUTHORITY_SLASHES:
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                if (chr != "/" || charAt(buffer, pointer + 1) != "/")
                  continue;
                pointer++;
                break;
              case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                if (chr != "/" && chr != "\\") {
                  state = AUTHORITY;
                  continue;
                }
                break;
              case AUTHORITY:
                if (chr == "@") {
                  if (seenAt)
                    buffer = "%40" + buffer;
                  seenAt = true;
                  bufferCodePoints = arrayFrom(buffer);
                  for (var i = 0; i < bufferCodePoints.length; i++) {
                    var codePoint = bufferCodePoints[i];
                    if (codePoint == ":" && !seenPasswordToken) {
                      seenPasswordToken = true;
                      continue;
                    }
                    var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                    if (seenPasswordToken)
                      url.password += encodedCodePoints;
                    else
                      url.username += encodedCodePoints;
                  }
                  buffer = "";
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                  if (seenAt && buffer == "")
                    return INVALID_AUTHORITY;
                  pointer -= arrayFrom(buffer).length + 1;
                  buffer = "";
                  state = HOST;
                } else
                  buffer += chr;
                break;
              case HOST:
              case HOSTNAME:
                if (stateOverride && url.scheme == "file") {
                  state = FILE_HOST;
                  continue;
                } else if (chr == ":" && !seenBracket) {
                  if (buffer == "")
                    return INVALID_HOST;
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  buffer = "";
                  state = PORT;
                  if (stateOverride == HOSTNAME)
                    return;
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                  if (url.isSpecial() && buffer == "")
                    return INVALID_HOST;
                  if (stateOverride && buffer == "" && (url.includesCredentials() || url.port !== null))
                    return;
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  buffer = "";
                  state = PATH_START;
                  if (stateOverride)
                    return;
                  continue;
                } else {
                  if (chr == "[")
                    seenBracket = true;
                  else if (chr == "]")
                    seenBracket = false;
                  buffer += chr;
                }
                break;
              case PORT:
                if (exec(DIGIT, chr)) {
                  buffer += chr;
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial() || stateOverride) {
                  if (buffer != "") {
                    var port = parseInt(buffer, 10);
                    if (port > 65535)
                      return INVALID_PORT;
                    url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                    buffer = "";
                  }
                  if (stateOverride)
                    return;
                  state = PATH_START;
                  continue;
                } else
                  return INVALID_PORT;
                break;
              case FILE:
                url.scheme = "file";
                if (chr == "/" || chr == "\\")
                  state = FILE_SLASH;
                else if (base && base.scheme == "file") {
                  if (chr == EOF) {
                    url.host = base.host;
                    url.path = arraySlice(base.path);
                    url.query = base.query;
                  } else if (chr == "?") {
                    url.host = base.host;
                    url.path = arraySlice(base.path);
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.host = base.host;
                    url.path = arraySlice(base.path);
                    url.query = base.query;
                    url.fragment = "";
                    state = FRAGMENT;
                  } else {
                    if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                      url.host = base.host;
                      url.path = arraySlice(base.path);
                      url.shortenPath();
                    }
                    state = PATH;
                    continue;
                  }
                } else {
                  state = PATH;
                  continue;
                }
                break;
              case FILE_SLASH:
                if (chr == "/" || chr == "\\") {
                  state = FILE_HOST;
                  break;
                }
                if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ""))) {
                  if (isWindowsDriveLetter(base.path[0], true))
                    push(url.path, base.path[0]);
                  else
                    url.host = base.host;
                }
                state = PATH;
                continue;
              case FILE_HOST:
                if (chr == EOF || chr == "/" || chr == "\\" || chr == "?" || chr == "#") {
                  if (!stateOverride && isWindowsDriveLetter(buffer)) {
                    state = PATH;
                  } else if (buffer == "") {
                    url.host = "";
                    if (stateOverride)
                      return;
                    state = PATH_START;
                  } else {
                    failure = url.parseHost(buffer);
                    if (failure)
                      return failure;
                    if (url.host == "localhost")
                      url.host = "";
                    if (stateOverride)
                      return;
                    buffer = "";
                    state = PATH_START;
                  }
                  continue;
                } else
                  buffer += chr;
                break;
              case PATH_START:
                if (url.isSpecial()) {
                  state = PATH;
                  if (chr != "/" && chr != "\\")
                    continue;
                } else if (!stateOverride && chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (!stateOverride && chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  state = PATH;
                  if (chr != "/")
                    continue;
                }
                break;
              case PATH:
                if (chr == EOF || chr == "/" || chr == "\\" && url.isSpecial() || !stateOverride && (chr == "?" || chr == "#")) {
                  if (isDoubleDot(buffer)) {
                    url.shortenPath();
                    if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                      push(url.path, "");
                    }
                  } else if (isSingleDot(buffer)) {
                    if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                      push(url.path, "");
                    }
                  } else {
                    if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                      if (url.host)
                        url.host = "";
                      buffer = charAt(buffer, 0) + ":";
                    }
                    push(url.path, buffer);
                  }
                  buffer = "";
                  if (url.scheme == "file" && (chr == EOF || chr == "?" || chr == "#")) {
                    while (url.path.length > 1 && url.path[0] === "") {
                      shift(url.path);
                    }
                  }
                  if (chr == "?") {
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.fragment = "";
                    state = FRAGMENT;
                  }
                } else {
                  buffer += percentEncode(chr, pathPercentEncodeSet);
                }
                break;
              case CANNOT_BE_A_BASE_URL_PATH:
                if (chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
                }
                break;
              case QUERY:
                if (!stateOverride && chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  if (chr == "'" && url.isSpecial())
                    url.query += "%27";
                  else if (chr == "#")
                    url.query += "%23";
                  else
                    url.query += percentEncode(chr, C0ControlPercentEncodeSet);
                }
                break;
              case FRAGMENT:
                if (chr != EOF)
                  url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
                break;
            }
            pointer++;
          }
        },
        parseHost: function(input) {
          var result, codePoints, index;
          if (charAt(input, 0) == "[") {
            if (charAt(input, input.length - 1) != "]")
              return INVALID_HOST;
            result = parseIPv6(stringSlice(input, 1, -1));
            if (!result)
              return INVALID_HOST;
            this.host = result;
          } else if (!this.isSpecial()) {
            if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
              return INVALID_HOST;
            result = "";
            codePoints = arrayFrom(input);
            for (index = 0; index < codePoints.length; index++) {
              result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
            }
            this.host = result;
          } else {
            input = toASCII(input);
            if (exec(FORBIDDEN_HOST_CODE_POINT, input))
              return INVALID_HOST;
            result = parseIPv4(input);
            if (result === null)
              return INVALID_HOST;
            this.host = result;
          }
        },
        cannotHaveUsernamePasswordPort: function() {
          return !this.host || this.cannotBeABaseURL || this.scheme == "file";
        },
        includesCredentials: function() {
          return this.username != "" || this.password != "";
        },
        isSpecial: function() {
          return hasOwn(specialSchemes, this.scheme);
        },
        shortenPath: function() {
          var path = this.path;
          var pathSize = path.length;
          if (pathSize && (this.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
            path.length--;
          }
        },
        serialize: function() {
          var url = this;
          var scheme = url.scheme;
          var username = url.username;
          var password = url.password;
          var host = url.host;
          var port = url.port;
          var path = url.path;
          var query = url.query;
          var fragment = url.fragment;
          var output = scheme + ":";
          if (host !== null) {
            output += "//";
            if (url.includesCredentials()) {
              output += username + (password ? ":" + password : "") + "@";
            }
            output += serializeHost(host);
            if (port !== null)
              output += ":" + port;
          } else if (scheme == "file")
            output += "//";
          output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
          if (query !== null)
            output += "?" + query;
          if (fragment !== null)
            output += "#" + fragment;
          return output;
        },
        setHref: function(href) {
          var failure = this.parse(href);
          if (failure)
            throw TypeError2(failure);
          this.searchParams.update();
        },
        getOrigin: function() {
          var scheme = this.scheme;
          var port = this.port;
          if (scheme == "blob")
            try {
              return new URLConstructor(scheme.path[0]).origin;
            } catch (error) {
              return "null";
            }
          if (scheme == "file" || !this.isSpecial())
            return "null";
          return scheme + "://" + serializeHost(this.host) + (port !== null ? ":" + port : "");
        },
        getProtocol: function() {
          return this.scheme + ":";
        },
        setProtocol: function(protocol) {
          this.parse($toString(protocol) + ":", SCHEME_START);
        },
        getUsername: function() {
          return this.username;
        },
        setUsername: function(username) {
          var codePoints = arrayFrom($toString(username));
          if (this.cannotHaveUsernamePasswordPort())
            return;
          this.username = "";
          for (var i = 0; i < codePoints.length; i++) {
            this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
          }
        },
        getPassword: function() {
          return this.password;
        },
        setPassword: function(password) {
          var codePoints = arrayFrom($toString(password));
          if (this.cannotHaveUsernamePasswordPort())
            return;
          this.password = "";
          for (var i = 0; i < codePoints.length; i++) {
            this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
          }
        },
        getHost: function() {
          var host = this.host;
          var port = this.port;
          return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
        },
        setHost: function(host) {
          if (this.cannotBeABaseURL)
            return;
          this.parse(host, HOST);
        },
        getHostname: function() {
          var host = this.host;
          return host === null ? "" : serializeHost(host);
        },
        setHostname: function(hostname) {
          if (this.cannotBeABaseURL)
            return;
          this.parse(hostname, HOSTNAME);
        },
        getPort: function() {
          var port = this.port;
          return port === null ? "" : $toString(port);
        },
        setPort: function(port) {
          if (this.cannotHaveUsernamePasswordPort())
            return;
          port = $toString(port);
          if (port == "")
            this.port = null;
          else
            this.parse(port, PORT);
        },
        getPathname: function() {
          var path = this.path;
          return this.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
        },
        setPathname: function(pathname) {
          if (this.cannotBeABaseURL)
            return;
          this.path = [];
          this.parse(pathname, PATH_START);
        },
        getSearch: function() {
          var query = this.query;
          return query ? "?" + query : "";
        },
        setSearch: function(search) {
          search = $toString(search);
          if (search == "") {
            this.query = null;
          } else {
            if (charAt(search, 0) == "?")
              search = stringSlice(search, 1);
            this.query = "";
            this.parse(search, QUERY);
          }
          this.searchParams.update();
        },
        getSearchParams: function() {
          return this.searchParams.facade;
        },
        getHash: function() {
          var fragment = this.fragment;
          return fragment ? "#" + fragment : "";
        },
        setHash: function(hash) {
          hash = $toString(hash);
          if (hash == "") {
            this.fragment = null;
            return;
          }
          if (charAt(hash, 0) == "#")
            hash = stringSlice(hash, 1);
          this.fragment = "";
          this.parse(hash, FRAGMENT);
        },
        update: function() {
          this.query = this.searchParams.serialize() || null;
        }
      };
      var URLConstructor = function URL2(url) {
        var that = anInstance(this, URLPrototype);
        var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : void 0;
        var state = setInternalState(that, new URLState(url, false, base));
        if (!DESCRIPTORS) {
          that.href = state.serialize();
          that.origin = state.getOrigin();
          that.protocol = state.getProtocol();
          that.username = state.getUsername();
          that.password = state.getPassword();
          that.host = state.getHost();
          that.hostname = state.getHostname();
          that.port = state.getPort();
          that.pathname = state.getPathname();
          that.search = state.getSearch();
          that.searchParams = state.getSearchParams();
          that.hash = state.getHash();
        }
      };
      var URLPrototype = URLConstructor.prototype;
      var accessorDescriptor = function(getter, setter) {
        return {
          get: function() {
            return getInternalURLState(this)[getter]();
          },
          set: setter && function(value) {
            return getInternalURLState(this)[setter](value);
          },
          configurable: true,
          enumerable: true
        };
      };
      if (DESCRIPTORS) {
        defineBuiltInAccessor(URLPrototype, "href", accessorDescriptor("serialize", "setHref"));
        defineBuiltInAccessor(URLPrototype, "origin", accessorDescriptor("getOrigin"));
        defineBuiltInAccessor(URLPrototype, "protocol", accessorDescriptor("getProtocol", "setProtocol"));
        defineBuiltInAccessor(URLPrototype, "username", accessorDescriptor("getUsername", "setUsername"));
        defineBuiltInAccessor(URLPrototype, "password", accessorDescriptor("getPassword", "setPassword"));
        defineBuiltInAccessor(URLPrototype, "host", accessorDescriptor("getHost", "setHost"));
        defineBuiltInAccessor(URLPrototype, "hostname", accessorDescriptor("getHostname", "setHostname"));
        defineBuiltInAccessor(URLPrototype, "port", accessorDescriptor("getPort", "setPort"));
        defineBuiltInAccessor(URLPrototype, "pathname", accessorDescriptor("getPathname", "setPathname"));
        defineBuiltInAccessor(URLPrototype, "search", accessorDescriptor("getSearch", "setSearch"));
        defineBuiltInAccessor(URLPrototype, "searchParams", accessorDescriptor("getSearchParams"));
        defineBuiltInAccessor(URLPrototype, "hash", accessorDescriptor("getHash", "setHash"));
      }
      defineBuiltIn(URLPrototype, "toJSON", function toJSON() {
        return getInternalURLState(this).serialize();
      }, { enumerable: true });
      defineBuiltIn(URLPrototype, "toString", function toString() {
        return getInternalURLState(this).serialize();
      }, { enumerable: true });
      if (NativeURL) {
        nativeCreateObjectURL = NativeURL.createObjectURL;
        nativeRevokeObjectURL = NativeURL.revokeObjectURL;
        if (nativeCreateObjectURL)
          defineBuiltIn(URLConstructor, "createObjectURL", bind(nativeCreateObjectURL, NativeURL));
        if (nativeRevokeObjectURL)
          defineBuiltIn(URLConstructor, "revokeObjectURL", bind(nativeRevokeObjectURL, NativeURL));
      }
      var nativeCreateObjectURL;
      var nativeRevokeObjectURL;
      setToStringTag(URLConstructor, "URL");
      $({ global: true, constructor: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
        URL: URLConstructor
      });
    }
  });

  // node_modules/core-js-pure/modules/web.url.js
  var require_web_url = __commonJS({
    "node_modules/core-js-pure/modules/web.url.js": function() {
      require_web_url_constructor();
    }
  });

  // node_modules/core-js-pure/modules/web.url.to-json.js
  var require_web_url_to_json = __commonJS({
    "node_modules/core-js-pure/modules/web.url.to-json.js": function() {
    }
  });

  // node_modules/core-js-pure/modules/web.url-search-params.js
  var require_web_url_search_params = __commonJS({
    "node_modules/core-js-pure/modules/web.url-search-params.js": function() {
      require_web_url_search_params_constructor();
    }
  });

  // node_modules/core-js-pure/web/url.js
  var require_url = __commonJS({
    "node_modules/core-js-pure/web/url.js": function(exports, module) {
      require_web_url();
      require_web_url_to_json();
      require_web_url_search_params();
      var path = require_path();
      module.exports = path.URL;
    }
  });

  // node_modules/core-js-pure/stable/url/index.js
  var require_url2 = __commonJS({
    "node_modules/core-js-pure/stable/url/index.js": function(exports, module) {
      var parent = require_url();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/url.js
  var require_url3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/url.js": function(exports, module) {
      module.exports = require_url2();
    }
  });

  // lib/common/util/isLocalhost.js
  var require_isLocalhost = __commonJS({
    "lib/common/util/isLocalhost.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = isLocalhost;
      function isLocalhost(host) {
        return /(^|\.)localho[s\u017F]t(:|$)/i.test(host) || /^(127\.0\.0\.1|::1)(:|$)/i.test(host);
      }
    }
  });

  // lib/common/util/getDomainURL.js
  var require_getDomainURL = __commonJS({
    "lib/common/util/getDomainURL.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = getDomainURL;
      var _url = _interopRequireDefault2(require_url3());
      var _isLocalhost = _interopRequireDefault2(require_isLocalhost());
      function getDomainURL(domainHost, protocol) {
        if (domainHost) {
          try {
            if ((0, _isLocalhost["default"])(domainHost) || protocol === "app service extension insecure") {
              return new _url["default"]("http://".concat(domainHost, "/.bot/v3/directline"));
            } else if (protocol === "app service extension") {
              return new _url["default"]("https://".concat(domainHost, "/.bot/v3/directline"));
            }
          } catch (err) {
          }
        }
        return new _url["default"]("https://directline.botframework.com/v3/directline");
      }
    }
  });

  // lib/landing/data/hooks/useDirectLineDomainURL.js
  var require_useDirectLineDomainURL = __commonJS({
    "lib/landing/data/hooks/useDirectLineDomainURL.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineDomainURL;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _reactRedux2 = require_lib();
      var _getDomainURL = _interopRequireDefault2(require_getDomainURL());
      function useDirectLineDomainURL() {
        var _useSelector = (0, _reactRedux2.useSelector)(function(_ref) {
          var domainHost2 = _ref.directLineCredentials.domainHost, protocol2 = _ref.protocol;
          return [domainHost2 || "directline.botframework.com", protocol2];
        }), _useSelector2 = (0, _slicedToArray2["default"])(_useSelector, 2), domainHost = _useSelector2[0], protocol = _useSelector2[1];
        return [(0, _getDomainURL["default"])(domainHost, protocol)];
      }
    }
  });

  // lib/landing/data/action/hideTranscriptDialog.js
  var require_hideTranscriptDialog = __commonJS({
    "lib/landing/data/action/hideTranscriptDialog.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.HIDE_TRANSCRIPT_DIALOG = void 0;
      exports["default"] = hideTranscriptDialog;
      var HIDE_TRANSCRIPT_DIALOG = "HIDE_TRANSCRIPT_DIALOG";
      exports.HIDE_TRANSCRIPT_DIALOG = HIDE_TRANSCRIPT_DIALOG;
      function hideTranscriptDialog() {
        return {
          type: HIDE_TRANSCRIPT_DIALOG
        };
      }
    }
  });

  // lib/landing/data/action/showTranscriptDialog.js
  var require_showTranscriptDialog = __commonJS({
    "lib/landing/data/action/showTranscriptDialog.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SHOW_TRANSCRIPT_DIALOG = void 0;
      exports["default"] = showTranscriptDialog;
      var SHOW_TRANSCRIPT_DIALOG = "SHOW_TRANSCRIPT_DIALOG";
      exports.SHOW_TRANSCRIPT_DIALOG = SHOW_TRANSCRIPT_DIALOG;
      function showTranscriptDialog() {
        return {
          type: SHOW_TRANSCRIPT_DIALOG
        };
      }
    }
  });

  // lib/landing/data/hooks/useTranscriptDialogVisible.js
  var require_useTranscriptDialogVisible = __commonJS({
    "lib/landing/data/hooks/useTranscriptDialogVisible.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useTranscriptDialogVisible;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _hideTranscriptDialog = _interopRequireDefault2(require_hideTranscriptDialog());
      var _showTranscriptDialog = _interopRequireDefault2(require_showTranscriptDialog());
      function useTranscriptDialogVisible() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var visible = _ref.transcript.visible;
          return !!visible;
        }), (0, _react2.useCallback)(function(visible) {
          return dispatch(visible ? (0, _showTranscriptDialog["default"])() : (0, _hideTranscriptDialog["default"])());
        }, [dispatch])];
      }
    }
  });

  // lib/landing/ui/Protocol.js
  var require_Protocol = __commonJS({
    "lib/landing/ui/Protocol.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _emotion = require_emotion_cjs();
      var _classnames = _interopRequireDefault2(require_classnames());
      var _react2 = _interopRequireWildcard2(require_react());
      var _Row = _interopRequireDefault2(require_Row());
      var _useDirectLineAppServiceExtensionErrorReason = _interopRequireDefault2(require_useDirectLineAppServiceExtensionErrorReason());
      var _useDirectLineAppServiceExtensionResponse = _interopRequireDefault2(require_useDirectLineAppServiceExtensionResponse());
      var _useDirectLineAppServiceExtensionStatus = _interopRequireDefault2(require_useDirectLineAppServiceExtensionStatus());
      var _useDirectLineDomainHost = _interopRequireDefault2(require_useDirectLineDomainHost());
      var _useDirectLineDomainURL = _interopRequireDefault2(require_useDirectLineDomainURL());
      var _useProtocolAppServiceExtension = _interopRequireDefault2(require_useProtocolAppServiceExtension());
      var _useProtocolAppServiceExtensionInsecure = _interopRequireDefault2(require_useProtocolAppServiceExtensionInsecure());
      var _useProtocolDirectLineSpeech = _interopRequireDefault2(require_useProtocolDirectLineSpeech());
      var _useProtocolREST3 = _interopRequireDefault2(require_useProtocolREST());
      var _useProtocolTranscript = _interopRequireDefault2(require_useProtocolTranscript());
      var _useProtocolWebSocket3 = _interopRequireDefault2(require_useProtocolWebSocket());
      var _useTranscriptDialogVisible = _interopRequireDefault2(require_useTranscriptDialogVisible());
      var DOMAIN_SUFFIX = "/v3/directline";
      var DOMAIN_SUFFIX_FOR_APP_SERVICE_EXTENSION = "/.bot/v3/directline";
      var DOMAIN_CSS = (0, _emotion.css)({
        "&.domain": {
          fontSize: "80%",
          "& .domain__doppelganger, & .domain__input": {
            border: 0,
            fontFamily: "inherit",
            fontSize: "inherit",
            padding: 0
          },
          "& .domain__input": {
            backgroundColor: "#EEE",
            height: "100%",
            left: 0,
            position: "absolute",
            top: 0,
            width: "100%"
          },
          "& .domain__input-box": {
            margin: "1px 2px",
            position: "relative"
          },
          "& .domain__protocol-button": {
            appearance: "none",
            background: "transparent",
            border: 0,
            fontSize: "inherit",
            padding: 0
          }
        }
      });
      var APP_SERVICE_EXTENSION_CSS = (0, _emotion.css)({});
      var CHECKBOX_CSS = (0, _emotion.css)({
        margin: 0
      });
      var LABEL_CSS = (0, _emotion.css)({
        alignItems: "center",
        display: "flex"
      });
      var RED_CSS = (0, _emotion.css)({
        color: "Red"
      });
      var Protocol = function Protocol2() {
        var _useTranscriptDialogV = (0, _useTranscriptDialogVisible["default"])(), _useTranscriptDialogV2 = (0, _slicedToArray2["default"])(_useTranscriptDialogV, 2), setTranscriptDialogVisible = _useTranscriptDialogV2[1];
        var _useDirectLineAppServ = (0, _useDirectLineAppServiceExtensionErrorReason["default"])(), _useDirectLineAppServ2 = (0, _slicedToArray2["default"])(_useDirectLineAppServ, 1), directLineAppServiceExtensionErrorReason = _useDirectLineAppServ2[0];
        var _useDirectLineAppServ3 = (0, _useDirectLineAppServiceExtensionResponse["default"])(), _useDirectLineAppServ4 = (0, _slicedToArray2["default"])(_useDirectLineAppServ3, 1), directLineAppServiceExtensionResponse = _useDirectLineAppServ4[0];
        var _useDirectLineAppServ5 = (0, _useDirectLineAppServiceExtensionStatus["default"])(), _useDirectLineAppServ6 = (0, _slicedToArray2["default"])(_useDirectLineAppServ5, 1), directLineAppServiceExtensionStatus = _useDirectLineAppServ6[0];
        var _useDirectLineDomainH = (0, _useDirectLineDomainHost["default"])(""), _useDirectLineDomainH2 = (0, _slicedToArray2["default"])(_useDirectLineDomainH, 2), directLineDomainHost = _useDirectLineDomainH2[0], setDirectLineDomainHost = _useDirectLineDomainH2[1];
        var _useDirectLineDomainU = (0, _useDirectLineDomainURL["default"])(), _useDirectLineDomainU2 = (0, _slicedToArray2["default"])(_useDirectLineDomainU, 1), directLineDomainURL = _useDirectLineDomainU2[0];
        var _useProtocolAppServic = (0, _useProtocolAppServiceExtension["default"])(), _useProtocolAppServic2 = (0, _slicedToArray2["default"])(_useProtocolAppServic, 2), protocolAppServiceExtension = _useProtocolAppServic2[0], setProtocolAppServiceExtension = _useProtocolAppServic2[1];
        var _useProtocolAppServic3 = (0, _useProtocolAppServiceExtensionInsecure["default"])(), _useProtocolAppServic4 = (0, _slicedToArray2["default"])(_useProtocolAppServic3, 2), protocolAppServiceExtensionInsecure = _useProtocolAppServic4[0], setProtocolAppServiceExtensionInsecure = _useProtocolAppServic4[1];
        var _useProtocolDirectLin = (0, _useProtocolDirectLineSpeech["default"])(), _useProtocolDirectLin2 = (0, _slicedToArray2["default"])(_useProtocolDirectLin, 2), protocolDirectLineSpeech = _useProtocolDirectLin2[0], setProtocolDirectLineSpeech = _useProtocolDirectLin2[1];
        var _useProtocolREST = (0, _useProtocolREST3["default"])(), _useProtocolREST2 = (0, _slicedToArray2["default"])(_useProtocolREST, 2), protocolREST = _useProtocolREST2[0], setProtocolREST = _useProtocolREST2[1];
        var _useProtocolTranscrip = (0, _useProtocolTranscript["default"])(), _useProtocolTranscrip2 = (0, _slicedToArray2["default"])(_useProtocolTranscrip, 2), protocolTranscript = _useProtocolTranscrip2[0], setProtocolTranscript = _useProtocolTranscrip2[1];
        var _useProtocolWebSocket = (0, _useProtocolWebSocket3["default"])(), _useProtocolWebSocket2 = (0, _slicedToArray2["default"])(_useProtocolWebSocket, 2), protocolWebSocket = _useProtocolWebSocket2[0], setProtocolWebSocket = _useProtocolWebSocket2[1];
        var protocolAppServiceExtensionFamily = protocolAppServiceExtension || protocolAppServiceExtensionInsecure;
        var handleDomainChange = (0, _react2.useCallback)(function(_ref) {
          var value = _ref.target.value;
          return setDirectLineDomainHost(value || "");
        }, [setDirectLineDomainHost]);
        var handleEditTranscriptClick = (0, _react2.useCallback)(function() {
          return setTranscriptDialogVisible(true);
        }, [setTranscriptDialogVisible]);
        var handleProtocolClick = (0, _react2.useCallback)(function() {
          if (protocolAppServiceExtension) {
            setProtocolAppServiceExtensionInsecure();
          } else if (protocolAppServiceExtensionInsecure) {
            setProtocolAppServiceExtension();
          }
        }, [protocolAppServiceExtension, protocolAppServiceExtensionInsecure, setProtocolAppServiceExtension, setProtocolAppServiceExtensionInsecure]);
        return /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: "Protocol",
          rowLabel: false
        }, /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("label", {
          className: LABEL_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          checked: protocolWebSocket,
          className: CHECKBOX_CSS,
          name: "protocol",
          onChange: setProtocolWebSocket,
          type: "radio"
        }), "\xA0 Direct Line via Web Socket")), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("label", {
          className: LABEL_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          checked: protocolREST,
          className: CHECKBOX_CSS,
          name: "protocol",
          onChange: setProtocolREST,
          type: "radio"
        }), "\xA0 Direct Line via REST short-polling"), protocolREST && /* @__PURE__ */ _react2["default"].createElement("small", {
          className: RED_CSS
        }, "This protocol is not recommended to use in production.")), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("label", {
          className: LABEL_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          checked: protocolDirectLineSpeech,
          className: CHECKBOX_CSS,
          name: "protocol",
          onChange: setProtocolDirectLineSpeech,
          type: "radio"
        }), "\xA0 Direct Line Speech"), protocolDirectLineSpeech && /* @__PURE__ */ _react2["default"].createElement("small", null, "This protocol is supported since version 4.7.0.")), /* @__PURE__ */ _react2["default"].createElement("div", {
          className: APP_SERVICE_EXTENSION_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("label", {
          className: LABEL_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          checked: protocolAppServiceExtension || protocolAppServiceExtensionInsecure,
          className: CHECKBOX_CSS,
          name: "protocol",
          onChange: setProtocolAppServiceExtension,
          type: "radio"
        }), "\xA0 Direct Line App Service Extension"), protocolAppServiceExtensionFamily && /* @__PURE__ */ _react2["default"].createElement(_react2.Fragment, null, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: (0, _classnames["default"])(DOMAIN_CSS + "", "domain")
        }, /* @__PURE__ */ _react2["default"].createElement("button", {
          className: "domain__protocol-button",
          onClick: handleProtocolClick
        }, directLineDomainURL.protocol, "//"), /* @__PURE__ */ _react2["default"].createElement("span", {
          className: "domain__input-box"
        }, /* @__PURE__ */ _react2["default"].createElement("nobr", {
          className: "domain__doppelganger"
        }, protocolAppServiceExtensionFamily ? directLineDomainHost : ""), /* @__PURE__ */ _react2["default"].createElement("input", {
          className: "domain__input",
          disabled: !protocolAppServiceExtensionFamily,
          onChange: handleDomainChange,
          required: protocolAppServiceExtensionFamily,
          type: "text",
          value: protocolAppServiceExtensionFamily ? directLineDomainHost : ""
        })), protocolAppServiceExtensionFamily ? DOMAIN_SUFFIX_FOR_APP_SERVICE_EXTENSION : DOMAIN_SUFFIX, /* @__PURE__ */ _react2["default"].createElement("span", {
          title: directLineAppServiceExtensionStatus === "error" ? directLineAppServiceExtensionErrorReason : directLineAppServiceExtensionStatus === "ready" ? (0, _stringify["default"])(directLineAppServiceExtensionResponse) : void 0
        }, " ", directLineAppServiceExtensionStatus === "error" ? "\u274C" : directLineAppServiceExtensionStatus === "ready" ? "\uD83D\uDFE2" : "\u231B")))), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("label", {
          className: LABEL_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          checked: protocolTranscript,
          className: CHECKBOX_CSS,
          name: "protocol",
          onChange: setProtocolTranscript,
          type: "radio"
        }), "\xA0 Load from transcript \xA0", /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !protocolTranscript,
          onClick: handleEditTranscriptClick,
          type: "button"
        }, "Edit"))));
      };
      var _default = Protocol;
      exports["default"] = _default;
    }
  });

  // node_modules/core-js-pure/modules/es.object.keys.js
  var require_es_object_keys = __commonJS({
    "node_modules/core-js-pure/modules/es.object.keys.js": function() {
      var $ = require_export();
      var toObject = require_to_object();
      var nativeKeys = require_object_keys();
      var fails = require_fails();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeKeys(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        }
      });
    }
  });

  // node_modules/core-js-pure/es/object/keys.js
  var require_keys = __commonJS({
    "node_modules/core-js-pure/es/object/keys.js": function(exports, module) {
      require_es_object_keys();
      var path = require_path();
      module.exports = path.Object.keys;
    }
  });

  // node_modules/core-js-pure/stable/object/keys.js
  var require_keys2 = __commonJS({
    "node_modules/core-js-pure/stable/object/keys.js": function(exports, module) {
      var parent = require_keys();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js
  var require_keys3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js": function(exports, module) {
      module.exports = require_keys2();
    }
  });

  // lib/landing/data/action/fetchSpeechAuthorizationToken.js
  var require_fetchSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/action/fetchSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.FETCH_SPEECH_AUTHORIZATION_TOKEN = void 0;
      exports["default"] = fetchSpeechAuthorizationToken;
      var FETCH_SPEECH_AUTHORIZATION_TOKEN = "FETCH_SPEECH_AUTHORIZATION_TOKEN";
      exports.FETCH_SPEECH_AUTHORIZATION_TOKEN = FETCH_SPEECH_AUTHORIZATION_TOKEN;
      function fetchSpeechAuthorizationToken() {
        return {
          type: FETCH_SPEECH_AUTHORIZATION_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useFetchSpeechAuthorizationToken.js
  var require_useFetchSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/hooks/useFetchSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useFetchSpeechAuthorizationToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _fetchSpeechAuthorizationToken = _interopRequireDefault2(require_fetchSpeechAuthorizationToken());
      function useFetchSpeechAuthorizationToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return (0, _react2.useCallback)(function() {
          return dispatch((0, _fetchSpeechAuthorizationToken["default"])());
        });
      }
    }
  });

  // lib/landing/data/action/generateSpeechAuthorizationToken.js
  var require_generateSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/action/generateSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.GENERATE_SPEECH_AUTHORIZATION_TOKEN = void 0;
      exports["default"] = generateSpeechAuthorizationToken;
      var GENERATE_SPEECH_AUTHORIZATION_TOKEN = "GENERATE_SPEECH_AUTHORIZATION_TOKEN";
      exports.GENERATE_SPEECH_AUTHORIZATION_TOKEN = GENERATE_SPEECH_AUTHORIZATION_TOKEN;
      function generateSpeechAuthorizationToken() {
        return {
          type: GENERATE_SPEECH_AUTHORIZATION_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useGenerateSpeechAuthorizationToken.js
  var require_useGenerateSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/hooks/useGenerateSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useGenerateSpeechAuthorizationToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _generateSpeechAuthorizationToken = _interopRequireDefault2(require_generateSpeechAuthorizationToken());
      function useGenerateSpeechAuthorizationToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return (0, _react2.useCallback)(function() {
          return dispatch((0, _generateSpeechAuthorizationToken["default"])());
        });
      }
    }
  });

  // lib/landing/data/action/setSpeechAuthorizationToken.js
  var require_setSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/action/setSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_SPEECH_AUTHORIZATION_TOKEN = void 0;
      exports["default"] = setSpeechAuthorizationToken;
      var SET_SPEECH_AUTHORIZATION_TOKEN = "SET_SPEECH_AUTHORIZATION_TOKEN";
      exports.SET_SPEECH_AUTHORIZATION_TOKEN = SET_SPEECH_AUTHORIZATION_TOKEN;
      function setSpeechAuthorizationToken(authorizationToken) {
        return {
          payload: {
            authorizationToken: authorizationToken
          },
          type: SET_SPEECH_AUTHORIZATION_TOKEN
        };
      }
    }
  });

  // lib/landing/data/hooks/useSpeechAuthorizationToken.js
  var require_useSpeechAuthorizationToken = __commonJS({
    "lib/landing/data/hooks/useSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useSpeechAuthorizationToken;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setSpeechAuthorizationToken = _interopRequireDefault2(require_setSpeechAuthorizationToken());
      function useSpeechAuthorizationToken() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var authorizationToken = _ref.speechCredentials.authorizationToken;
          return authorizationToken;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setSpeechAuthorizationToken["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/removeSavedSpeechSubscriptionKey.js
  var require_removeSavedSpeechSubscriptionKey = __commonJS({
    "lib/landing/data/action/removeSavedSpeechSubscriptionKey.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY = void 0;
      exports["default"] = removeSavedSpeechSubscriptionKey;
      var REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY = "REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY";
      exports.REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY = REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY;
      function removeSavedSpeechSubscriptionKey(subscriptionKey) {
        return {
          payload: {
            subscriptionKey: subscriptionKey
          },
          type: REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY
        };
      }
    }
  });

  // lib/landing/data/action/saveSpeechSubscriptionKey.js
  var require_saveSpeechSubscriptionKey = __commonJS({
    "lib/landing/data/action/saveSpeechSubscriptionKey.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SAVE_SPEECH_SUBSCRIPTION_KEY = void 0;
      exports["default"] = saveSpeechSubscriptionKey;
      var SAVE_SPEECH_SUBSCRIPTION_KEY = "SAVE_SPEECH_SUBSCRIPTION_KEY";
      exports.SAVE_SPEECH_SUBSCRIPTION_KEY = SAVE_SPEECH_SUBSCRIPTION_KEY;
      function saveSpeechSubscriptionKey(subscriptionKey) {
        return {
          payload: {
            subscriptionKey: subscriptionKey
          },
          type: SAVE_SPEECH_SUBSCRIPTION_KEY
        };
      }
    }
  });

  // lib/landing/data/hooks/useSavedSpeechSubscriptionKeys.js
  var require_useSavedSpeechSubscriptionKeys = __commonJS({
    "lib/landing/data/hooks/useSavedSpeechSubscriptionKeys.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useSavedSpeechSubscriptionKey;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _removeSavedSpeechSubscriptionKey = _interopRequireDefault2(require_removeSavedSpeechSubscriptionKey());
      var _saveSpeechSubscriptionKey = _interopRequireDefault2(require_saveSpeechSubscriptionKey());
      function useSavedSpeechSubscriptionKey() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var savedSubscriptionKeys = _ref.speechCredentials.savedSubscriptionKeys;
          return savedSubscriptionKeys || [];
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _saveSpeechSubscriptionKey["default"])(value));
        }, [dispatch]), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _removeSavedSpeechSubscriptionKey["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setSpeechRegion.js
  var require_setSpeechRegion = __commonJS({
    "lib/landing/data/action/setSpeechRegion.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_SPEECH_REGION = void 0;
      exports["default"] = setSpeechRegion;
      var SET_SPEECH_REGION = "SET_SPEECH_REGION";
      exports.SET_SPEECH_REGION = SET_SPEECH_REGION;
      function setSpeechRegion(region) {
        return {
          payload: {
            region: region
          },
          type: SET_SPEECH_REGION
        };
      }
    }
  });

  // lib/landing/data/hooks/useSpeechRegion.js
  var require_useSpeechRegion = __commonJS({
    "lib/landing/data/hooks/useSpeechRegion.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useSpeechRegion;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setSpeechRegion = _interopRequireDefault2(require_setSpeechRegion());
      function useSpeechRegion() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var region = _ref.speechCredentials.region;
          return region;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setSpeechRegion["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/data/action/setSpeechSubscriptionKey.js
  var require_setSpeechSubscriptionKey = __commonJS({
    "lib/landing/data/action/setSpeechSubscriptionKey.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_SPEECH_SUBSCRIPTION_KEY = void 0;
      exports["default"] = setSpeechSubscriptionKey;
      var SET_SPEECH_SUBSCRIPTION_KEY = "SET_SPEECH_SUBSCRIPTION_KEY";
      exports.SET_SPEECH_SUBSCRIPTION_KEY = SET_SPEECH_SUBSCRIPTION_KEY;
      function setSpeechSubscriptionKey(subscriptionKey) {
        return {
          payload: {
            subscriptionKey: subscriptionKey
          },
          type: SET_SPEECH_SUBSCRIPTION_KEY
        };
      }
    }
  });

  // lib/landing/data/hooks/useSpeechSubscriptionKey.js
  var require_useSpeechSubscriptionKey = __commonJS({
    "lib/landing/data/hooks/useSpeechSubscriptionKey.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useSpeechSubscriptionKey;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setSpeechSubscriptionKey = _interopRequireDefault2(require_setSpeechSubscriptionKey());
      function useSpeechSubscriptionKey() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var subscriptionKey = _ref.speechCredentials.subscriptionKey;
          return subscriptionKey;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setSpeechSubscriptionKey["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/util/isURL.js
  var require_isURL = __commonJS({
    "lib/landing/util/isURL.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = isURL;
      function isURL(url) {
        return /^https?:\/\//.test(url || "");
      }
    }
  });

  // lib/landing/ui/SpeechCredentials.js
  var require_SpeechCredentials = __commonJS({
    "lib/landing/ui/SpeechCredentials.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _now = _interopRequireDefault2(require_now3());
      var _setTimeout2 = _interopRequireDefault2(require_set_timeout2());
      var _map = _interopRequireDefault2(require_map4());
      var _keys = _interopRequireDefault2(require_keys3());
      var _includes = _interopRequireDefault2(require_includes5());
      var _concat = _interopRequireDefault2(require_concat4());
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _toConsumableArray2 = _interopRequireDefault2(require_toConsumableArray());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _emotion = require_emotion_cjs();
      var _ms = _interopRequireDefault2(require_ms());
      var _react2 = _interopRequireWildcard2(require_react());
      var _useFetchSpeechAuthorizationToken = _interopRequireDefault2(require_useFetchSpeechAuthorizationToken());
      var _useGenerateSpeechAuthorizationToken = _interopRequireDefault2(require_useGenerateSpeechAuthorizationToken());
      var _useSpeechAuthorizationToken = _interopRequireDefault2(require_useSpeechAuthorizationToken());
      var _useSavedSpeechSubscriptionKeys = _interopRequireDefault2(require_useSavedSpeechSubscriptionKeys());
      var _useSpeechRegion3 = _interopRequireDefault2(require_useSpeechRegion());
      var _useSpeechSubscriptionKey = _interopRequireDefault2(require_useSpeechSubscriptionKey());
      var _isURL = _interopRequireDefault2(require_isURL());
      var _Presets = _interopRequireDefault2(require_Presets());
      var _Row = _interopRequireDefault2(require_Row());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var INPUT_CSS = (0, _emotion.css)({
        flex: 1,
        fontFamily: "Consolas, 'Courier New', monospace",
        marginRight: "1em"
      });
      var INPUT_ROW_CSS = (0, _emotion.css)({
        display: "flex",
        "& > input:invalid": {
          borderColor: "Red",
          borderStyle: "solid",
          borderWidth: 1
        }
      });
      var RED_CSS = (0, _emotion.css)({
        color: "Red"
      });
      var REGION_SELECT_CSS = (0, _emotion.css)({
        flex: 1
      });
      var ROW_CSS = (0, _emotion.css)({
        flex: 1
      });
      var REGIONS = {
        westus: "West US",
        westus2: "West US 2",
        eastus: "East US",
        eastus2: "East US 2",
        centralus: "Central US",
        northcentralus: "North Central US",
        southcentralus: "South Central US",
        centralindia: "Central India",
        eastasia: "East Asia",
        southeastasia: "Southeast Asia",
        japaneast: "Japan East",
        koreacentral: "Korea Central",
        australiaeast: "Australia East",
        canadacentral: "Canada Central",
        northeurope: "North Europe",
        westeurope: "West Europe",
        uksouth: "UK South",
        francecentral: "France Central"
      };
      var SpeechCredentials = function SpeechCredentials2() {
        var _context, _context3;
        var _useSpeechAuthorizati = (0, _useSpeechAuthorizationToken["default"])(), _useSpeechAuthorizati2 = (0, _slicedToArray2["default"])(_useSpeechAuthorizati, 2), authorizationToken = _useSpeechAuthorizati2[0], setAuthorizationToken = _useSpeechAuthorizati2[1];
        var _useSpeechRegion = (0, _useSpeechRegion3["default"])(), _useSpeechRegion2 = (0, _slicedToArray2["default"])(_useSpeechRegion, 2), region = _useSpeechRegion2[0], setRegion = _useSpeechRegion2[1];
        var _useSavedSpeechSubscr = (0, _useSavedSpeechSubscriptionKeys["default"])(), _useSavedSpeechSubscr2 = (0, _slicedToArray2["default"])(_useSavedSpeechSubscr, 3), savedSubscriptionKeys = _useSavedSpeechSubscr2[0], saveSubscriptionKey = _useSavedSpeechSubscr2[1], removeSavedSubscriptionKey = _useSavedSpeechSubscr2[2];
        var _useSpeechSubscriptio = (0, _useSpeechSubscriptionKey["default"])(), _useSpeechSubscriptio2 = (0, _slicedToArray2["default"])(_useSpeechSubscriptio, 2), subscriptionKey = _useSpeechSubscriptio2[0], setSubscriptionKey = _useSpeechSubscriptio2[1];
        var fetchAuthorizationToken = (0, _useFetchSpeechAuthorizationToken["default"])();
        var generateAuthorizationToken = (0, _useGenerateSpeechAuthorizationToken["default"])();
        var handleClearSubscriptionKeyClick = (0, _react2.useCallback)(function() {
          setSubscriptionKey("");
        }, [setSubscriptionKey]);
        var handleLoadSubscriptionKey = (0, _react2.useCallback)(function(subscriptionKey2) {
          if (subscriptionKey2 === "#mockbot") {
            setSubscriptionKey("https://webchat-mockbot.azurewebsites.net/speechservices/token");
            fetchAuthorizationToken();
          } else {
            setAuthorizationToken("");
            setSubscriptionKey(subscriptionKey2);
          }
        }, [fetchAuthorizationToken, setAuthorizationToken, setSubscriptionKey]);
        var handleAuthorizationTokenChange = (0, _react2.useCallback)(function(_ref) {
          var value = _ref.target.value;
          return setAuthorizationToken(value);
        }, [setAuthorizationToken]);
        var handleAuthorizationTokenFocus = (0, _react2.useCallback)(function(_ref2) {
          var target = _ref2.target;
          return target.select();
        });
        var handleClearAuthorizationTokenClick = (0, _react2.useCallback)(function() {
          return setAuthorizationToken("");
        }, [setAuthorizationToken]);
        var handleRegionChange = (0, _react2.useCallback)(function(_ref3) {
          var value = _ref3.target.value;
          return setRegion(value);
        }, [setRegion]);
        var handleSaveSubscriptionKey = (0, _react2.useCallback)(function() {
          return saveSubscriptionKey(subscriptionKey);
        }, [subscriptionKey]);
        var handleSubscriptionKeyChange = (0, _react2.useCallback)(function(_ref4) {
          var value = _ref4.target.value;
          return setSubscriptionKey(value);
        }, [setSubscriptionKey]);
        var handleSubscriptionKeyFocus = (0, _react2.useCallback)(function(_ref5) {
          var target = _ref5.target;
          return target.select();
        });
        var subscriptionKeyIsURL = (0, _isURL["default"])(subscriptionKey);
        var decodedAuthorizationToken = (0, _tryDecodeJWT["default"])(authorizationToken);
        var timeToExpire = decodedAuthorizationToken && decodedAuthorizationToken.exp * 1e3 - (0, _now["default"])();
        var _useState = (0, _react2.useState)(), _useState2 = (0, _slicedToArray2["default"])(_useState, 2), setForceRender = _useState2[1];
        (0, _react2.useEffect)(function() {
          if (decodedAuthorizationToken) {
            var timeout = (0, _setTimeout2["default"])(function() {
              return setForceRender({});
            }, 6e4);
            return function() {
              return clearTimeout(timeout);
            };
          }
        }, [decodedAuthorizationToken]);
        return /* @__PURE__ */ _react2["default"].createElement(_react2["default"].Fragment, null, /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: "Speech region"
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: INPUT_ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("select", {
          className: REGION_SELECT_CSS,
          disabled: subscriptionKeyIsURL,
          onChange: handleRegionChange,
          title: subscriptionKeyIsURL ? "Clear token URL to select region." : void 0,
          value: region
        }, (0, _map["default"])(_context = (0, _keys["default"])(REGIONS)).call(_context, function(value) {
          return /* @__PURE__ */ _react2["default"].createElement("option", {
            key: value,
            value: value
          }, REGIONS[value]);
        }))), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement(_Presets["default"], {
          onLoad: subscriptionKeyIsURL ? void 0 : setRegion,
          texts: (0, _react2.useMemo)(function() {
            return ["West US", "West US 2", "East US"];
          }, []),
          values: (0, _react2.useMemo)(function() {
            return ["westus", "westus2", "eastus"];
          }, [])
        })))), /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: subscriptionKeyIsURL ? "Token URL" : "Speech key"
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: INPUT_ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          className: INPUT_CSS,
          disabled: !!authorizationToken,
          onChange: handleSubscriptionKeyChange,
          onFocus: handleSubscriptionKeyFocus,
          title: authorizationToken ? "You cannot set subscription key when authorization token is set.\n\nPlease clear authorization token first." : subscriptionKeyIsURL ? 'Will POST to this endpoint for either JSON or text depends on "Content-Type" header.' : void 0,
          value: subscriptionKey
        }), /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !subscriptionKey || !!authorizationToken,
          onClick: handleClearSubscriptionKeyClick,
          type: "button"
        }, "\xD7"), "\xA0", subscriptionKeyIsURL ? /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !!authorizationToken,
          onClick: fetchAuthorizationToken,
          type: "button"
        }, "Fetch token") : /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !subscriptionKey || !!authorizationToken,
          onClick: generateAuthorizationToken,
          type: "button"
        }, "Generate token")), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement(_Presets["default"], {
          onDelete: removeSavedSubscriptionKey,
          onLoad: handleLoadSubscriptionKey,
          onSave: subscriptionKey && !(0, _includes["default"])(savedSubscriptionKeys).call(savedSubscriptionKeys, subscriptionKey) ? handleSaveSubscriptionKey : void 0,
          texts: (0, _react2.useMemo)(function() {
            var _context2;
            return (0, _concat["default"])(_context2 = ["MockBot"]).call(_context2, (0, _toConsumableArray2["default"])((0, _map["default"])(savedSubscriptionKeys).call(savedSubscriptionKeys, function(key) {
              return function() {
                return (key || "").substr(0, 5) + "\u2026";
              };
            })));
          }, [savedSubscriptionKeys]),
          values: (0, _concat["default"])(_context3 = ["#mockbot"]).call(_context3, (0, _toConsumableArray2["default"])(savedSubscriptionKeys))
        })))), /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: "Speech token"
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: INPUT_ROW_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("input", {
          className: INPUT_CSS,
          onChange: handleAuthorizationTokenChange,
          onFocus: handleAuthorizationTokenFocus,
          required: subscriptionKeyIsURL,
          title: decodedAuthorizationToken && (0, _stringify["default"])(decodedAuthorizationToken, null, 2),
          value: authorizationToken
        }), /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !authorizationToken,
          onClick: handleClearAuthorizationTokenClick,
          type: "button"
        }, "Clear"))), !!authorizationToken && (timeToExpire > 0 ? /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token will expire in ", (0, _ms["default"])(timeToExpire, {
          "long": true
        }), ".")) : /* @__PURE__ */ _react2["default"].createElement("div", {
          className: RED_CSS
        }, /* @__PURE__ */ _react2["default"].createElement("small", null, "This token has already expired.")))));
      };
      var _default = SpeechCredentials;
      exports["default"] = _default;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
  var require_is_array8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js": function(exports, module) {
      module.exports = require_is_array3();
    }
  });

  // lib/landing/data/action/saveTranscriptDialogContent.js
  var require_saveTranscriptDialogContent = __commonJS({
    "lib/landing/data/action/saveTranscriptDialogContent.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SAVE_TRANSCRIPT_DIALOG_CONTENT = void 0;
      exports["default"] = saveTranscriptDialogContent;
      var SAVE_TRANSCRIPT_DIALOG_CONTENT = "SAVE_TRANSCRIPT_DIALOG_CONTENT";
      exports.SAVE_TRANSCRIPT_DIALOG_CONTENT = SAVE_TRANSCRIPT_DIALOG_CONTENT;
      function saveTranscriptDialogContent(content) {
        return {
          payload: {
            content: content
          },
          type: SAVE_TRANSCRIPT_DIALOG_CONTENT
        };
      }
    }
  });

  // lib/landing/data/hooks/useTranscriptDialogContent.js
  var require_useTranscriptDialogContent = __commonJS({
    "lib/landing/data/hooks/useTranscriptDialogContent.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useTranscriptDialogContent;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _saveTranscriptDialogContent = _interopRequireDefault2(require_saveTranscriptDialogContent());
      function useTranscriptDialogContent() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var content = _ref.transcript.content;
          return content || "";
        }), (0, _react2.useCallback)(function(content) {
          return dispatch((0, _saveTranscriptDialogContent["default"])(content));
        }, [dispatch])];
      }
    }
  });

  // node_modules/core-js-pure/actual/object/keys.js
  var require_keys4 = __commonJS({
    "node_modules/core-js-pure/actual/object/keys.js": function(exports, module) {
      var parent = require_keys2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/keys.js
  var require_keys5 = __commonJS({
    "node_modules/core-js-pure/full/object/keys.js": function(exports, module) {
      var parent = require_keys4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/keys.js
  var require_keys6 = __commonJS({
    "node_modules/core-js-pure/features/object/keys.js": function(exports, module) {
      module.exports = require_keys5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/keys.js
  var require_keys7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/keys.js": function(exports, module) {
      module.exports = require_keys6();
    }
  });

  // node_modules/core-js-pure/es/object/get-own-property-symbols.js
  var require_get_own_property_symbols = __commonJS({
    "node_modules/core-js-pure/es/object/get-own-property-symbols.js": function(exports, module) {
      require_es_symbol();
      var path = require_path();
      module.exports = path.Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js-pure/stable/object/get-own-property-symbols.js
  var require_get_own_property_symbols2 = __commonJS({
    "node_modules/core-js-pure/stable/object/get-own-property-symbols.js": function(exports, module) {
      var parent = require_get_own_property_symbols();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/get-own-property-symbols.js
  var require_get_own_property_symbols3 = __commonJS({
    "node_modules/core-js-pure/actual/object/get-own-property-symbols.js": function(exports, module) {
      var parent = require_get_own_property_symbols2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/get-own-property-symbols.js
  var require_get_own_property_symbols4 = __commonJS({
    "node_modules/core-js-pure/full/object/get-own-property-symbols.js": function(exports, module) {
      var parent = require_get_own_property_symbols3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/get-own-property-symbols.js
  var require_get_own_property_symbols5 = __commonJS({
    "node_modules/core-js-pure/features/object/get-own-property-symbols.js": function(exports, module) {
      module.exports = require_get_own_property_symbols4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-symbols.js
  var require_get_own_property_symbols6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-symbols.js": function(exports, module) {
      module.exports = require_get_own_property_symbols5();
    }
  });

  // node_modules/core-js-pure/modules/es.array.filter.js
  var require_es_array_filter = __commonJS({
    "node_modules/core-js-pure/modules/es.array.filter.js": function() {
      "use strict";
      var $ = require_export();
      var $filter = require_array_iteration().filter;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        filter: function filter(callbackfn) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/filter.js
  var require_filter = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/filter.js": function(exports, module) {
      require_es_array_filter();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").filter;
    }
  });

  // node_modules/core-js-pure/es/instance/filter.js
  var require_filter2 = __commonJS({
    "node_modules/core-js-pure/es/instance/filter.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_filter();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.filter;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.filter ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/filter.js
  var require_filter3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/filter.js": function(exports, module) {
      var parent = require_filter2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/instance/filter.js
  var require_filter4 = __commonJS({
    "node_modules/core-js-pure/actual/instance/filter.js": function(exports, module) {
      var parent = require_filter3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/instance/filter.js
  var require_filter5 = __commonJS({
    "node_modules/core-js-pure/full/instance/filter.js": function(exports, module) {
      var parent = require_filter4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/instance/filter.js
  var require_filter6 = __commonJS({
    "node_modules/core-js-pure/features/instance/filter.js": function(exports, module) {
      module.exports = require_filter5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/instance/filter.js
  var require_filter7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/instance/filter.js": function(exports, module) {
      module.exports = require_filter6();
    }
  });

  // node_modules/core-js-pure/internals/array-method-is-strict.js
  var require_array_method_is_strict = __commonJS({
    "node_modules/core-js-pure/internals/array-method-is-strict.js": function(exports, module) {
      "use strict";
      var fails = require_fails();
      module.exports = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
          method.call(null, argument || function() {
            return 1;
          }, 1);
        });
      };
    }
  });

  // node_modules/core-js-pure/internals/array-for-each.js
  var require_array_for_each = __commonJS({
    "node_modules/core-js-pure/internals/array-for-each.js": function(exports, module) {
      "use strict";
      var $forEach = require_array_iteration().forEach;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var STRICT_METHOD = arrayMethodIsStrict("forEach");
      module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      } : [].forEach;
    }
  });

  // node_modules/core-js-pure/modules/es.array.for-each.js
  var require_es_array_for_each = __commonJS({
    "node_modules/core-js-pure/modules/es.array.for-each.js": function() {
      "use strict";
      var $ = require_export();
      var forEach = require_array_for_each();
      $({ target: "Array", proto: true, forced: [].forEach != forEach }, {
        forEach: forEach
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/for-each.js
  var require_for_each = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/for-each.js": function(exports, module) {
      require_es_array_for_each();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").forEach;
    }
  });

  // node_modules/core-js-pure/stable/array/virtual/for-each.js
  var require_for_each2 = __commonJS({
    "node_modules/core-js-pure/stable/array/virtual/for-each.js": function(exports, module) {
      var parent = require_for_each();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/stable/instance/for-each.js
  var require_for_each3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/for-each.js": function(exports, module) {
      require_web_dom_collections_iterator();
      var classof = require_classof();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_for_each2();
      var ArrayPrototype = Array.prototype;
      var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
      };
      module.exports = function(it) {
        var own = it.forEach;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/actual/instance/for-each.js
  var require_for_each4 = __commonJS({
    "node_modules/core-js-pure/actual/instance/for-each.js": function(exports, module) {
      var parent = require_for_each3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/instance/for-each.js
  var require_for_each5 = __commonJS({
    "node_modules/core-js-pure/full/instance/for-each.js": function(exports, module) {
      var parent = require_for_each4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/instance/for-each.js
  var require_for_each6 = __commonJS({
    "node_modules/core-js-pure/features/instance/for-each.js": function(exports, module) {
      module.exports = require_for_each5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/instance/for-each.js
  var require_for_each7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/instance/for-each.js": function(exports, module) {
      module.exports = require_for_each6();
    }
  });

  // node_modules/core-js-pure/internals/own-keys.js
  var require_own_keys2 = __commonJS({
    "node_modules/core-js-pure/internals/own-keys.js": function(exports, module) {
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var anObject = require_an_object();
      var concat = uncurryThis([].concat);
      module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js
  var require_es_object_get_own_property_descriptors = __commonJS({
    "node_modules/core-js-pure/modules/es.object.get-own-property-descriptors.js": function() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var ownKeys = require_own_keys2();
      var toIndexedObject = require_to_indexed_object();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var createProperty = require_create_property();
      $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var index = 0;
          var key, descriptor;
          while (keys.length > index) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== void 0)
              createProperty(result, key, descriptor);
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js-pure/es/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors = __commonJS({
    "node_modules/core-js-pure/es/object/get-own-property-descriptors.js": function(exports, module) {
      require_es_object_get_own_property_descriptors();
      var path = require_path();
      module.exports = path.Object.getOwnPropertyDescriptors;
    }
  });

  // node_modules/core-js-pure/stable/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors2 = __commonJS({
    "node_modules/core-js-pure/stable/object/get-own-property-descriptors.js": function(exports, module) {
      var parent = require_get_own_property_descriptors();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors3 = __commonJS({
    "node_modules/core-js-pure/actual/object/get-own-property-descriptors.js": function(exports, module) {
      var parent = require_get_own_property_descriptors2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors4 = __commonJS({
    "node_modules/core-js-pure/full/object/get-own-property-descriptors.js": function(exports, module) {
      var parent = require_get_own_property_descriptors3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors5 = __commonJS({
    "node_modules/core-js-pure/features/object/get-own-property-descriptors.js": function(exports, module) {
      module.exports = require_get_own_property_descriptors4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptors.js
  var require_get_own_property_descriptors6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/get-own-property-descriptors.js": function(exports, module) {
      module.exports = require_get_own_property_descriptors5();
    }
  });

  // node_modules/core-js-pure/modules/es.object.define-properties.js
  var require_es_object_define_properties = __commonJS({
    "node_modules/core-js-pure/modules/es.object.define-properties.js": function() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var defineProperties = require_object_define_properties().f;
      $({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
        defineProperties: defineProperties
      });
    }
  });

  // node_modules/core-js-pure/es/object/define-properties.js
  var require_define_properties = __commonJS({
    "node_modules/core-js-pure/es/object/define-properties.js": function(exports, module) {
      require_es_object_define_properties();
      var path = require_path();
      var Object2 = path.Object;
      var defineProperties = module.exports = function defineProperties2(T, D) {
        return Object2.defineProperties(T, D);
      };
      if (Object2.defineProperties.sham)
        defineProperties.sham = true;
    }
  });

  // node_modules/core-js-pure/stable/object/define-properties.js
  var require_define_properties2 = __commonJS({
    "node_modules/core-js-pure/stable/object/define-properties.js": function(exports, module) {
      var parent = require_define_properties();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/define-properties.js
  var require_define_properties3 = __commonJS({
    "node_modules/core-js-pure/actual/object/define-properties.js": function(exports, module) {
      var parent = require_define_properties2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/define-properties.js
  var require_define_properties4 = __commonJS({
    "node_modules/core-js-pure/full/object/define-properties.js": function(exports, module) {
      var parent = require_define_properties3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/define-properties.js
  var require_define_properties5 = __commonJS({
    "node_modules/core-js-pure/features/object/define-properties.js": function(exports, module) {
      module.exports = require_define_properties4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/define-properties.js
  var require_define_properties6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/define-properties.js": function(exports, module) {
      module.exports = require_define_properties5();
    }
  });

  // node_modules/core-js-pure/modules/es.date.to-primitive.js
  var require_es_date_to_primitive = __commonJS({
    "node_modules/core-js-pure/modules/es.date.to-primitive.js": function() {
    }
  });

  // node_modules/core-js-pure/es/symbol/to-primitive.js
  var require_to_primitive3 = __commonJS({
    "node_modules/core-js-pure/es/symbol/to-primitive.js": function(exports, module) {
      require_es_date_to_primitive();
      require_es_symbol_to_primitive();
      var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      module.exports = WrappedWellKnownSymbolModule.f("toPrimitive");
    }
  });

  // node_modules/core-js-pure/stable/symbol/to-primitive.js
  var require_to_primitive4 = __commonJS({
    "node_modules/core-js-pure/stable/symbol/to-primitive.js": function(exports, module) {
      var parent = require_to_primitive3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/symbol/to-primitive.js
  var require_to_primitive5 = __commonJS({
    "node_modules/core-js-pure/actual/symbol/to-primitive.js": function(exports, module) {
      var parent = require_to_primitive4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/symbol/to-primitive.js
  var require_to_primitive6 = __commonJS({
    "node_modules/core-js-pure/full/symbol/to-primitive.js": function(exports, module) {
      var parent = require_to_primitive5();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/symbol/to-primitive.js
  var require_to_primitive7 = __commonJS({
    "node_modules/core-js-pure/features/symbol/to-primitive.js": function(exports, module) {
      module.exports = require_to_primitive6();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/symbol/to-primitive.js
  var require_to_primitive8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/symbol/to-primitive.js": function(exports, module) {
      module.exports = require_to_primitive7();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/toPrimitive.js
  var require_toPrimitive = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/toPrimitive.js": function(exports, module) {
      var _Symbol$toPrimitive = require_to_primitive8();
      var _typeof = require_typeof()["default"];
      function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
          return input;
        var prim = input[_Symbol$toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/toPropertyKey.js
  var require_toPropertyKey = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/toPropertyKey.js": function(exports, module) {
      var _typeof = require_typeof()["default"];
      var toPrimitive = require_toPrimitive();
      function _toPropertyKey(arg) {
        var key = toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
      }
      module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/defineProperty.js
  var require_defineProperty2 = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/defineProperty.js": function(exports, module) {
      var _Object$defineProperty = require_define_property6();
      var toPropertyKey = require_toPropertyKey();
      function _defineProperty(obj, key, value) {
        key = toPropertyKey(key);
        if (key in obj) {
          _Object$defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/objectSpread2.js
  var require_objectSpread22 = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/objectSpread2.js": function(exports, module) {
      var _Object$keys = require_keys7();
      var _Object$getOwnPropertySymbols = require_get_own_property_symbols6();
      var _filterInstanceProperty = require_filter7();
      var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor6();
      var _forEachInstanceProperty = require_for_each7();
      var _Object$getOwnPropertyDescriptors = require_get_own_property_descriptors6();
      var _Object$defineProperties = require_define_properties6();
      var _Object$defineProperty = require_define_property6();
      var defineProperty = require_defineProperty2();
      function ownKeys(object, enumerableOnly) {
        var keys = _Object$keys(object);
        if (_Object$getOwnPropertySymbols) {
          var symbols = _Object$getOwnPropertySymbols(object);
          enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function(sym) {
            return _Object$getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var _context, _context2;
          var source = arguments[i] != null ? arguments[i] : {};
          i % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function(key) {
            defineProperty(target, key, source[key]);
          }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function(key) {
            _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/es/array/virtual/entries.js
  var require_entries = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/entries.js": function(exports, module) {
      require_es_array_iterator();
      require_es_object_to_string();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").entries;
    }
  });

  // node_modules/core-js-pure/stable/array/virtual/entries.js
  var require_entries2 = __commonJS({
    "node_modules/core-js-pure/stable/array/virtual/entries.js": function(exports, module) {
      var parent = require_entries();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/stable/instance/entries.js
  var require_entries3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/entries.js": function(exports, module) {
      require_web_dom_collections_iterator();
      var classof = require_classof();
      var hasOwn = require_has_own_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_entries2();
      var ArrayPrototype = Array.prototype;
      var DOMIterables = {
        DOMTokenList: true,
        NodeList: true
      };
      module.exports = function(it) {
        var own = it.entries;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.entries || hasOwn(DOMIterables, classof(it)) ? method : own;
      };
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js
  var require_entries4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js": function(exports, module) {
      module.exports = require_entries3();
    }
  });

  // node_modules/core-js-pure/modules/es.string.ends-with.js
  var require_es_string_ends_with = __commonJS({
    "node_modules/core-js-pure/modules/es.string.ends-with.js": function() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this_clause();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var toLength = require_to_length();
      var toString = require_to_string();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var IS_PURE = require_is_pure();
      var nativeEndsWith = uncurryThis("".endsWith);
      var slice = uncurryThis("".slice);
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
        var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
        return descriptor && !descriptor.writable;
      }();
      $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
        endsWith: function endsWith(searchString) {
          var that = toString(requireObjectCoercible(this));
          notARegExp(searchString);
          var endPosition = arguments.length > 1 ? arguments[1] : void 0;
          var len = that.length;
          var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
          var search = toString(searchString);
          return nativeEndsWith ? nativeEndsWith(that, search, end) : slice(that, end - search.length, end) === search;
        }
      });
    }
  });

  // node_modules/core-js-pure/es/string/virtual/ends-with.js
  var require_ends_with = __commonJS({
    "node_modules/core-js-pure/es/string/virtual/ends-with.js": function(exports, module) {
      require_es_string_ends_with();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("String").endsWith;
    }
  });

  // node_modules/core-js-pure/es/instance/ends-with.js
  var require_ends_with2 = __commonJS({
    "node_modules/core-js-pure/es/instance/ends-with.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_ends_with();
      var StringPrototype = String.prototype;
      module.exports = function(it) {
        var own = it.endsWith;
        return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.endsWith ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/ends-with.js
  var require_ends_with3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/ends-with.js": function(exports, module) {
      var parent = require_ends_with2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/ends-with.js
  var require_ends_with4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/ends-with.js": function(exports, module) {
      module.exports = require_ends_with3();
    }
  });

  // node_modules/core-js-pure/modules/es.array.find.js
  var require_es_array_find = __commonJS({
    "node_modules/core-js-pure/modules/es.array.find.js": function() {
      "use strict";
      var $ = require_export();
      var $find = require_array_iteration().find;
      var addToUnscopables = require_add_to_unscopables();
      var FIND = "find";
      var SKIPS_HOLES = true;
      if (FIND in [])
        Array(1)[FIND](function() {
          SKIPS_HOLES = false;
        });
      $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
        find: function find(callbackfn) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables(FIND);
    }
  });

  // node_modules/core-js-pure/es/array/virtual/find.js
  var require_find = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/find.js": function(exports, module) {
      require_es_array_find();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").find;
    }
  });

  // node_modules/core-js-pure/es/instance/find.js
  var require_find2 = __commonJS({
    "node_modules/core-js-pure/es/instance/find.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_find();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.find;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.find ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/find.js
  var require_find3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/find.js": function(exports, module) {
      var parent = require_find2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js
  var require_find4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/find.js": function(exports, module) {
      module.exports = require_find3();
    }
  });

  // node_modules/core-js-pure/internals/array-reduce.js
  var require_array_reduce = __commonJS({
    "node_modules/core-js-pure/internals/array-reduce.js": function(exports, module) {
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var IndexedObject = require_indexed_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var $TypeError = TypeError;
      var createMethod = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
          aCallable(callbackfn);
          var O = toObject(that);
          var self2 = IndexedObject(O);
          var length = lengthOfArrayLike(O);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2)
            while (true) {
              if (index in self2) {
                memo = self2[index];
                index += i;
                break;
              }
              index += i;
              if (IS_RIGHT ? index < 0 : length <= index) {
                throw $TypeError("Reduce of empty array with no initial value");
              }
            }
          for (; IS_RIGHT ? index >= 0 : length > index; index += i)
            if (index in self2) {
              memo = callbackfn(memo, self2[index], index, O);
            }
          return memo;
        };
      };
      module.exports = {
        left: createMethod(false),
        right: createMethod(true)
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-is-node.js
  var require_engine_is_node2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-node.js": function(exports, module) {
      var classof = require_classof_raw();
      var global2 = require_global();
      module.exports = classof(global2.process) == "process";
    }
  });

  // node_modules/core-js-pure/modules/es.array.reduce.js
  var require_es_array_reduce = __commonJS({
    "node_modules/core-js-pure/modules/es.array.reduce.js": function() {
      "use strict";
      var $ = require_export();
      var $reduce = require_array_reduce().left;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var CHROME_VERSION = require_engine_v8_version();
      var IS_NODE = require_engine_is_node2();
      var STRICT_METHOD = arrayMethodIsStrict("reduce");
      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
      $({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
        reduce: function reduce(callbackfn) {
          var length = arguments.length;
          return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/reduce.js
  var require_reduce = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/reduce.js": function(exports, module) {
      require_es_array_reduce();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").reduce;
    }
  });

  // node_modules/core-js-pure/es/instance/reduce.js
  var require_reduce2 = __commonJS({
    "node_modules/core-js-pure/es/instance/reduce.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_reduce();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.reduce;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/reduce.js
  var require_reduce3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/reduce.js": function(exports, module) {
      var parent = require_reduce2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
  var require_reduce4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js": function(exports, module) {
      module.exports = require_reduce3();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js
  var require_filter8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/filter.js": function(exports, module) {
      module.exports = require_filter3();
    }
  });

  // node_modules/simple-update-in/dist/simple-update-in.production.min.js
  var require_simple_update_in_production_min = __commonJS({
    "node_modules/simple-update-in/dist/simple-update-in.production.min.js": function(exports, module) {
      !function(t, e) {
        typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = t || self).simpleUpdateIn = e();
      }(exports, function() {
        "use strict";
        function l(t2) {
          return (l = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t3) {
            return typeof t3;
          } : function(t3) {
            return t3 && typeof Symbol == "function" && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
          })(t2);
        }
        function c(t2, e2, r2, n2, o2, a2, i2) {
          try {
            var u2 = t2[a2](i2), c2 = u2.value;
          } catch (t3) {
            return void r2(t3);
          }
          u2.done ? e2(c2) : Promise.resolve(c2).then(n2, o2);
        }
        function t(u2) {
          return function() {
            var t2 = this, i2 = arguments;
            return new Promise(function(e2, r2) {
              var n2 = u2.apply(t2, i2);
              function o2(t3) {
                c(n2, e2, r2, o2, a2, "next", t3);
              }
              function a2(t3) {
                c(n2, e2, r2, o2, a2, "throw", t3);
              }
              o2(void 0);
            });
          };
        }
        function p(t2, e2, r2) {
          return e2 in t2 ? Object.defineProperty(t2, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t2[e2] = r2, t2;
        }
        function n(e2, t2) {
          var r2, n2 = Object.keys(e2);
          return Object.getOwnPropertySymbols && (r2 = Object.getOwnPropertySymbols(e2), t2 && (r2 = r2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), n2.push.apply(n2, r2)), n2;
        }
        function y(e2) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var r2 = arguments[t2] != null ? arguments[t2] : {};
            t2 % 2 ? n(Object(r2), true).forEach(function(t3) {
              p(e2, t3, r2[t3]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(r2)) : n(Object(r2)).forEach(function(t3) {
              Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(r2, t3));
            });
          }
          return e2;
        }
        function b(t2) {
          return function(t3) {
            if (Array.isArray(t3))
              return t3;
          }(t2) || e(t2) || u(t2) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function v(t2) {
          return function(t3) {
            if (Array.isArray(t3))
              return o(t3);
          }(t2) || e(t2) || u(t2) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function e(t2) {
          if (typeof Symbol != "undefined" && Symbol.iterator in Object(t2))
            return Array.from(t2);
        }
        function u(t2, e2) {
          if (t2) {
            if (typeof t2 == "string")
              return o(t2, e2);
            var r2 = Object.prototype.toString.call(t2).slice(8, -1);
            return r2 === "Object" && t2.constructor && (r2 = t2.constructor.name), r2 === "Map" || r2 === "Set" ? Array.from(t2) : r2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? o(t2, e2) : void 0;
          }
        }
        function o(t2, e2) {
          (e2 == null || e2 > t2.length) && (e2 = t2.length);
          for (var r2 = 0, n2 = new Array(e2); r2 < e2; r2++)
            n2[r2] = t2[r2];
          return n2;
        }
        function f(t2) {
          if (typeof Symbol == "undefined" || t2[Symbol.iterator] == null) {
            if (Array.isArray(t2) || (t2 = u(t2))) {
              var e2 = 0, r2 = function() {
              };
              return { s: r2, n: function() {
                return e2 >= t2.length ? { done: true } : { done: false, value: t2[e2++] };
              }, e: function(t3) {
                throw t3;
              }, f: r2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var n2, o2, a2 = true, i2 = false;
          return { s: function() {
            n2 = t2[Symbol.iterator]();
          }, n: function() {
            var t3 = n2.next();
            return a2 = t3.done, t3;
          }, e: function(t3) {
            i2 = true, o2 = t3;
          }, f: function() {
            try {
              a2 || n2.return == null || n2.return();
            } finally {
              if (i2)
                throw o2;
            }
          } };
        }
        var d = Object.is || function(t2, e2) {
          return t2 === e2 ? t2 !== 0 || 1 / t2 == 1 / e2 : t2 != t2 && e2 != e2;
        };
        function r(t2, e2, r2) {
          s(e2);
          var n2, o2 = f(function t3(e3, r3) {
            if (!r3.length)
              return;
            var n3 = b(r3), o3 = n3[0], a3 = n3.slice(1);
            if (typeof o3 == "function") {
              var i2 = [];
              if (Array.isArray(e3))
                for (var u2 = 0, c2 = e3.length; u2 < c2; u2++)
                  o3.call(e3, e3[u2], u2) && i2.push.apply(i2, v(t3(e3, [u2].concat(v(a3)))));
              else
                for (var f2 in e3 || {})
                  o3.call(e3, e3[f2], f2) && i2.push.apply(i2, v(t3(e3, [f2].concat(v(a3)))));
              return i2;
            }
            var s2 = t3(e3 !== void 0 && e3[o3], a3);
            return s2 ? s2.map(function(t4) {
              return [o3].concat(v(t4));
            }) : [[o3]];
          }(t2, e2));
          try {
            for (o2.s(); !(n2 = o2.n()).done; ) {
              var a2 = n2.value;
              t2 = g(t2, a2, r2 ? r2(x(t2, a2)) : void 0);
            }
          } catch (t3) {
            o2.e(t3);
          } finally {
            o2.f();
          }
          return t2;
        }
        function a() {
          return (a = t(regeneratorRuntime.mark(function t2(e2, r2, n2) {
            var o2, a2, i2, u2;
            return regeneratorRuntime.wrap(function(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    return s(r2), t3.next = 3, h(e2, r2);
                  case 3:
                    o2 = t3.sent, a2 = f(o2), t3.prev = 5, a2.s();
                  case 7:
                    if ((i2 = a2.n()).done) {
                      t3.next = 23;
                      break;
                    }
                    if (u2 = i2.value, t3.t0 = g, t3.t1 = e2, t3.t2 = u2, n2)
                      return t3.next = 15, n2(x(e2, u2));
                    t3.next = 18;
                    break;
                  case 15:
                    t3.t3 = t3.sent, t3.next = 19;
                    break;
                  case 18:
                    t3.t3 = void 0;
                  case 19:
                    t3.t4 = t3.t3, e2 = (0, t3.t0)(t3.t1, t3.t2, t3.t4);
                  case 21:
                    t3.next = 7;
                    break;
                  case 23:
                    t3.next = 28;
                    break;
                  case 25:
                    t3.prev = 25, t3.t5 = t3.catch(5), a2.e(t3.t5);
                  case 28:
                    return t3.prev = 28, a2.f(), t3.finish(28);
                  case 31:
                    return t3.abrupt("return", e2);
                  case 32:
                  case "end":
                    return t3.stop();
                }
            }, t2, null, [[5, 25, 28, 31]]);
          }))).apply(this, arguments);
        }
        function s(t2) {
          if (!Array.isArray(t2))
            throw new Error("path must be an array");
        }
        r.updateInAsync = function(t2, e2, r2) {
          return a.apply(this, arguments);
        };
        var m = ["__proto__", "constructor", "prototype"];
        function h() {
          return i.apply(this, arguments);
        }
        function i() {
          return (i = t(regeneratorRuntime.mark(function t2(e2, r2) {
            var n2, o2, a2, i2, u2, c2, f2, s2;
            return regeneratorRuntime.wrap(function(t3) {
              for (; ; )
                switch (t3.prev = t3.next) {
                  case 0:
                    if (r2.length) {
                      t3.next = 2;
                      break;
                    }
                    return t3.abrupt("return");
                  case 2:
                    if (n2 = b(r2), o2 = n2[0], a2 = n2.slice(1), typeof o2 != "function") {
                      t3.next = 43;
                      break;
                    }
                    if (i2 = [], !Array.isArray(e2)) {
                      t3.next = 25;
                      break;
                    }
                    u2 = 0, c2 = e2.length;
                  case 7:
                    if (u2 < c2)
                      return t3.next = 10, o2.call(e2, e2[u2], u2);
                    t3.next = 23;
                    break;
                  case 10:
                    if (t3.t0 = t3.sent, t3.t0)
                      return t3.t1 = i2.push, t3.t2 = i2, t3.t3 = v, t3.next = 17, h(e2, [u2].concat(v(a2)));
                    t3.next = 20;
                    break;
                  case 17:
                    t3.t4 = t3.sent, t3.t5 = (0, t3.t3)(t3.t4), t3.t1.apply.call(t3.t1, t3.t2, t3.t5);
                  case 20:
                    u2++, t3.next = 7;
                    break;
                  case 23:
                    t3.next = 42;
                    break;
                  case 25:
                    t3.t6 = regeneratorRuntime.keys(e2 || {});
                  case 26:
                    if ((t3.t7 = t3.t6()).done) {
                      t3.next = 42;
                      break;
                    }
                    return f2 = t3.t7.value, t3.next = 30, o2.call(e2, e2[f2], f2);
                  case 30:
                    if (t3.t8 = t3.sent, t3.t8)
                      return t3.t9 = i2.push, t3.t10 = i2, t3.t11 = v, t3.next = 37, h(e2, [f2].concat(v(a2)));
                    t3.next = 40;
                    break;
                  case 37:
                    t3.t12 = t3.sent, t3.t13 = (0, t3.t11)(t3.t12), t3.t9.apply.call(t3.t9, t3.t10, t3.t13);
                  case 40:
                    t3.next = 26;
                    break;
                  case 42:
                    return t3.abrupt("return", i2);
                  case 43:
                    return t3.next = 45, h(e2 !== void 0 && e2[o2], a2);
                  case 45:
                    return s2 = t3.sent, t3.abrupt("return", s2 ? s2.map(function(t4) {
                      return [o2].concat(v(t4));
                    }) : [[o2]]);
                  case 47:
                  case "end":
                    return t3.stop();
                }
            }, t2);
          }))).apply(this, arguments);
        }
        function x(t2, e2) {
          return e2.reduce(function(t3, e3) {
            return t3 && t3[e3];
          }, t2);
        }
        function g(t2, e2, r2) {
          if (!e2.length)
            return r2;
          var n2, o2 = b(e2), a2 = o2[0], i2 = o2.slice(1), u2 = t2 !== void 0 && t2[a2], c2 = t2;
          if (n2 = a2, m.includes(n2))
            return t2;
          if (typeof a2 != "string" || l(c2) === "object" && !Array.isArray(c2) ? typeof a2 != "number" || Array.isArray(c2) || (c2 = []) : c2 = {}, typeof a2 == "number") {
            var f2 = g(u2, i2, r2);
            return f2 === void 0 ? t2 === void 0 ? t2 : (a2 in c2 && (c2 = v(c2)).splice(a2, 1), c2) : d(f2, u2) ? t2 : ((c2 = v(c2))[a2] = f2, c2);
          }
          var s2 = g(u2, i2, r2);
          return s2 === void 0 ? t2 === void 0 ? t2 : (a2 in c2 && delete (c2 = y({}, c2))[a2], c2) : d(s2, u2) ? t2 : y(y({}, c2), {}, p({}, a2, s2));
        }
        return r;
      });
    }
  });

  // lib/landing/util/parseChatHistoryFromHARFile.js
  var require_parseChatHistoryFromHARFile = __commonJS({
    "lib/landing/util/parseChatHistoryFromHARFile.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = parseChatHistoryFromHARFile;
      var _objectSpread2 = _interopRequireDefault2(require_objectSpread22());
      var _toConsumableArray2 = _interopRequireDefault2(require_toConsumableArray());
      var _entries = _interopRequireDefault2(require_entries4());
      var _url = _interopRequireDefault2(require_url3());
      var _endsWith = _interopRequireDefault2(require_ends_with4());
      var _find = _interopRequireDefault2(require_find4());
      var _reduce = _interopRequireDefault2(require_reduce4());
      var _filter = _interopRequireDefault2(require_filter8());
      var _simpleUpdateIn = _interopRequireDefault2(require_simple_update_in_production_min());
      function parseChatHistoryFromHARFile(text) {
        try {
          var _log$entries, _entry$_webSocketMess, _entry$request$queryS, _context2, _entry$_webSocketMess2;
          var _ref = JSON.parse(text) || {}, log = _ref.log;
          var entry = log === null || log === void 0 ? void 0 : (_log$entries = (0, _entries["default"])(log)) === null || _log$entries === void 0 ? void 0 : _log$entries.findLast(function(entry2) {
            var _entry$request;
            var urlString = (_entry$request = entry2.request) === null || _entry$request === void 0 ? void 0 : _entry$request.url;
            if (!urlString) {
              return;
            }
            try {
              var _context;
              var url = new _url["default"](urlString);
              return url.protocol === "wss:" && (0, _endsWith["default"])(_context = url.pathname).call(_context, "/stream");
            } catch (error) {
              return;
            }
          });
          if (!(entry !== null && entry !== void 0 && (_entry$_webSocketMess = entry._webSocketMessages) !== null && _entry$_webSocketMess !== void 0 && _entry$_webSocketMess.length)) {
            return;
          }
          var token = (_entry$request$queryS = (0, _find["default"])(_context2 = entry.request.queryString).call(_context2, function(param) {
            return (param === null || param === void 0 ? void 0 : param.name) === "t";
          })) === null || _entry$request$queryS === void 0 ? void 0 : _entry$request$queryS.value;
          var _ref2 = tryDecodeJWT(token) || {}, botId = _ref2.bot, userId = _ref2.user;
          var activities = (_entry$_webSocketMess2 = entry._webSocketMessages) === null || _entry$_webSocketMess2 === void 0 ? void 0 : (0, _reduce["default"])(_entry$_webSocketMess2).call(_entry$_webSocketMess2, function(activities2, _ref3) {
            var data = _ref3.data;
            try {
              var _JSON$parse, _JSON$parse$activitie, _JSON$parse$activitie2;
              activities2.push.apply(activities2, (0, _toConsumableArray2["default"])((_JSON$parse = JSON.parse(data)) === null || _JSON$parse === void 0 ? void 0 : (_JSON$parse$activitie = _JSON$parse.activities) === null || _JSON$parse$activitie === void 0 ? void 0 : (_JSON$parse$activitie2 = (0, _filter["default"])(_JSON$parse$activitie)) === null || _JSON$parse$activitie2 === void 0 ? void 0 : _JSON$parse$activitie2.call(_JSON$parse$activitie, Boolean)));
            } catch (error) {
            }
            return activities2;
          }, []);
          return (0, _simpleUpdateIn["default"])(activities, [function() {
            return true;
          }, "from"], function(from) {
            var id = from === null || from === void 0 ? void 0 : from.id;
            var isBot = id === botId;
            var isUser = id === userId;
            if (isBot) {
              return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, from), {}, {
                role: "bot"
              });
            } else if (isUser) {
              return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, from), {}, {
                role: "user"
              });
            }
            return from;
          });
        } catch (error) {
        }
      }
    }
  });

  // node_modules/core-js-pure/internals/copy-constructor-properties.js
  var require_copy_constructor_properties2 = __commonJS({
    "node_modules/core-js-pure/internals/copy-constructor-properties.js": function(exports, module) {
      var hasOwn = require_has_own_property();
      var ownKeys = require_own_keys2();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      module.exports = function(target, source, exceptions) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/error-stack-clear.js
  var require_error_stack_clear2 = __commonJS({
    "node_modules/core-js-pure/internals/error-stack-clear.js": function(exports, module) {
      var uncurryThis = require_function_uncurry_this();
      var $Error = Error;
      var replace = uncurryThis("".replace);
      var TEST = function(arg) {
        return String($Error(arg).stack);
      }("zxcasd");
      var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
      var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
      module.exports = function(stack, dropEntries) {
        if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error.prepareStackTrace) {
          while (dropEntries--)
            stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
        }
        return stack;
      };
    }
  });

  // node_modules/core-js-pure/internals/install-error-cause.js
  var require_install_error_cause2 = __commonJS({
    "node_modules/core-js-pure/internals/install-error-cause.js": function(exports, module) {
      var isObject = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      module.exports = function(O, options) {
        if (isObject(options) && "cause" in options) {
          createNonEnumerableProperty(O, "cause", options.cause);
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/normalize-string-argument.js
  var require_normalize_string_argument2 = __commonJS({
    "node_modules/core-js-pure/internals/normalize-string-argument.js": function(exports, module) {
      var toString = require_to_string();
      module.exports = function(argument, $default) {
        return argument === void 0 ? arguments.length < 2 ? "" : $default : toString(argument);
      };
    }
  });

  // node_modules/core-js-pure/internals/error-stack-installable.js
  var require_error_stack_installable2 = __commonJS({
    "node_modules/core-js-pure/internals/error-stack-installable.js": function(exports, module) {
      var fails = require_fails();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = !fails(function() {
        var error = Error("a");
        if (!("stack" in error))
          return true;
        Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
        return error.stack !== 7;
      });
    }
  });

  // node_modules/core-js-pure/modules/es.aggregate-error.constructor.js
  var require_es_aggregate_error_constructor2 = __commonJS({
    "node_modules/core-js-pure/modules/es.aggregate-error.constructor.js": function() {
      "use strict";
      var $ = require_export();
      var isPrototypeOf = require_object_is_prototype_of();
      var getPrototypeOf = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var copyConstructorProperties = require_copy_constructor_properties2();
      var create = require_object_create();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      var clearErrorStack = require_error_stack_clear2();
      var installErrorCause = require_install_error_cause2();
      var iterate = require_iterate();
      var normalizeStringArgument = require_normalize_string_argument2();
      var wellKnownSymbol = require_well_known_symbol();
      var ERROR_STACK_INSTALLABLE = require_error_stack_installable2();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var $Error = Error;
      var push = [].push;
      var $AggregateError = function AggregateError(errors, message) {
        var options = arguments.length > 2 ? arguments[2] : void 0;
        var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
        var that;
        if (setPrototypeOf) {
          that = setPrototypeOf($Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
        } else {
          that = isInstance ? this : create(AggregateErrorPrototype);
          createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
        }
        if (message !== void 0)
          createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
        if (ERROR_STACK_INSTALLABLE)
          createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
        installErrorCause(that, options);
        var errorsArray = [];
        iterate(errors, push, { that: errorsArray });
        createNonEnumerableProperty(that, "errors", errorsArray);
        return that;
      };
      if (setPrototypeOf)
        setPrototypeOf($AggregateError, $Error);
      else
        copyConstructorProperties($AggregateError, $Error, { name: true });
      var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
        constructor: createPropertyDescriptor(1, $AggregateError),
        message: createPropertyDescriptor(1, ""),
        name: createPropertyDescriptor(1, "AggregateError")
      });
      $({ global: true, constructor: true, arity: 2 }, {
        AggregateError: $AggregateError
      });
    }
  });

  // node_modules/core-js-pure/modules/es.aggregate-error.js
  var require_es_aggregate_error2 = __commonJS({
    "node_modules/core-js-pure/modules/es.aggregate-error.js": function() {
      require_es_aggregate_error_constructor2();
    }
  });

  // node_modules/core-js-pure/internals/set-species.js
  var require_set_species2 = __commonJS({
    "node_modules/core-js-pure/internals/set-species.js": function(exports, module) {
      "use strict";
      var getBuiltIn = require_get_built_in();
      var definePropertyModule = require_object_define_property();
      var wellKnownSymbol = require_well_known_symbol();
      var DESCRIPTORS = require_descriptors();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function() {
              return this;
            }
          });
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/species-constructor.js
  var require_species_constructor2 = __commonJS({
    "node_modules/core-js-pure/internals/species-constructor.js": function(exports, module) {
      var anObject = require_an_object();
      var aConstructor = require_a_constructor();
      var isNullOrUndefined = require_is_null_or_undefined();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === void 0 || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-is-ios.js
  var require_engine_is_ios2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-ios.js": function(exports, module) {
      var userAgent = require_engine_user_agent();
      module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
    }
  });

  // node_modules/core-js-pure/internals/task.js
  var require_task2 = __commonJS({
    "node_modules/core-js-pure/internals/task.js": function(exports, module) {
      var global2 = require_global();
      var apply = require_function_apply();
      var bind = require_function_bind_context();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var fails = require_fails();
      var html = require_html();
      var arraySlice = require_array_slice();
      var createElement = require_document_create_element();
      var validateArgumentsLength = require_validate_arguments_length2();
      var IS_IOS = require_engine_is_ios2();
      var IS_NODE = require_engine_is_node2();
      var set = global2.setImmediate;
      var clear = global2.clearImmediate;
      var process2 = global2.process;
      var Dispatch = global2.Dispatch;
      var Function2 = global2.Function;
      var MessageChannel2 = global2.MessageChannel;
      var String2 = global2.String;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = "onreadystatechange";
      var $location;
      var defer;
      var channel;
      var port;
      try {
        $location = global2.location;
      } catch (error) {
      }
      var run = function(id) {
        if (hasOwn(queue, id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };
      var runner = function(id) {
        return function() {
          run(id);
        };
      };
      var listener = function(event) {
        run(event.data);
      };
      var post = function(id) {
        global2.postMessage(String2(id), $location.protocol + "//" + $location.host);
      };
      if (!set || !clear) {
        set = function setImmediate(handler) {
          validateArgumentsLength(arguments.length, 1);
          var fn = isCallable(handler) ? handler : Function2(handler);
          var args = arraySlice(arguments, 1);
          queue[++counter] = function() {
            apply(fn, void 0, args);
          };
          defer(counter);
          return counter;
        };
        clear = function clearImmediate(id) {
          delete queue[id];
        };
        if (IS_NODE) {
          defer = function(id) {
            process2.nextTick(runner(id));
          };
        } else if (Dispatch && Dispatch.now) {
          defer = function(id) {
            Dispatch.now(runner(id));
          };
        } else if (MessageChannel2 && !IS_IOS) {
          channel = new MessageChannel2();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port);
        } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && $location && $location.protocol !== "file:" && !fails(post)) {
          defer = post;
          global2.addEventListener("message", listener, false);
        } else if (ONREADYSTATECHANGE in createElement("script")) {
          defer = function(id) {
            html.appendChild(createElement("script"))[ONREADYSTATECHANGE] = function() {
              html.removeChild(this);
              run(id);
            };
          };
        } else {
          defer = function(id) {
            setTimeout(runner(id), 0);
          };
        }
      }
      module.exports = {
        set: set,
        clear: clear
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-is-ios-pebble.js
  var require_engine_is_ios_pebble2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-ios-pebble.js": function(exports, module) {
      var userAgent = require_engine_user_agent();
      var global2 = require_global();
      module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
    }
  });

  // node_modules/core-js-pure/internals/engine-is-webos-webkit.js
  var require_engine_is_webos_webkit2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-webos-webkit.js": function(exports, module) {
      var userAgent = require_engine_user_agent();
      module.exports = /web0s(?!.*chrome)/i.test(userAgent);
    }
  });

  // node_modules/core-js-pure/internals/microtask.js
  var require_microtask2 = __commonJS({
    "node_modules/core-js-pure/internals/microtask.js": function(exports, module) {
      var global2 = require_global();
      var bind = require_function_bind_context();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var macrotask = require_task2().set;
      var IS_IOS = require_engine_is_ios2();
      var IS_IOS_PEBBLE = require_engine_is_ios_pebble2();
      var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit2();
      var IS_NODE = require_engine_is_node2();
      var MutationObserver = global2.MutationObserver || global2.WebKitMutationObserver;
      var document2 = global2.document;
      var process2 = global2.process;
      var Promise2 = global2.Promise;
      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush;
      var head;
      var last;
      var notify;
      var toggle;
      var node;
      var promise;
      var then;
      if (!queueMicrotask) {
        flush = function() {
          var parent, fn;
          if (IS_NODE && (parent = process2.domain))
            parent.exit();
          while (head) {
            fn = head.fn;
            head = head.next;
            try {
              fn();
            } catch (error) {
              if (head)
                notify();
              else
                last = void 0;
              throw error;
            }
          }
          last = void 0;
          if (parent)
            parent.enter();
        };
        if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document2) {
          toggle = true;
          node = document2.createTextNode("");
          new MutationObserver(flush).observe(node, { characterData: true });
          notify = function() {
            node.data = toggle = !toggle;
          };
        } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
          promise = Promise2.resolve(void 0);
          promise.constructor = Promise2;
          then = bind(promise.then, promise);
          notify = function() {
            then(flush);
          };
        } else if (IS_NODE) {
          notify = function() {
            process2.nextTick(flush);
          };
        } else {
          macrotask = bind(macrotask, global2);
          notify = function() {
            macrotask(flush);
          };
        }
      }
      module.exports = queueMicrotask || function(fn) {
        var task = { fn: fn, next: void 0 };
        if (last)
          last.next = task;
        if (!head) {
          head = task;
          notify();
        }
        last = task;
      };
    }
  });

  // node_modules/core-js-pure/internals/host-report-errors.js
  var require_host_report_errors2 = __commonJS({
    "node_modules/core-js-pure/internals/host-report-errors.js": function(exports, module) {
      var global2 = require_global();
      module.exports = function(a, b) {
        var console2 = global2.console;
        if (console2 && console2.error) {
          arguments.length == 1 ? console2.error(a) : console2.error(a, b);
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/perform.js
  var require_perform2 = __commonJS({
    "node_modules/core-js-pure/internals/perform.js": function(exports, module) {
      module.exports = function(exec) {
        try {
          return { error: false, value: exec() };
        } catch (error) {
          return { error: true, value: error };
        }
      };
    }
  });

  // node_modules/core-js-pure/internals/queue.js
  var require_queue2 = __commonJS({
    "node_modules/core-js-pure/internals/queue.js": function(exports, module) {
      var Queue = function() {
        this.head = null;
        this.tail = null;
      };
      Queue.prototype = {
        add: function(item) {
          var entry = { item: item, next: null };
          if (this.head)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
        },
        get: function() {
          var entry = this.head;
          if (entry) {
            this.head = entry.next;
            if (this.tail === entry)
              this.tail = null;
            return entry.item;
          }
        }
      };
      module.exports = Queue;
    }
  });

  // node_modules/core-js-pure/internals/promise-native-constructor.js
  var require_promise_native_constructor2 = __commonJS({
    "node_modules/core-js-pure/internals/promise-native-constructor.js": function(exports, module) {
      var global2 = require_global();
      module.exports = global2.Promise;
    }
  });

  // node_modules/core-js-pure/internals/engine-is-deno.js
  var require_engine_is_deno2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-deno.js": function(exports, module) {
      module.exports = typeof Deno == "object" && Deno && typeof Deno.version == "object";
    }
  });

  // node_modules/core-js-pure/internals/engine-is-browser.js
  var require_engine_is_browser2 = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-browser.js": function(exports, module) {
      var IS_DENO = require_engine_is_deno2();
      var IS_NODE = require_engine_is_node2();
      module.exports = !IS_DENO && !IS_NODE && typeof window == "object" && typeof document == "object";
    }
  });

  // node_modules/core-js-pure/internals/promise-constructor-detection.js
  var require_promise_constructor_detection2 = __commonJS({
    "node_modules/core-js-pure/internals/promise-constructor-detection.js": function(exports, module) {
      var global2 = require_global();
      var NativePromiseConstructor = require_promise_native_constructor2();
      var isCallable = require_is_callable();
      var isForced = require_is_forced();
      var inspectSource = require_inspect_source();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_BROWSER = require_engine_is_browser2();
      var IS_DENO = require_engine_is_deno2();
      var IS_PURE = require_is_pure();
      var V8_VERSION = require_engine_v8_version();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var SPECIES = wellKnownSymbol("species");
      var SUBCLASSING = false;
      var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
      var FORCED_PROMISE_CONSTRUCTOR = isForced("Promise", function() {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
          return true;
        if (IS_PURE && !(NativePromisePrototype["catch"] && NativePromisePrototype["finally"]))
          return true;
        if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {
          var promise = new NativePromiseConstructor(function(resolve) {
            resolve(1);
          });
          var FakePromise = function(exec) {
            exec(function() {
            }, function() {
            });
          };
          var constructor = promise.constructor = {};
          constructor[SPECIES] = FakePromise;
          SUBCLASSING = promise.then(function() {
          }) instanceof FakePromise;
          if (!SUBCLASSING)
            return true;
        }
        return !GLOBAL_CORE_JS_PROMISE && (IS_BROWSER || IS_DENO) && !NATIVE_PROMISE_REJECTION_EVENT;
      });
      module.exports = {
        CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
        REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
        SUBCLASSING: SUBCLASSING
      };
    }
  });

  // node_modules/core-js-pure/internals/new-promise-capability.js
  var require_new_promise_capability2 = __commonJS({
    "node_modules/core-js-pure/internals/new-promise-capability.js": function(exports, module) {
      "use strict";
      var aCallable = require_a_callable();
      var $TypeError = TypeError;
      var PromiseCapability = function(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
          if (resolve !== void 0 || reject !== void 0)
            throw $TypeError("Bad Promise constructor");
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aCallable(resolve);
        this.reject = aCallable(reject);
      };
      module.exports.f = function(C) {
        return new PromiseCapability(C);
      };
    }
  });

  // node_modules/core-js-pure/modules/es.promise.constructor.js
  var require_es_promise_constructor2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.constructor.js": function() {
      "use strict";
      var $ = require_export();
      var IS_PURE = require_is_pure();
      var IS_NODE = require_engine_is_node2();
      var global2 = require_global();
      var call = require_function_call();
      var defineBuiltIn = require_define_built_in();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag();
      var setSpecies = require_set_species2();
      var aCallable = require_a_callable();
      var isCallable = require_is_callable();
      var isObject = require_is_object();
      var anInstance = require_an_instance();
      var speciesConstructor = require_species_constructor2();
      var task = require_task2().set;
      var microtask = require_microtask2();
      var hostReportErrors = require_host_report_errors2();
      var perform = require_perform2();
      var Queue = require_queue2();
      var InternalStateModule = require_internal_state();
      var NativePromiseConstructor = require_promise_native_constructor2();
      var PromiseConstructorDetection = require_promise_constructor_detection2();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var PROMISE = "Promise";
      var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
      var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
      var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var setInternalState = InternalStateModule.set;
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var PromiseConstructor = NativePromiseConstructor;
      var PromisePrototype = NativePromisePrototype;
      var TypeError2 = global2.TypeError;
      var document2 = global2.document;
      var process2 = global2.process;
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
      var UNHANDLED_REJECTION = "unhandledrejection";
      var REJECTION_HANDLED = "rejectionhandled";
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var Internal;
      var OwnPromiseCapability;
      var PromiseWrapper;
      var nativeThen;
      var isThenable = function(it) {
        var then;
        return isObject(it) && isCallable(then = it.then) ? then : false;
      };
      var callReaction = function(reaction, state) {
        var value = state.value;
        var ok = state.state == FULFILLED;
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED)
                onHandleUnhandled(state);
              state.rejection = HANDLED;
            }
            if (handler === true)
              result = value;
            else {
              if (domain)
                domain.enter();
              result = handler(value);
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError2("Promise-chain cycle"));
            } else if (then = isThenable(result)) {
              call(then, result, resolve, reject);
            } else
              resolve(result);
          } else
            reject(value);
        } catch (error) {
          if (domain && !exited)
            domain.exit();
          reject(error);
        }
      };
      var notify = function(state, isReject) {
        if (state.notified)
          return;
        state.notified = true;
        microtask(function() {
          var reactions = state.reactions;
          var reaction;
          while (reaction = reactions.get()) {
            callReaction(reaction, state);
          }
          state.notified = false;
          if (isReject && !state.rejection)
            onUnhandled(state);
        });
      };
      var dispatchEvent = function(name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
          event = document2.createEvent("Event");
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global2.dispatchEvent(event);
        } else
          event = { promise: promise, reason: reason };
        if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global2["on" + name]))
          handler(event);
        else if (name === UNHANDLED_REJECTION)
          hostReportErrors("Unhandled promise rejection", reason);
      };
      var onUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;
          if (IS_UNHANDLED) {
            result = perform(function() {
              if (IS_NODE) {
                process2.emit("unhandledRejection", value, promise);
              } else
                dispatchEvent(UNHANDLED_REJECTION, promise, value);
            });
            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error)
              throw result.value;
          }
        });
      };
      var isUnhandled = function(state) {
        return state.rejection !== HANDLED && !state.parent;
      };
      var onHandleUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          if (IS_NODE) {
            process2.emit("rejectionHandled", promise);
          } else
            dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };
      var bind = function(fn, state, unwrap) {
        return function(value) {
          fn(state, value, unwrap);
        };
      };
      var internalReject = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
      };
      var internalResolve = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        try {
          if (state.facade === value)
            throw TypeError2("Promise can't be resolved itself");
          var then = isThenable(value);
          if (then) {
            microtask(function() {
              var wrapper = { done: false };
              try {
                call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
              } catch (error) {
                internalReject(wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
          }
        } catch (error) {
          internalReject({ done: false }, error, state);
        }
      };
      if (FORCED_PROMISE_CONSTRUCTOR) {
        PromiseConstructor = function Promise2(executor) {
          anInstance(this, PromisePrototype);
          aCallable(executor);
          call(Internal, this);
          var state = getInternalPromiseState(this);
          try {
            executor(bind(internalResolve, state), bind(internalReject, state));
          } catch (error) {
            internalReject(state, error);
          }
        };
        PromisePrototype = PromiseConstructor.prototype;
        Internal = function Promise2(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: new Queue(),
            rejection: false,
            state: PENDING,
            value: void 0
          });
        };
        Internal.prototype = defineBuiltIn(PromisePrototype, "then", function then(onFulfilled, onRejected) {
          var state = getInternalPromiseState(this);
          var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
          state.parent = true;
          reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
          reaction.fail = isCallable(onRejected) && onRejected;
          reaction.domain = IS_NODE ? process2.domain : void 0;
          if (state.state == PENDING)
            state.reactions.add(reaction);
          else
            microtask(function() {
              callReaction(reaction, state);
            });
          return reaction.promise;
        });
        OwnPromiseCapability = function() {
          var promise = new Internal();
          var state = getInternalPromiseState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, state);
          this.reject = bind(internalReject, state);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
        if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
          nativeThen = NativePromisePrototype.then;
          if (!NATIVE_PROMISE_SUBCLASSING) {
            defineBuiltIn(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
              var that = this;
              return new PromiseConstructor(function(resolve, reject) {
                call(nativeThen, that, resolve, reject);
              }).then(onFulfilled, onRejected);
            }, { unsafe: true });
          }
          try {
            delete NativePromisePrototype.constructor;
          } catch (error) {
          }
          if (setPrototypeOf) {
            setPrototypeOf(NativePromisePrototype, PromisePrototype);
          }
        }
      }
      $({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
    }
  });

  // node_modules/core-js-pure/internals/promise-statics-incorrect-iteration.js
  var require_promise_statics_incorrect_iteration2 = __commonJS({
    "node_modules/core-js-pure/internals/promise-statics-incorrect-iteration.js": function(exports, module) {
      var NativePromiseConstructor = require_promise_native_constructor2();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration2();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection2().CONSTRUCTOR;
      module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function(iterable) {
        NativePromiseConstructor.all(iterable).then(void 0, function() {
        });
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.all.js
  var require_es_promise_all2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.all.js": function() {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var perform = require_perform2();
      var iterate = require_iterate();
      var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration2();
      $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call($promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.catch.js
  var require_es_promise_catch2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.catch.js": function() {
      "use strict";
      var $ = require_export();
      var IS_PURE = require_is_pure();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection2().CONSTRUCTOR;
      var NativePromiseConstructor = require_promise_native_constructor2();
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var defineBuiltIn = require_define_built_in();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      $({ target: "Promise", proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
        "catch": function(onRejected) {
          return this.then(void 0, onRejected);
        }
      });
      if (!IS_PURE && isCallable(NativePromiseConstructor)) {
        method = getBuiltIn("Promise").prototype["catch"];
        if (NativePromisePrototype["catch"] !== method) {
          defineBuiltIn(NativePromisePrototype, "catch", method, { unsafe: true });
        }
      }
      var method;
    }
  });

  // node_modules/core-js-pure/modules/es.promise.race.js
  var require_es_promise_race2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.race.js": function() {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var perform = require_perform2();
      var iterate = require_iterate();
      var PROMISE_STATICS_INCORRECT_ITERATION = require_promise_statics_incorrect_iteration2();
      $({ target: "Promise", stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            iterate(iterable, function(promise) {
              call($promiseResolve, C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.reject.js
  var require_es_promise_reject2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.reject.js": function() {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection2().CONSTRUCTOR;
      $({ target: "Promise", stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
        reject: function reject(r) {
          var capability = newPromiseCapabilityModule.f(this);
          call(capability.reject, void 0, r);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/internals/promise-resolve.js
  var require_promise_resolve2 = __commonJS({
    "node_modules/core-js-pure/internals/promise-resolve.js": function(exports, module) {
      var anObject = require_an_object();
      var isObject = require_is_object();
      var newPromiseCapability = require_new_promise_capability2();
      module.exports = function(C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C)
          return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
    }
  });

  // node_modules/core-js-pure/modules/es.promise.resolve.js
  var require_es_promise_resolve2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.resolve.js": function() {
      "use strict";
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var IS_PURE = require_is_pure();
      var NativePromiseConstructor = require_promise_native_constructor2();
      var FORCED_PROMISE_CONSTRUCTOR = require_promise_constructor_detection2().CONSTRUCTOR;
      var promiseResolve = require_promise_resolve2();
      var PromiseConstructorWrapper = getBuiltIn("Promise");
      var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;
      $({ target: "Promise", stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
        resolve: function resolve(x) {
          return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.js
  var require_es_promise2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.js": function() {
      require_es_promise_constructor2();
      require_es_promise_all2();
      require_es_promise_catch2();
      require_es_promise_race2();
      require_es_promise_reject2();
      require_es_promise_resolve2();
    }
  });

  // node_modules/core-js-pure/modules/es.promise.all-settled.js
  var require_es_promise_all_settled2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.all-settled.js": function() {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var perform = require_perform2();
      var iterate = require_iterate();
      $({ target: "Promise", stat: true }, {
        allSettled: function allSettled(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "fulfilled", value: value };
                --remaining || resolve(values);
              }, function(error) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "rejected", reason: error };
                --remaining || resolve(values);
              });
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.any.js
  var require_es_promise_any2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.any.js": function() {
      "use strict";
      var $ = require_export();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var getBuiltIn = require_get_built_in();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var perform = require_perform2();
      var iterate = require_iterate();
      var PROMISE_ANY_ERROR = "No one promise resolved";
      $({ target: "Promise", stat: true }, {
        any: function any(iterable) {
          var C = this;
          var AggregateError = getBuiltIn("AggregateError");
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyRejected = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyResolved = true;
                resolve(value);
              }, function(error) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyRejected = true;
                errors[index] = error;
                --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
              });
            });
            --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/es.promise.finally.js
  var require_es_promise_finally2 = __commonJS({
    "node_modules/core-js-pure/modules/es.promise.finally.js": function() {
      "use strict";
      var $ = require_export();
      var IS_PURE = require_is_pure();
      var NativePromiseConstructor = require_promise_native_constructor2();
      var fails = require_fails();
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var speciesConstructor = require_species_constructor2();
      var promiseResolve = require_promise_resolve2();
      var defineBuiltIn = require_define_built_in();
      var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
      var NON_GENERIC = !!NativePromiseConstructor && fails(function() {
        NativePromisePrototype["finally"].call({ then: function() {
        } }, function() {
        });
      });
      $({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
        "finally": function(onFinally) {
          var C = speciesConstructor(this, getBuiltIn("Promise"));
          var isFunction = isCallable(onFinally);
          return this.then(isFunction ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
              return x;
            });
          } : onFinally, isFunction ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
              throw e;
            });
          } : onFinally);
        }
      });
      if (!IS_PURE && isCallable(NativePromiseConstructor)) {
        method = getBuiltIn("Promise").prototype["finally"];
        if (NativePromisePrototype["finally"] !== method) {
          defineBuiltIn(NativePromisePrototype, "finally", method, { unsafe: true });
        }
      }
      var method;
    }
  });

  // node_modules/core-js-pure/es/promise/index.js
  var require_promise6 = __commonJS({
    "node_modules/core-js-pure/es/promise/index.js": function(exports, module) {
      require_es_aggregate_error2();
      require_es_array_iterator();
      require_es_object_to_string();
      require_es_promise2();
      require_es_promise_all_settled2();
      require_es_promise_any2();
      require_es_promise_finally2();
      require_es_string_iterator();
      var path = require_path();
      module.exports = path.Promise;
    }
  });

  // node_modules/core-js-pure/stable/promise/index.js
  var require_promise7 = __commonJS({
    "node_modules/core-js-pure/stable/promise/index.js": function(exports, module) {
      var parent = require_promise6();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/promise.js
  var require_promise8 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/promise.js": function(exports, module) {
      module.exports = require_promise7();
    }
  });

  // lib/landing/ui/FileUploadButton.js
  var require_FileUploadButton = __commonJS({
    "lib/landing/ui/FileUploadButton.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _promise = _interopRequireDefault2(require_promise8());
      var _propTypes = _interopRequireDefault2(require_prop_types());
      var _react2 = _interopRequireWildcard2(require_react());
      var _emotion = require_emotion_cjs();
      var ROOT_CSS = (0, _emotion.css)({
        display: "inline",
        position: "relative",
        ".file-upload-button__file": {
          height: "100%",
          left: 0,
          opacity: 0,
          position: "absolute",
          top: 0,
          width: "100%"
        }
      });
      var FileUploadButton = function FileUploadButton2(_ref) {
        var children = _ref.children, onError = _ref.onError, onUpload = _ref.onUpload, resultType = _ref.resultType;
        var handleChange = (0, _react2.useCallback)(function(_ref2) {
          var target = _ref2.target;
          new _promise["default"](function(resolve, reject) {
            var _target$files = (0, _slicedToArray2["default"])(target.files, 1), firstFile = _target$files[0];
            if (!firstFile) {
              return;
            }
            var reader = new FileReader();
            reader.addEventListener("error", function() {
              return reject(reader.error);
            }, {
              once: true
            });
            reader.addEventListener("load", function() {
              return resolve(reader.result);
            }, {
              once: true
            });
            switch (resultType) {
              case "text":
                reader.readAsText(firstFile);
                break;
              default:
                break;
            }
          }).then(onUpload, onError)["finally"](function() {
            target.value = "";
          });
        }, [onUpload]);
        var handleSubmit = (0, _react2.useCallback)(function(event) {
          event.preventDefault();
          event.stopPropagation();
        });
        return /* @__PURE__ */ _react2["default"].createElement("form", {
          className: (0, _emotion.cx)(ROOT_CSS, "file-upload-button"),
          onSubmit: handleSubmit
        }, /* @__PURE__ */ _react2["default"].createElement("button", {
          type: "button"
        }, children), /* @__PURE__ */ _react2["default"].createElement("input", {
          className: "file-upload-button__file",
          onChange: handleChange,
          type: "file"
        }));
      };
      FileUploadButton.defaultProps = {
        children: void 0,
        onError: void 0,
        onUpload: void 0,
        resultType: "text"
      };
      FileUploadButton.propTypes = {
        children: _propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].arrayOf(_propTypes["default"].element), _propTypes["default"].string]),
        onError: _propTypes["default"].func,
        onUpload: _propTypes["default"].func,
        resultType: _propTypes["default"].oneOf(["text"])
      };
      var _default = FileUploadButton;
      exports["default"] = _default;
    }
  });

  // lib/landing/ui/TranscriptDialog.js
  var require_TranscriptDialog = __commonJS({
    "lib/landing/ui/TranscriptDialog.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _now = _interopRequireDefault2(require_now3());
      var _isArray = _interopRequireDefault2(require_is_array8());
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _emotion = require_emotion_cjs();
      var _react2 = _interopRequireWildcard2(require_react());
      var _useTranscriptDialogContent = _interopRequireDefault2(require_useTranscriptDialogContent());
      var _useTranscriptDialogVisible = _interopRequireDefault2(require_useTranscriptDialogVisible());
      var _parseChatHistoryFromHARFile = _interopRequireDefault2(require_parseChatHistoryFromHARFile());
      var _FileUploadButton = _interopRequireDefault2(require_FileUploadButton());
      var DIALOG_CSS = (0, _emotion.css)({
        "&.transcript-dialog": {
          backgroundColor: "White",
          borderRadius: 4,
          boxShadow: "0 0 10px rgba(0, 0, 0, .05)",
          bottom: 20,
          boxSizing: "border-box",
          display: "flex",
          flexDirection: "column",
          left: 20,
          position: "fixed",
          right: 20,
          top: 20,
          "& .transcript-dialog__button-bar": {
            padding: 5
          },
          "& .transcript-dialog__body": {
            height: "100%",
            overflow: "scrolling",
            width: "100%"
          },
          "& .transcript-dialog__text-area": {
            backgroundColor: "Transparent",
            border: 0,
            boxSizing: "border-box",
            flex: 1,
            fontFamily: "Cascadia Code, Consolas, monospace",
            height: "100%",
            outline: 0,
            padding: 5,
            resize: "none",
            width: "100%"
          },
          "& .transcript-dialog__text-area::placeholder": {
            color: "#CCC"
          },
          "& .transcript-dialog__text-area--invalid": {
            color: "Red"
          }
        }
      });
      var NOW = (0, _now["default"])();
      var SAMPLE_TRANSCRIPT = [{
        id: "a-00001",
        text: "What can I do for you?",
        timestamp: new Date(NOW - 12e4).toISOString(),
        type: "message",
        attachments: [{
          content: {
            type: "AdaptiveCard",
            body: [{
              type: "TextBlock",
              text: "You can choose one of the followings."
            }],
            $schema: "http://adaptivecards.io/schemas/adaptive-card.json",
            version: "1.2",
            actions: [{
              type: "Action.Submit",
              title: "What time is it?"
            }, {
              type: "Action.Submit",
              title: "What is the weather?"
            }]
          },
          contentType: "application/vnd.microsoft.card.adaptive"
        }]
      }, {
        from: {
          role: "user"
        },
        id: "a-00002",
        text: "What time is it?",
        timestamp: new Date(NOW - 6e4).toISOString(),
        type: "message"
      }, {
        id: "a-00003",
        text: "It's ".concat(new Date(NOW).toLocaleTimeString(), "."),
        timestamp: new Date(NOW).toISOString(),
        type: "message"
      }];
      function parseTranscript(value) {
        try {
          var parsedTranscript = JSON.parse(value);
          if ((0, _isArray["default"])(parsedTranscript)) {
            return parsedTranscript;
          }
        } catch (err) {
        }
        return false;
      }
      var TranscriptDialog = function TranscriptDialog2() {
        var _useTranscriptDialogC = (0, _useTranscriptDialogContent["default"])(), _useTranscriptDialogC2 = (0, _slicedToArray2["default"])(_useTranscriptDialogC, 2), savedContent = _useTranscriptDialogC2[0], setSavedContent = _useTranscriptDialogC2[1];
        var _useTranscriptDialogV = (0, _useTranscriptDialogVisible["default"])(), _useTranscriptDialogV2 = (0, _slicedToArray2["default"])(_useTranscriptDialogV, 2), setVisible = _useTranscriptDialogV2[1];
        var _useState = (0, _react2.useState)(function() {
          var transcript = parseTranscript(savedContent);
          return transcript && transcript.length ? (0, _stringify["default"])(transcript, null, 2) + "\n" : "";
        }), _useState2 = (0, _slicedToArray2["default"])(_useState, 2), editedContent = _useState2[0], setEditedContent = _useState2[1];
        var handleUploadHARFile = (0, _react2.useCallback)(function(text) {
          var chatHistory = (0, _parseChatHistoryFromHARFile["default"])(text);
          setEditedContent(chatHistory ? (0, _stringify["default"])(chatHistory, null, 2) : "");
        }, []);
        var handleLoadSampleButtonClick = (0, _react2.useCallback)(function() {
          return setEditedContent((0, _stringify["default"])(SAMPLE_TRANSCRIPT, null, 2) + "\n");
        }, [setEditedContent]);
        var handleSaveButtonClick = (0, _react2.useCallback)(function() {
          if (editedContent) {
            var transcript = parseTranscript(editedContent);
            if (!transcript) {
              return;
            }
            setSavedContent(transcript.length ? (0, _stringify["default"])(transcript, null, 2) : "");
            setVisible(false);
          } else {
            setSavedContent("");
            setVisible(false);
          }
        }, [editedContent, setSavedContent, setVisible]);
        var handleTextAreaChange = (0, _react2.useCallback)(function(_ref) {
          var value = _ref.target.value;
          return setEditedContent(value);
        }, [setEditedContent]);
        var handleTextAreaKeyDown = (0, _react2.useCallback)(function(event) {
          var ctrlKey = event.ctrlKey, key = event.key;
          if (ctrlKey && (key === "S" || key === "s")) {
            event.preventDefault();
            handleSaveButtonClick();
          } else if (key === "Escape") {
            event.preventDefault();
            setVisible(false);
          }
        }, [handleSaveButtonClick, setVisible]);
        var isValid = (0, _react2.useMemo)(function() {
          if (!editedContent) {
            return true;
          }
          return !!parseTranscript(editedContent);
        }, [editedContent]);
        return /* @__PURE__ */ _react2["default"].createElement("div", {
          className: (0, _emotion.cx)(DIALOG_CSS, "transcript-dialog")
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: "transcript-dialog__button-bar"
        }, /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !isValid,
          onClick: handleSaveButtonClick,
          type: "button"
        }, "Save (CTRL+S)"), "\xA0", /* @__PURE__ */ _react2["default"].createElement("button", {
          disabled: !!editedContent,
          onClick: handleLoadSampleButtonClick,
          type: "button"
        }, "Load sample"), "\xA0", /* @__PURE__ */ _react2["default"].createElement(_FileUploadButton["default"], {
          onUpload: handleUploadHARFile
        }, "Upload HAR file")), /* @__PURE__ */ _react2["default"].createElement("div", {
          className: "transcript-dialog__body"
        }, /* @__PURE__ */ _react2["default"].createElement("textarea", {
          autoFocus: true,
          className: (0, _emotion.cx)("transcript-dialog__text-area", {
            "transcript-dialog__text-area--invalid": !isValid
          }),
          onChange: handleTextAreaChange,
          onKeyDown: handleTextAreaKeyDown,
          placeholder: "Please paste transcript in JSON format.\n\n".concat((0, _stringify["default"])(SAMPLE_TRANSCRIPT, null, 2)),
          spellCheck: false,
          title: "Transcript in JSON format",
          value: editedContent
        })));
      };
      var _default = TranscriptDialog;
      exports["default"] = _default;
    }
  });

  // node_modules/core-js-pure/modules/es.object.create.js
  var require_es_object_create = __commonJS({
    "node_modules/core-js-pure/modules/es.object.create.js": function() {
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var create = require_object_create();
      $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        create: create
      });
    }
  });

  // node_modules/core-js-pure/es/object/create.js
  var require_create = __commonJS({
    "node_modules/core-js-pure/es/object/create.js": function(exports, module) {
      require_es_object_create();
      var path = require_path();
      var Object2 = path.Object;
      module.exports = function create(P, D) {
        return Object2.create(P, D);
      };
    }
  });

  // node_modules/core-js-pure/stable/object/create.js
  var require_create2 = __commonJS({
    "node_modules/core-js-pure/stable/object/create.js": function(exports, module) {
      var parent = require_create();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/create.js
  var require_create3 = __commonJS({
    "node_modules/core-js-pure/actual/object/create.js": function(exports, module) {
      var parent = require_create2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/create.js
  var require_create4 = __commonJS({
    "node_modules/core-js-pure/full/object/create.js": function(exports, module) {
      var parent = require_create3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/create.js
  var require_create5 = __commonJS({
    "node_modules/core-js-pure/features/object/create.js": function(exports, module) {
      module.exports = require_create4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/create.js
  var require_create6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/create.js": function(exports, module) {
      module.exports = require_create5();
    }
  });

  // node_modules/core-js-pure/modules/es.object.get-prototype-of.js
  var require_es_object_get_prototype_of = __commonJS({
    "node_modules/core-js-pure/modules/es.object.get-prototype-of.js": function() {
      var $ = require_export();
      var fails = require_fails();
      var toObject = require_to_object();
      var nativeGetPrototypeOf = require_object_get_prototype_of();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetPrototypeOf(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
        getPrototypeOf: function getPrototypeOf(it) {
          return nativeGetPrototypeOf(toObject(it));
        }
      });
    }
  });

  // node_modules/core-js-pure/es/object/get-prototype-of.js
  var require_get_prototype_of = __commonJS({
    "node_modules/core-js-pure/es/object/get-prototype-of.js": function(exports, module) {
      require_es_object_get_prototype_of();
      var path = require_path();
      module.exports = path.Object.getPrototypeOf;
    }
  });

  // node_modules/core-js-pure/stable/object/get-prototype-of.js
  var require_get_prototype_of2 = __commonJS({
    "node_modules/core-js-pure/stable/object/get-prototype-of.js": function(exports, module) {
      var parent = require_get_prototype_of();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/get-prototype-of.js
  var require_get_prototype_of3 = __commonJS({
    "node_modules/core-js-pure/actual/object/get-prototype-of.js": function(exports, module) {
      var parent = require_get_prototype_of2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/get-prototype-of.js
  var require_get_prototype_of4 = __commonJS({
    "node_modules/core-js-pure/full/object/get-prototype-of.js": function(exports, module) {
      var parent = require_get_prototype_of3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/get-prototype-of.js
  var require_get_prototype_of5 = __commonJS({
    "node_modules/core-js-pure/features/object/get-prototype-of.js": function(exports, module) {
      module.exports = require_get_prototype_of4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js
  var require_get_prototype_of6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/get-prototype-of.js": function(exports, module) {
      module.exports = require_get_prototype_of5();
    }
  });

  // node_modules/core-js-pure/modules/es.object.set-prototype-of.js
  var require_es_object_set_prototype_of = __commonJS({
    "node_modules/core-js-pure/modules/es.object.set-prototype-of.js": function() {
      var $ = require_export();
      var setPrototypeOf = require_object_set_prototype_of();
      $({ target: "Object", stat: true }, {
        setPrototypeOf: setPrototypeOf
      });
    }
  });

  // node_modules/core-js-pure/es/object/set-prototype-of.js
  var require_set_prototype_of = __commonJS({
    "node_modules/core-js-pure/es/object/set-prototype-of.js": function(exports, module) {
      require_es_object_set_prototype_of();
      var path = require_path();
      module.exports = path.Object.setPrototypeOf;
    }
  });

  // node_modules/core-js-pure/stable/object/set-prototype-of.js
  var require_set_prototype_of2 = __commonJS({
    "node_modules/core-js-pure/stable/object/set-prototype-of.js": function(exports, module) {
      var parent = require_set_prototype_of();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/object/set-prototype-of.js
  var require_set_prototype_of3 = __commonJS({
    "node_modules/core-js-pure/actual/object/set-prototype-of.js": function(exports, module) {
      var parent = require_set_prototype_of2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/object/set-prototype-of.js
  var require_set_prototype_of4 = __commonJS({
    "node_modules/core-js-pure/full/object/set-prototype-of.js": function(exports, module) {
      var parent = require_set_prototype_of3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/object/set-prototype-of.js
  var require_set_prototype_of5 = __commonJS({
    "node_modules/core-js-pure/features/object/set-prototype-of.js": function(exports, module) {
      module.exports = require_set_prototype_of4();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js
  var require_set_prototype_of6 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/object/set-prototype-of.js": function(exports, module) {
      module.exports = require_set_prototype_of5();
    }
  });

  // node_modules/core-js-pure/actual/promise/index.js
  var require_promise9 = __commonJS({
    "node_modules/core-js-pure/actual/promise/index.js": function(exports, module) {
      var parent = require_promise7();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/modules/esnext.aggregate-error.js
  var require_esnext_aggregate_error2 = __commonJS({
    "node_modules/core-js-pure/modules/esnext.aggregate-error.js": function() {
      require_es_aggregate_error2();
    }
  });

  // node_modules/core-js-pure/modules/esnext.promise.all-settled.js
  var require_esnext_promise_all_settled2 = __commonJS({
    "node_modules/core-js-pure/modules/esnext.promise.all-settled.js": function() {
      require_es_promise_all_settled2();
    }
  });

  // node_modules/core-js-pure/modules/esnext.promise.try.js
  var require_esnext_promise_try2 = __commonJS({
    "node_modules/core-js-pure/modules/esnext.promise.try.js": function() {
      "use strict";
      var $ = require_export();
      var newPromiseCapabilityModule = require_new_promise_capability2();
      var perform = require_perform2();
      $({ target: "Promise", stat: true, forced: true }, {
        "try": function(callbackfn) {
          var promiseCapability = newPromiseCapabilityModule.f(this);
          var result = perform(callbackfn);
          (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
          return promiseCapability.promise;
        }
      });
    }
  });

  // node_modules/core-js-pure/modules/esnext.promise.any.js
  var require_esnext_promise_any2 = __commonJS({
    "node_modules/core-js-pure/modules/esnext.promise.any.js": function() {
      require_es_promise_any2();
    }
  });

  // node_modules/core-js-pure/full/promise/index.js
  var require_promise10 = __commonJS({
    "node_modules/core-js-pure/full/promise/index.js": function(exports, module) {
      var parent = require_promise9();
      require_esnext_aggregate_error2();
      require_esnext_promise_all_settled2();
      require_esnext_promise_try2();
      require_esnext_promise_any2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/promise/index.js
  var require_promise11 = __commonJS({
    "node_modules/core-js-pure/features/promise/index.js": function(exports, module) {
      module.exports = require_promise10();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/promise.js
  var require_promise12 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/promise.js": function(exports, module) {
      module.exports = require_promise11();
    }
  });

  // node_modules/core-js-pure/modules/es.array.reverse.js
  var require_es_array_reverse = __commonJS({
    "node_modules/core-js-pure/modules/es.array.reverse.js": function() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var isArray = require_is_array();
      var nativeReverse = uncurryThis([].reverse);
      var test = [1, 2];
      $({ target: "Array", proto: true, forced: String(test) === String(test.reverse()) }, {
        reverse: function reverse() {
          if (isArray(this))
            this.length = this.length;
          return nativeReverse(this);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/reverse.js
  var require_reverse = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/reverse.js": function(exports, module) {
      require_es_array_reverse();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").reverse;
    }
  });

  // node_modules/core-js-pure/es/instance/reverse.js
  var require_reverse2 = __commonJS({
    "node_modules/core-js-pure/es/instance/reverse.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_reverse();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.reverse;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reverse ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/reverse.js
  var require_reverse3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/reverse.js": function(exports, module) {
      var parent = require_reverse2();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/actual/instance/reverse.js
  var require_reverse4 = __commonJS({
    "node_modules/core-js-pure/actual/instance/reverse.js": function(exports, module) {
      var parent = require_reverse3();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/full/instance/reverse.js
  var require_reverse5 = __commonJS({
    "node_modules/core-js-pure/full/instance/reverse.js": function(exports, module) {
      var parent = require_reverse4();
      module.exports = parent;
    }
  });

  // node_modules/core-js-pure/features/instance/reverse.js
  var require_reverse6 = __commonJS({
    "node_modules/core-js-pure/features/instance/reverse.js": function(exports, module) {
      module.exports = require_reverse5();
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js/instance/reverse.js
  var require_reverse7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js/instance/reverse.js": function(exports, module) {
      module.exports = require_reverse6();
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/regeneratorRuntime.js
  var require_regeneratorRuntime = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/regeneratorRuntime.js": function(exports, module) {
      var _typeof = require_typeof()["default"];
      var _Object$defineProperty = require_define_property6();
      var _Symbol = require_symbol6();
      var _Object$create = require_create6();
      var _Object$getPrototypeOf = require_get_prototype_of6();
      var _forEachInstanceProperty = require_for_each7();
      var _Object$setPrototypeOf = require_set_prototype_of6();
      var _Promise = require_promise12();
      var _reverseInstanceProperty = require_reverse7();
      var _sliceInstanceProperty = require_slice7();
      function _regeneratorRuntime() {
        "use strict";
        module.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
          return exports2;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = _Object$defineProperty || function(obj, key, desc) {
          obj[key] = desc.value;
        }, $Symbol = typeof _Symbol == "function" ? _Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define2(obj, key, value) {
          return _Object$defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          }), obj[key];
        }
        try {
          define2({}, "");
        } catch (err) {
          define2 = function define3(obj, key, value) {
            return obj[key] = value;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = _Object$create(protoGenerator.prototype), context = new Context(tryLocsList || []);
          return defineProperty(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self2, context)
          }), generator;
        }
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }
        exports2.wrap = wrap;
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define2(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = _Object$getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = _Object$create(IteratorPrototype);
        function defineIteratorMethods(prototype) {
          var _context;
          _forEachInstanceProperty(_context = ["next", "throw", "return"]).call(_context, function(method) {
            define2(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type !== "throw") {
              var result = record.arg, value = result.value;
              return value && _typeof(value) == "object" && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
                invoke("next", value2, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              }) : PromiseImpl.resolve(value).then(function(unwrapped) {
                result.value = unwrapped, resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
            reject(record.arg);
          }
          var previousPromise;
          defineProperty(this, "_invoke", {
            value: function value(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }
              return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(innerFn, self2, context) {
          var state = "suspendedStart";
          return function(method, arg) {
            if (state === "executing")
              throw new Error("Generator is already running");
            if (state === "completed") {
              if (method === "throw")
                throw arg;
              return doneResult();
            }
            for (context.method = method, context.arg = arg; ; ) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if (context.method === "next")
                context.sent = context._sent = context.arg;
              else if (context.method === "throw") {
                if (state === "suspendedStart")
                  throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else
                context.method === "return" && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                  continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }
              record.type === "throw" && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var methodName = context.method, method = delegate.iterator[methodName];
          if (method === void 0)
            return context.delegate = null, methodName === "throw" && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), context.method === "throw") || methodName !== "return" && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw")
            return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
          var info = record.arg;
          return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, context.method !== "return" && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
        }
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal", delete record.arg, entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }], _forEachInstanceProperty(tryLocsList).call(tryLocsList, pushTryEntry, this), this.reset(true);
        }
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod)
              return iteratorMethod.call(iterable);
            if (typeof iterable.next == "function")
              return iterable;
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                for (; ++i < iterable.length; ) {
                  if (hasOwn.call(iterable, i))
                    return next2.value = iterable[i], next2.done = false, next2;
                }
                return next2.value = void 0, next2.done = true, next2;
              };
              return next.next = next;
            }
          }
          return {
            next: doneResult
          };
        }
        function doneResult() {
          return {
            value: void 0,
            done: true
          };
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: true
        }), defineProperty(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: true
        }), GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun == "function" && genFun.constructor;
          return !!ctor && (ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction");
        }, exports2.mark = function(genFun) {
          return _Object$setPrototypeOf ? _Object$setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define2(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = _Object$create(Gp), genFun;
        }, exports2.awrap = function(arg) {
          return {
            __await: arg
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          PromiseImpl === void 0 && (PromiseImpl = _Promise);
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        }, defineIteratorMethods(Gp), define2(Gp, toStringTagSymbol, "Generator"), define2(Gp, iteratorSymbol, function() {
          return this;
        }), define2(Gp, "toString", function() {
          return "[object Generator]";
        }), exports2.keys = function(val) {
          var object = Object(val), keys = [];
          for (var key in object) {
            keys.push(key);
          }
          return _reverseInstanceProperty(keys).call(keys), function next() {
            for (; keys.length; ) {
              var key2 = keys.pop();
              if (key2 in object)
                return next.value = key2, next.done = false, next;
            }
            return next.done = true, next;
          };
        }, exports2.values = values, Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            var _context2;
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, _forEachInstanceProperty(_context2 = this.tryEntries).call(_context2, resetTryEntry), !skipTempReset)
              for (var name in this) {
                name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+_sliceInstanceProperty(name).call(name, 1)) && (this[name] = void 0);
              }
          },
          stop: function stop() {
            this.done = true;
            var rootRecord = this.tryEntries[0].completion;
            if (rootRecord.type === "throw")
              throw rootRecord.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done)
              throw exception;
            var context = this;
            function handle(loc, caught) {
              return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i], record = entry.completion;
              if (entry.tryLoc === "root")
                return handle("end");
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                } else {
                  if (!hasFinally)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw")
              throw record.arg;
            return record.type === "break" || record.type === "continue" ? this.next = record.arg : record.type === "return" ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : record.type === "normal" && afterLoc && (this.next = afterLoc), ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc)
                return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            }, this.method === "next" && (this.arg = void 0), ContinueSentinel;
          }
        }, exports2;
      }
      module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js
  var require_asyncToGenerator = __commonJS({
    "node_modules/@babel/runtime-corejs3/helpers/asyncToGenerator.js": function(exports, module) {
      var _Promise = require_promise12();
      function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          _Promise.resolve(value).then(_next, _throw);
        }
      }
      function _asyncToGenerator(fn) {
        return function() {
          var self2 = this, args = arguments;
          return new _Promise(function(resolve, reject) {
            var gen = fn.apply(self2, args);
            function _next(value) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
              asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(void 0);
          });
        };
      }
      module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/core-js-pure/internals/object-to-array.js
  var require_object_to_array = __commonJS({
    "node_modules/core-js-pure/internals/object-to-array.js": function(exports, module) {
      var DESCRIPTORS = require_descriptors();
      var uncurryThis = require_function_uncurry_this();
      var objectKeys = require_object_keys();
      var toIndexedObject = require_to_indexed_object();
      var $propertyIsEnumerable = require_object_property_is_enumerable().f;
      var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
      var push = uncurryThis([].push);
      var createMethod = function(TO_ENTRIES) {
        return function(it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;
          while (length > i) {
            key = keys[i++];
            if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
              push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }
          return result;
        };
      };
      module.exports = {
        entries: createMethod(true),
        values: createMethod(false)
      };
    }
  });

  // node_modules/core-js-pure/modules/es.object.values.js
  var require_es_object_values = __commonJS({
    "node_modules/core-js-pure/modules/es.object.values.js": function() {
      var $ = require_export();
      var $values = require_object_to_array().values;
      $({ target: "Object", stat: true }, {
        values: function values(O) {
          return $values(O);
        }
      });
    }
  });

  // node_modules/core-js-pure/es/object/values.js
  var require_values5 = __commonJS({
    "node_modules/core-js-pure/es/object/values.js": function(exports, module) {
      require_es_object_values();
      var path = require_path();
      module.exports = path.Object.values;
    }
  });

  // node_modules/core-js-pure/stable/object/values.js
  var require_values6 = __commonJS({
    "node_modules/core-js-pure/stable/object/values.js": function(exports, module) {
      var parent = require_values5();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js
  var require_values7 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/object/values.js": function(exports, module) {
      module.exports = require_values6();
    }
  });

  // node_modules/whatwg-fetch/dist/fetch.umd.js
  var require_fetch_umd = __commonJS({
    "node_modules/whatwg-fetch/dist/fetch.umd.js": function(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.WHATWGFetch = {});
      })(exports, function(exports2) {
        "use strict";
        var global2 = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
        var support = {
          searchParams: "URLSearchParams" in global2,
          iterable: "Symbol" in global2 && "iterator" in Symbol,
          blob: "FileReader" in global2 && "Blob" in global2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in global2,
          arrayBuffer: "ArrayBuffer" in global2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value: value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) {
                  return isConsumed;
                }
                if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                  return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                  return Promise.resolve(this._bodyArrayBuffer);
                }
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
              }
            }
          }
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status: status, headers: { location: url } });
        };
        exports2.DOMException = global2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && global2.location.href ? global2.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) {
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!global2.fetch) {
          global2.fetch = fetch2;
          global2.Headers = Headers;
          global2.Request = Request;
          global2.Response = Response;
        }
        exports2.Headers = Headers;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // lib/landing/data/action/setVersion.js
  var require_setVersion = __commonJS({
    "lib/landing/data/action/setVersion.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_VERSION = void 0;
      exports["default"] = setVersion;
      var SET_VERSION = "SET_VERSION";
      exports.SET_VERSION = SET_VERSION;
      function setVersion(version) {
        return {
          payload: {
            version: version
          },
          type: SET_VERSION
        };
      }
    }
  });

  // lib/landing/data/hooks/useVersion.js
  var require_useVersion = __commonJS({
    "lib/landing/data/hooks/useVersion.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useVersion;
      var _react2 = require_react();
      var _reactRedux2 = require_lib();
      var _setVersion = _interopRequireDefault2(require_setVersion());
      function useVersion() {
        var dispatch = (0, _reactRedux2.useDispatch)();
        return [(0, _reactRedux2.useSelector)(function(_ref) {
          var version = _ref.version;
          return version;
        }), (0, _react2.useCallback)(function(value) {
          return dispatch((0, _setVersion["default"])(value));
        }, [dispatch])];
      }
    }
  });

  // lib/landing/ui/VersionSelector.js
  var require_VersionSelector = __commonJS({
    "lib/landing/ui/VersionSelector.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _objectSpread2 = _interopRequireDefault2(require_objectSpread22());
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _promise = _interopRequireDefault2(require_promise8());
      var _concat = _interopRequireDefault2(require_concat4());
      var _find = _interopRequireDefault2(require_find4());
      var _map = _interopRequireDefault2(require_map4());
      var _keys = _interopRequireDefault2(require_keys3());
      var _values = _interopRequireDefault2(require_values7());
      var _whatwgFetch = require_fetch_umd();
      var _react2 = _interopRequireWildcard2(require_react());
      var _Presets = _interopRequireDefault2(require_Presets());
      var _Row = _interopRequireDefault2(require_Row());
      var _useVersion3 = _interopRequireDefault2(require_useVersion());
      var SELECT_STYLE = {
        width: "100%"
      };
      function scriptExists(url) {
        return new _promise["default"](function(resolve) {
          var script = document.createElement("script");
          script.setAttribute("async", "async");
          script.setAttribute("src", url);
          script.addEventListener("error", function() {
            return resolve(false);
          });
          script.addEventListener("load", function() {
            return resolve(true);
          });
          document.head.appendChild(script);
        });
      }
      function toLocalDateTime(date) {
        var _context;
        return (0, _concat["default"])(_context = "".concat(date.toLocaleDateString(), " ")).call(_context, date.toLocaleTimeString());
      }
      var VersionSelector = function VersionSelector2() {
        var _context12;
        var _useVersion = (0, _useVersion3["default"])(), _useVersion2 = (0, _slicedToArray2["default"])(_useVersion, 2), version = _useVersion2[0], setVersion = _useVersion2[1];
        var _useState = (0, _react2.useState)([]), _useState2 = (0, _slicedToArray2["default"])(_useState, 2), availableVersions = _useState2[0], setAvailableVersions = _useState2[1];
        var _useState3 = (0, _react2.useState)('GitHub "daily"'), _useState4 = (0, _slicedToArray2["default"])(_useState3, 2), devReleaseLabel = _useState4[0], setDevReleaseLabel = _useState4[1];
        var _useState5 = (0, _react2.useState)("cdn.botframework.com/.../latest"), _useState6 = (0, _slicedToArray2["default"])(_useState5, 2), cdnLatestLabel = _useState6[0], setCDNLatestLabel = _useState6[1];
        var _useState7 = (0, _react2.useState)("localhost:5000/webchat*.js and directLine.js"), _useState8 = (0, _slicedToArray2["default"])(_useState7, 2), localhostLabel = _useState8[0], setLocalhostLabel = _useState8[1];
        var _useState9 = (0, _react2.useState)(false), _useState10 = (0, _slicedToArray2["default"])(_useState9, 2), localhostAvailable = _useState10[0], setLocalhostAvailable = _useState10[1];
        (0, _react2.useMemo)(/* @__PURE__ */ (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
          var res;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  _context2.next = 3;
                  return (0, _whatwgFetch.fetch)("https://webchat-mockbot.azurewebsites.net/versions/botframework-webchat");
                case 3:
                  res = _context2.sent;
                  _context2.t0 = setAvailableVersions;
                  _context2.next = 7;
                  return res.json();
                case 7:
                  _context2.t1 = _context2.sent.versions;
                  (0, _context2.t0)(_context2.t1);
                  _context2.next = 16;
                  break;
                case 11:
                  _context2.prev = 11;
                  _context2.t2 = _context2["catch"](0);
                  if (!_context2.t2) {
                    _context2.next = 16;
                    break;
                  }
                  console.error(_context2.t2);
                  return _context2.abrupt("return", alert("Failed to fetch version list from NPMJS. Please check network trace for details."));
                case 16:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee, null, [[0, 11]]);
        })), []);
        (0, _react2.useEffect)(function() {
          (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee2() {
            var _context3;
            var res, _yield$res$json, assets, commit, _assets$find, updatedAtISOString, updatedAt;
            return (0, _regeneratorRuntime2["default"])().wrap(function _callee2$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return (0, _whatwgFetch.fetch)("https://api.github.com/repos/microsoft/BotFramework-WebChat/releases/tags/daily");
                  case 2:
                    res = _context4.sent;
                    if (res.ok) {
                      _context4.next = 5;
                      break;
                    }
                    return _context4.abrupt("return");
                  case 5:
                    _context4.next = 7;
                    return res.json();
                  case 7:
                    _yield$res$json = _context4.sent;
                    assets = _yield$res$json.assets;
                    commit = _yield$res$json.target_commitish;
                    _assets$find = (0, _find["default"])(assets).call(assets, function(_ref3) {
                      var name = _ref3.name;
                      return name === "webchat.js";
                    }), updatedAtISOString = _assets$find.updated_at;
                    updatedAt = new Date(updatedAtISOString);
                    setDevReleaseLabel((0, _concat["default"])(_context3 = 'GitHub "daily" '.concat(commit.substr(0, 7), " (")).call(_context3, toLocalDateTime(updatedAt), ")"));
                  case 13:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee2);
          }))();
        }, [devReleaseLabel, setDevReleaseLabel]);
        (0, _react2.useEffect)(function() {
          (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee3() {
            var res, lastModifiedHeader;
            return (0, _regeneratorRuntime2["default"])().wrap(function _callee3$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return (0, _whatwgFetch.fetch)("https://cdn.botframework.com/botframework-webchat/latest/webchat-es5.js", {
                      method: "HEAD"
                    });
                  case 2:
                    res = _context5.sent;
                    if (res.ok) {
                      _context5.next = 5;
                      break;
                    }
                    return _context5.abrupt("return");
                  case 5:
                    lastModifiedHeader = res.headers.get("last-modified");
                    setCDNLatestLabel("cdn.botframework.com/.../latest (".concat(toLocalDateTime(new Date(lastModifiedHeader)), ")"));
                  case 7:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee3);
          }))();
        }, []);
        (0, _react2.useEffect)(function() {
          (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee4() {
            var webChatBundleName, directLineBundleName, _context6;
            return (0, _regeneratorRuntime2["default"])().wrap(function _callee4$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.next = 2;
                    return scriptExists("http://localhost:5000/webchat-es5.js");
                  case 2:
                    if (!_context7.sent) {
                      _context7.next = 6;
                      break;
                    }
                    webChatBundleName = "webchat-es5.js";
                    _context7.next = 10;
                    break;
                  case 6:
                    _context7.next = 8;
                    return scriptExists("http://localhost:5000/webchat.js");
                  case 8:
                    if (!_context7.sent) {
                      _context7.next = 10;
                      break;
                    }
                    webChatBundleName = "webchat.js";
                  case 10:
                    _context7.next = 12;
                    return scriptExists("http://localhost:5000/directLine.js");
                  case 12:
                    if (!_context7.sent) {
                      _context7.next = 14;
                      break;
                    }
                    directLineBundleName = "directLine.js";
                  case 14:
                    if (webChatBundleName) {
                      if (directLineBundleName) {
                        setLocalhostLabel((0, _concat["default"])(_context6 = "localhost:5000/".concat(webChatBundleName, " and ")).call(_context6, directLineBundleName));
                      } else {
                        setLocalhostLabel("localhost:5000/".concat(webChatBundleName));
                      }
                      setLocalhostAvailable(true);
                    } else {
                      setLocalhostAvailable(false);
                    }
                  case 15:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee4);
          }))();
        }, []);
        var v3Version = (0, _react2.useMemo)(function() {
          var _context8, _context9;
          return (0, _find["default"])(_context8 = (0, _map["default"])(_context9 = availableVersions || []).call(_context9, function(_ref6) {
            var version2 = _ref6.version;
            return version2;
          })).call(_context8, function(version2) {
            return /\x2Dv3\./.test(version2);
          });
        }, [availableVersions]);
        var scorpioVersion = (0, _react2.useMemo)(function() {
          var _context10, _context11;
          return (0, _find["default"])(_context10 = (0, _map["default"])(_context11 = availableVersions || []).call(_context11, function(_ref7) {
            var version2 = _ref7.version;
            return version2;
          })).call(_context10, function(version2) {
            return /\x2Dibiza\./.test(version2);
          });
        }, [availableVersions]);
        var presetVersions = (0, _react2.useMemo)(function() {
          return (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({
            latest: "https://cdn.botframework.com/botframework-webchat/latest/",
            "4.15.5": "4.15.5",
            "4.15.4": "4.15.4",
            "4.14.2": "4.14.2"
          }, v3Version ? {
            v3: v3Version
          } : {}), scorpioVersion ? {
            scorpio: scorpioVersion
          } : {}), {}, {
            daily: "dev",
            "localhost:5000": localhostAvailable ? "http://localhost:5000/" : ""
          });
        }, [availableVersions, localhostAvailable]);
        var versionTexts = (0, _react2.useMemo)(function() {
          return (0, _keys["default"])(presetVersions);
        }, [presetVersions]);
        var versionValues = (0, _react2.useMemo)(function() {
          return (0, _values["default"])(presetVersions);
        }, [presetVersions]);
        var handleVersionChange = (0, _react2.useCallback)(function(_ref8) {
          var value = _ref8.target.value;
          return setVersion(value);
        }, [setVersion]);
        return /* @__PURE__ */ _react2["default"].createElement(_Row["default"], {
          header: "Version"
        }, /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement("select", {
          disabled: availableVersions.length < 2,
          onChange: handleVersionChange,
          style: SELECT_STYLE,
          value: version
        }, /* @__PURE__ */ _react2["default"].createElement("option", {
          value: "https://cdn.botframework.com/botframework-webchat/latest/"
        }, cdnLatestLabel), /* @__PURE__ */ _react2["default"].createElement("option", {
          value: "dev"
        }, devReleaseLabel), /* @__PURE__ */ _react2["default"].createElement("option", {
          disabled: !localhostAvailable,
          value: "http://localhost:5000/"
        }, localhostLabel, localhostAvailable ? "" : " (not available)"), (0, _map["default"])(_context12 = availableVersions || []).call(_context12, function(_ref9) {
          var time = _ref9.time, version2 = _ref9.version;
          return /* @__PURE__ */ _react2["default"].createElement("option", {
            key: version2,
            value: version2
          }, version2, " (", new Date(time).toLocaleDateString(), ")");
        }))), /* @__PURE__ */ _react2["default"].createElement("div", null, /* @__PURE__ */ _react2["default"].createElement(_Presets["default"], {
          onLoad: setVersion,
          texts: versionTexts,
          values: versionValues
        })));
      };
      var _default = VersionSelector;
      exports["default"] = _default;
    }
  });

  // node_modules/core-js-pure/web/url-search-params.js
  var require_url_search_params = __commonJS({
    "node_modules/core-js-pure/web/url-search-params.js": function(exports, module) {
      require_web_url_search_params();
      var path = require_path();
      module.exports = path.URLSearchParams;
    }
  });

  // node_modules/core-js-pure/stable/url-search-params/index.js
  var require_url_search_params2 = __commonJS({
    "node_modules/core-js-pure/stable/url-search-params/index.js": function(exports, module) {
      var parent = require_url_search_params();
      require_web_dom_collections_iterator();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/url-search-params.js
  var require_url_search_params3 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/url-search-params.js": function(exports, module) {
      module.exports = require_url_search_params2();
    }
  });

  // lib/landing/data/hooks/useDirectLineConversationId.js
  var require_useDirectLineConversationId = __commonJS({
    "lib/landing/data/hooks/useDirectLineConversationId.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useDirectLineConversationId;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var _useDirectLineToken3 = _interopRequireDefault2(require_useDirectLineToken());
      function useDirectLineConversationId() {
        var _useDirectLineToken = (0, _useDirectLineToken3["default"])(), _useDirectLineToken2 = (0, _slicedToArray2["default"])(_useDirectLineToken, 1), directLineToken = _useDirectLineToken2[0];
        return [(directLineToken && (0, _tryDecodeJWT["default"])(directLineToken) || {}).conv || ""];
      }
    }
  });

  // lib/landing/ui/WebChatLink.js
  var require_WebChatLink = __commonJS({
    "lib/landing/ui/WebChatLink.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireWildcard2 = require_interopRequireWildcard()["default"];
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _url = _interopRequireDefault2(require_url3());
      var _urlSearchParams = _interopRequireDefault2(require_url_search_params3());
      var _objectSpread2 = _interopRequireDefault2(require_objectSpread22());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _emotion = require_emotion_cjs();
      var _classnames = _interopRequireDefault2(require_classnames());
      var _react2 = _interopRequireWildcard2(require_react());
      var _isURL = _interopRequireDefault2(require_isURL());
      var _useDirectLineConversationId = _interopRequireDefault2(require_useDirectLineConversationId());
      var _useDirectLineDomainHost = _interopRequireDefault2(require_useDirectLineDomainHost());
      var _useDirectLineSecret3 = _interopRequireDefault2(require_useDirectLineSecret());
      var _useDirectLineToken3 = _interopRequireDefault2(require_useDirectLineToken());
      var _useDirectLineUserId3 = _interopRequireDefault2(require_useDirectLineUserId());
      var _useProtocolAppServiceExtension = _interopRequireDefault2(require_useProtocolAppServiceExtension());
      var _useProtocolAppServiceExtensionInsecure = _interopRequireDefault2(require_useProtocolAppServiceExtensionInsecure());
      var _useProtocolDirectLineSpeech = _interopRequireDefault2(require_useProtocolDirectLineSpeech());
      var _useProtocolREST3 = _interopRequireDefault2(require_useProtocolREST());
      var _useProtocolTranscript = _interopRequireDefault2(require_useProtocolTranscript());
      var _useProtocolWebSocket3 = _interopRequireDefault2(require_useProtocolWebSocket());
      var _useSpeechAuthorizationToken = _interopRequireDefault2(require_useSpeechAuthorizationToken());
      var _useSpeechRegion3 = _interopRequireDefault2(require_useSpeechRegion());
      var _useSpeechSubscriptionKey = _interopRequireDefault2(require_useSpeechSubscriptionKey());
      var _useTranscriptDialogContent = _interopRequireDefault2(require_useTranscriptDialogContent());
      var _useVersion3 = _interopRequireDefault2(require_useVersion());
      var ROOT_CSS = (0, _emotion.css)({
        "&.webchat-link--disabled": {
          color: "#CCC"
        }
      });
      var WebChatLink = function WebChatLink2() {
        var _useDirectLineConvers = (0, _useDirectLineConversationId["default"])(), _useDirectLineConvers2 = (0, _slicedToArray2["default"])(_useDirectLineConvers, 1), conversationId = _useDirectLineConvers2[0];
        var _useDirectLineDomainH = (0, _useDirectLineDomainHost["default"])(), _useDirectLineDomainH2 = (0, _slicedToArray2["default"])(_useDirectLineDomainH, 1), domainHost = _useDirectLineDomainH2[0];
        var _useProtocolAppServic = (0, _useProtocolAppServiceExtension["default"])(), _useProtocolAppServic2 = (0, _slicedToArray2["default"])(_useProtocolAppServic, 1), protocolAppServiceExtension = _useProtocolAppServic2[0];
        var _useProtocolAppServic3 = (0, _useProtocolAppServiceExtensionInsecure["default"])(), _useProtocolAppServic4 = (0, _slicedToArray2["default"])(_useProtocolAppServic3, 1), protocolAppServiceExtensionInsecure = _useProtocolAppServic4[0];
        var _useProtocolDirectLin = (0, _useProtocolDirectLineSpeech["default"])(), _useProtocolDirectLin2 = (0, _slicedToArray2["default"])(_useProtocolDirectLin, 1), protocolDirectLineSpeech = _useProtocolDirectLin2[0];
        var _useProtocolREST = (0, _useProtocolREST3["default"])(), _useProtocolREST2 = (0, _slicedToArray2["default"])(_useProtocolREST, 1), protocolREST = _useProtocolREST2[0];
        var _useProtocolTranscrip = (0, _useProtocolTranscript["default"])(), _useProtocolTranscrip2 = (0, _slicedToArray2["default"])(_useProtocolTranscrip, 1), protocolTranscript = _useProtocolTranscrip2[0];
        var _useProtocolWebSocket = (0, _useProtocolWebSocket3["default"])(), _useProtocolWebSocket2 = (0, _slicedToArray2["default"])(_useProtocolWebSocket, 1), protocolWebSocket = _useProtocolWebSocket2[0];
        var _useDirectLineSecret = (0, _useDirectLineSecret3["default"])(), _useDirectLineSecret2 = (0, _slicedToArray2["default"])(_useDirectLineSecret, 1), secret = _useDirectLineSecret2[0];
        var _useSpeechAuthorizati = (0, _useSpeechAuthorizationToken["default"])(), _useSpeechAuthorizati2 = (0, _slicedToArray2["default"])(_useSpeechAuthorizati, 1), speechAuthorizationToken = _useSpeechAuthorizati2[0];
        var _useSpeechRegion = (0, _useSpeechRegion3["default"])(), _useSpeechRegion2 = (0, _slicedToArray2["default"])(_useSpeechRegion, 1), speechRegion = _useSpeechRegion2[0];
        var _useSpeechSubscriptio = (0, _useSpeechSubscriptionKey["default"])(), _useSpeechSubscriptio2 = (0, _slicedToArray2["default"])(_useSpeechSubscriptio, 1), speechSubscriptionKey = _useSpeechSubscriptio2[0];
        var _useDirectLineToken = (0, _useDirectLineToken3["default"])(), _useDirectLineToken2 = (0, _slicedToArray2["default"])(_useDirectLineToken, 1), token = _useDirectLineToken2[0];
        var _useTranscriptDialogC = (0, _useTranscriptDialogContent["default"])(), _useTranscriptDialogC2 = (0, _slicedToArray2["default"])(_useTranscriptDialogC, 1), transcriptContent = _useTranscriptDialogC2[0];
        var _useDirectLineUserId = (0, _useDirectLineUserId3["default"])(), _useDirectLineUserId2 = (0, _slicedToArray2["default"])(_useDirectLineUserId, 1), userId = _useDirectLineUserId2[0];
        var _useVersion = (0, _useVersion3["default"])(), _useVersion2 = (0, _slicedToArray2["default"])(_useVersion, 1), version = _useVersion2[0];
        var transcriptContentBlobURL = (0, _react2.useMemo)(function() {
          return transcriptContent && _url["default"].createObjectURL(new Blob([transcriptContent], {
            type: "application/json"
          }));
        }, [transcriptContent]);
        var searchParams = (0, _react2.useMemo)(function() {
          var isDirectLineTokenURL = (0, _isURL["default"])(secret);
          var isSpeechTokenURL = (0, _isURL["default"])(speechSubscriptionKey);
          if (protocolDirectLineSpeech && !speechSubscriptionKey && !speechAuthorizationToken) {
            return;
          }
          if ((protocolAppServiceExtension || protocolAppServiceExtensionInsecure) && (!token || !domainHost)) {
            return;
          }
          if (protocolTranscript && !transcriptContentBlobURL) {
            return;
          }
          if ((protocolREST || protocolWebSocket) && (isDirectLineTokenURL ? !token : !secret)) {
            return;
          }
          if (isSpeechTokenURL && !speechAuthorizationToken) {
            return;
          }
          return new _urlSearchParams["default"]((0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({
            v: version,
            p: protocolAppServiceExtension ? "ase" : protocolAppServiceExtensionInsecure ? "ase-insecure" : protocolDirectLineSpeech ? "dls" : protocolTranscript ? "blob" : protocolWebSocket ? "ws" : "rest"
          }, (protocolAppServiceExtension || protocolAppServiceExtensionInsecure) && domainHost ? {
            dd: domainHost
          } : {}), speechRegion ? {
            sr: speechRegion
          } : {}), {}, {
            uid: userId
          }, conversationId ? {
            cid: conversationId
          } : {}), protocolTranscript ? {
            blob: transcriptContentBlobURL
          } : token ? {
            dt: token
          } : {
            ds: secret
          }), speechAuthorizationToken ? {
            st: speechAuthorizationToken
          } : speechSubscriptionKey ? {
            sk: speechSubscriptionKey
          } : {}));
        }, [conversationId, domainHost, protocolAppServiceExtension, protocolWebSocket, secret, speechAuthorizationToken, speechSubscriptionKey, speechRegion, token, transcriptContentBlobURL, userId, version]);
        var webChatURL = (0, _react2.useMemo)(function() {
          return searchParams && "webchat.html?".concat(searchParams.toString());
        }, [searchParams]);
        return webChatURL ? /* @__PURE__ */ _react2["default"].createElement("a", {
          className: (0, _classnames["default"])("webchat-link", ROOT_CSS),
          href: webChatURL,
          rel: "noopener noreferrer",
          target: "_blank"
        }, "Open Web Chat in a new window") : /* @__PURE__ */ _react2["default"].createElement("span", {
          className: (0, _classnames["default"])("webchat-link", "webchat-link--disabled", ROOT_CSS)
        }, "Open Web Chat in a new window");
      };
      var _default = WebChatLink;
      exports["default"] = _default;
    }
  });

  // lib/landing/App.js
  var require_App = __commonJS({
    "lib/landing/App.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _emotion = require_emotion_cjs();
      var _classnames = _interopRequireDefault2(require_classnames());
      var _react2 = _interopRequireDefault2(require_react());
      var _BotPresets = _interopRequireDefault2(require_BotPresets());
      var _DirectLineCredentials = _interopRequireDefault2(require_DirectLineCredentials());
      var _Protocol = _interopRequireDefault2(require_Protocol());
      var _SpeechCredentials = _interopRequireDefault2(require_SpeechCredentials());
      var _TranscriptDialog = _interopRequireDefault2(require_TranscriptDialog());
      var _useTranscriptDialogVisible = _interopRequireDefault2(require_useTranscriptDialogVisible());
      var _VersionSelector = _interopRequireDefault2(require_VersionSelector());
      var _WebChatLink = _interopRequireDefault2(require_WebChatLink());
      var ROOT_CSS = (0, _emotion.css)({
        "&.app": {
          alignItems: "center",
          display: "flex",
          flexDirection: "column",
          height: "100%",
          justifyContent: "center",
          "&.app .app__box": {
            backgroundColor: "White",
            borderRadius: 4,
            boxShadow: "0 0 10px rgba(0, 0, 0, .05)",
            padding: "0 20px 20px"
          }
        }
      });
      var App = function App2() {
        var _useTranscriptDialogV = (0, _useTranscriptDialogVisible["default"])(), _useTranscriptDialogV2 = (0, _slicedToArray2["default"])(_useTranscriptDialogV, 1), transcriptDialogVisible = _useTranscriptDialogV2[0];
        return /* @__PURE__ */ _react2["default"].createElement("div", {
          className: (0, _classnames["default"])(ROOT_CSS + "", "app")
        }, /* @__PURE__ */ _react2["default"].createElement("div", {
          className: "app__box"
        }, /* @__PURE__ */ _react2["default"].createElement("pre", {
          title: ["Slant by Glenn Chappell 3/93 -- based on Standard", "Includes ISO Latin-1", "figlet release 2.1 -- 12 Aug 1994", "Permission is hereby given to modify this font, as long as the", "modifier's name is placed on a comment line.", "", "Modified by Paul Burton <solution@earthlink.net> 12/96 to include new parameter", "supported by FIGlet and FIGWin.  May also be slightly modified for better use", "of new full-width/kern/smush alternatives, but default output is NOT changed."].join("\n")
        }, "\xA0_\xA0\xA0\xA0\xA0\xA0\xA0\xA0__\xA0\xA0\xA0\xA0\xA0__\xA0\xA0\xA0\xA0\xA0\xA0\xA0________\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0__", /* @__PURE__ */ _react2["default"].createElement("br", null), "|\xA0|\xA0\xA0\xA0\xA0\xA0/\xA0/__\xA0\xA0/\xA0/_\xA0\xA0\xA0\xA0\xA0/\xA0____/\xA0/_\xA0\xA0____\xA0_/\xA0/_", /* @__PURE__ */ _react2["default"].createElement("br", null), "|\xA0|\xA0/|\xA0/\xA0/\xA0_\xA0\\/\xA0__\xA0\\\xA0\xA0\xA0/\xA0/\xA0\xA0\xA0/\xA0__\xA0\\/\xA0__\xA0`/\xA0__/", /* @__PURE__ */ _react2["default"].createElement("br", null), "|\xA0|/\xA0|/\xA0/\xA0\xA0__/\xA0/_/\xA0/\xA0\xA0/\xA0/___/\xA0/\xA0/\xA0/\xA0/_/\xA0/\xA0/_", /* @__PURE__ */ _react2["default"].createElement("br", null), "|__/|__/\\___/_.___/\xA0\xA0\xA0\\____/_/\xA0/_/\\__,_/\\__/", /* @__PURE__ */ _react2["default"].createElement("br", null)), /* @__PURE__ */ _react2["default"].createElement(_VersionSelector["default"], null), /* @__PURE__ */ _react2["default"].createElement(_BotPresets["default"], null), /* @__PURE__ */ _react2["default"].createElement(_Protocol["default"], null), /* @__PURE__ */ _react2["default"].createElement(_DirectLineCredentials["default"], null), /* @__PURE__ */ _react2["default"].createElement(_SpeechCredentials["default"], null), /* @__PURE__ */ _react2["default"].createElement("section", {
          className: "row",
          style: {
            marginBottom: 0
          }
        }, /* @__PURE__ */ _react2["default"].createElement(_WebChatLink["default"], null))), transcriptDialogVisible && /* @__PURE__ */ _react2["default"].createElement(_TranscriptDialog["default"], null));
      };
      var _default = App;
      exports["default"] = _default;
    }
  });

  // node_modules/@redux-saga/symbols/dist/redux-saga-symbols.cjs.js
  var require_redux_saga_symbols_cjs = __commonJS({
    "node_modules/@redux-saga/symbols/dist/redux-saga-symbols.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var createSymbol = function createSymbol2(name) {
        return "@@redux-saga/" + name;
      };
      var CANCEL = /* @__PURE__ */ createSymbol("CANCEL_PROMISE");
      var CHANNEL_END_TYPE = /* @__PURE__ */ createSymbol("CHANNEL_END");
      var IO = /* @__PURE__ */ createSymbol("IO");
      var MATCH = /* @__PURE__ */ createSymbol("MATCH");
      var MULTICAST = /* @__PURE__ */ createSymbol("MULTICAST");
      var SAGA_ACTION = /* @__PURE__ */ createSymbol("SAGA_ACTION");
      var SELF_CANCELLATION = /* @__PURE__ */ createSymbol("SELF_CANCELLATION");
      var TASK = /* @__PURE__ */ createSymbol("TASK");
      var TASK_CANCEL = /* @__PURE__ */ createSymbol("TASK_CANCEL");
      var TERMINATE = /* @__PURE__ */ createSymbol("TERMINATE");
      var SAGA_LOCATION = /* @__PURE__ */ createSymbol("LOCATION");
      exports.CANCEL = CANCEL;
      exports.CHANNEL_END_TYPE = CHANNEL_END_TYPE;
      exports.IO = IO;
      exports.MATCH = MATCH;
      exports.MULTICAST = MULTICAST;
      exports.SAGA_ACTION = SAGA_ACTION;
      exports.SAGA_LOCATION = SAGA_LOCATION;
      exports.SELF_CANCELLATION = SELF_CANCELLATION;
      exports.TASK = TASK;
      exports.TASK_CANCEL = TASK_CANCEL;
      exports.TERMINATE = TERMINATE;
    }
  });

  // node_modules/@redux-saga/is/dist/redux-saga-is.cjs.js
  var require_redux_saga_is_cjs = __commonJS({
    "node_modules/@redux-saga/is/dist/redux-saga-is.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var symbols = require_redux_saga_symbols_cjs();
      var undef = function undef2(v) {
        return v === null || v === void 0;
      };
      var notUndef = function notUndef2(v) {
        return v !== null && v !== void 0;
      };
      var func = function func2(f) {
        return typeof f === "function";
      };
      var number = function number2(n) {
        return typeof n === "number";
      };
      var string = function string2(s) {
        return typeof s === "string";
      };
      var array = Array.isArray;
      var object = function object2(obj) {
        return obj && !array(obj) && typeof obj === "object";
      };
      var promise = function promise2(p) {
        return p && func(p.then);
      };
      var iterator = function iterator2(it) {
        return it && func(it.next) && func(it.throw);
      };
      var iterable = function iterable2(it) {
        return it && func(Symbol) ? func(it[Symbol.iterator]) : array(it);
      };
      var task = function task2(t) {
        return t && t[symbols.TASK];
      };
      var sagaAction = function sagaAction2(a) {
        return Boolean(a && a[symbols.SAGA_ACTION]);
      };
      var observable = function observable2(ob) {
        return ob && func(ob.subscribe);
      };
      var buffer = function buffer2(buf) {
        return buf && func(buf.isEmpty) && func(buf.take) && func(buf.put);
      };
      var pattern = function pattern2(pat) {
        return pat && (string(pat) || symbol(pat) || func(pat) || array(pat) && pat.every(pattern2));
      };
      var channel = function channel2(ch) {
        return ch && func(ch.take) && func(ch.close);
      };
      var stringableFunc = function stringableFunc2(f) {
        return func(f) && f.hasOwnProperty("toString");
      };
      var symbol = function symbol2(sym) {
        return Boolean(sym) && typeof Symbol === "function" && sym.constructor === Symbol && sym !== Symbol.prototype;
      };
      var multicast = function multicast2(ch) {
        return channel(ch) && ch[symbols.MULTICAST];
      };
      var effect = function effect2(eff) {
        return eff && eff[symbols.IO];
      };
      exports.array = array;
      exports.buffer = buffer;
      exports.channel = channel;
      exports.effect = effect;
      exports.func = func;
      exports.iterable = iterable;
      exports.iterator = iterator;
      exports.multicast = multicast;
      exports.notUndef = notUndef;
      exports.number = number;
      exports.object = object;
      exports.observable = observable;
      exports.pattern = pattern;
      exports.promise = promise;
      exports.sagaAction = sagaAction;
      exports.string = string;
      exports.stringableFunc = stringableFunc;
      exports.symbol = symbol;
      exports.task = task;
      exports.undef = undef;
    }
  });

  // node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.cjs.js
  var require_redux_saga_delay_p_cjs = __commonJS({
    "node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var symbols = require_redux_saga_symbols_cjs();
      var MAX_SIGNED_INT = 2147483647;
      function delayP(ms, val) {
        if (val === void 0) {
          val = true;
        }
        if (ms > MAX_SIGNED_INT) {
          throw new Error("delay only supports a maximum value of " + MAX_SIGNED_INT + "ms");
        }
        var timeoutId;
        var promise = new Promise(function(resolve) {
          timeoutId = setTimeout(resolve, Math.min(MAX_SIGNED_INT, ms), val);
        });
        promise[symbols.CANCEL] = function() {
          clearTimeout(timeoutId);
        };
        return promise;
      }
      exports.default = delayP;
    }
  });

  // node_modules/@redux-saga/core/dist/io-a03c6210.js
  var require_io_a03c6210 = __commonJS({
    "node_modules/@redux-saga/core/dist/io-a03c6210.js": function(exports) {
      "use strict";
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var symbols = require_redux_saga_symbols_cjs();
      var _extends = _interopDefault(require_extends());
      var is = require_redux_saga_is_cjs();
      var delayP = _interopDefault(require_redux_saga_delay_p_cjs());
      var konst = function konst2(v) {
        return function() {
          return v;
        };
      };
      var kTrue = /* @__PURE__ */ konst(true);
      exports.noop = function noop() {
      };
      if (typeof Proxy !== "undefined") {
        exports.noop = /* @__PURE__ */ new Proxy(exports.noop, {
          set: function set() {
            throw internalErr("There was an attempt to assign a property to internal `noop` function.");
          }
        });
      }
      var identity = function identity2(v) {
        return v;
      };
      var hasSymbol = typeof Symbol === "function";
      var asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : "@@asyncIterator";
      function check(value, predicate, error) {
        if (!predicate(value)) {
          throw new Error(error);
        }
      }
      var assignWithSymbols = function assignWithSymbols2(target, source) {
        _extends(target, source);
        if (Object.getOwnPropertySymbols) {
          Object.getOwnPropertySymbols(source).forEach(function(s) {
            target[s] = source[s];
          });
        }
      };
      var flatMap = function flatMap2(mapper, arr) {
        var _ref;
        return (_ref = []).concat.apply(_ref, arr.map(mapper));
      };
      function remove(array, item) {
        var index = array.indexOf(item);
        if (index >= 0) {
          array.splice(index, 1);
        }
      }
      function once(fn) {
        var called = false;
        return function() {
          if (called) {
            return;
          }
          called = true;
          fn();
        };
      }
      var kThrow = function kThrow2(err) {
        throw err;
      };
      var kReturn = function kReturn2(value) {
        return {
          value: value,
          done: true
        };
      };
      function makeIterator(next, thro, name) {
        if (thro === void 0) {
          thro = kThrow;
        }
        if (name === void 0) {
          name = "iterator";
        }
        var iterator = {
          meta: {
            name: name
          },
          next: next,
          throw: thro,
          return: kReturn,
          isSagaIterator: true
        };
        if (typeof Symbol !== "undefined") {
          iterator[Symbol.iterator] = function() {
            return iterator;
          };
        }
        return iterator;
      }
      function logError(error, _ref2) {
        var sagaStack = _ref2.sagaStack;
        console.error(error);
        console.error(sagaStack);
      }
      var internalErr = function internalErr2(err) {
        return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + err + "\n");
      };
      var createSetContextWarning = function createSetContextWarning2(ctx, props) {
        return (ctx ? ctx + "." : "") + "setContext(props): argument " + props + " is not a plain object";
      };
      var FROZEN_ACTION_ERROR = "You can't put (a.k.a. dispatch from saga) frozen actions.\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\nIf you are using redux and you care about this behaviour (frozen actions),\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\nExample implementation:\n\nconst freezeActions = store => next => action => next(Object.freeze(action))\n";
      var createEmptyArray = function createEmptyArray2(n) {
        return Array.apply(null, new Array(n));
      };
      var wrapSagaDispatch = function wrapSagaDispatch2(dispatch) {
        return function(action) {
          {
            check(action, function(ac) {
              return !Object.isFrozen(ac);
            }, FROZEN_ACTION_ERROR);
          }
          return dispatch(Object.defineProperty(action, symbols.SAGA_ACTION, {
            value: true
          }));
        };
      };
      var shouldTerminate = function shouldTerminate2(res) {
        return res === symbols.TERMINATE;
      };
      var shouldCancel = function shouldCancel2(res) {
        return res === symbols.TASK_CANCEL;
      };
      var shouldComplete = function shouldComplete2(res) {
        return shouldTerminate(res) || shouldCancel(res);
      };
      function createAllStyleChildCallbacks(shape, parentCallback) {
        var keys = Object.keys(shape);
        var totalCount = keys.length;
        {
          check(totalCount, function(c) {
            return c > 0;
          }, "createAllStyleChildCallbacks: get an empty array or object");
        }
        var completedCount = 0;
        var completed;
        var results = is.array(shape) ? createEmptyArray(totalCount) : {};
        var childCallbacks = {};
        function checkEnd() {
          if (completedCount === totalCount) {
            completed = true;
            parentCallback(results);
          }
        }
        keys.forEach(function(key) {
          var chCbAtKey = function chCbAtKey2(res, isErr) {
            if (completed) {
              return;
            }
            if (isErr || shouldComplete(res)) {
              parentCallback.cancel();
              parentCallback(res, isErr);
            } else {
              results[key] = res;
              completedCount++;
              checkEnd();
            }
          };
          chCbAtKey.cancel = exports.noop;
          childCallbacks[key] = chCbAtKey;
        });
        parentCallback.cancel = function() {
          if (!completed) {
            completed = true;
            keys.forEach(function(key) {
              return childCallbacks[key].cancel();
            });
          }
        };
        return childCallbacks;
      }
      function getMetaInfo(fn) {
        return {
          name: fn.name || "anonymous",
          location: getLocation(fn)
        };
      }
      function getLocation(instrumented) {
        return instrumented[symbols.SAGA_LOCATION];
      }
      var BUFFER_OVERFLOW = "Channel's Buffer overflow!";
      var ON_OVERFLOW_THROW = 1;
      var ON_OVERFLOW_DROP = 2;
      var ON_OVERFLOW_SLIDE = 3;
      var ON_OVERFLOW_EXPAND = 4;
      var zeroBuffer = {
        isEmpty: kTrue,
        put: exports.noop,
        take: exports.noop
      };
      function ringBuffer(limit, overflowAction) {
        if (limit === void 0) {
          limit = 10;
        }
        var arr = new Array(limit);
        var length = 0;
        var pushIndex = 0;
        var popIndex = 0;
        var push = function push2(it) {
          arr[pushIndex] = it;
          pushIndex = (pushIndex + 1) % limit;
          length++;
        };
        var take2 = function take3() {
          if (length != 0) {
            var it = arr[popIndex];
            arr[popIndex] = null;
            length--;
            popIndex = (popIndex + 1) % limit;
            return it;
          }
        };
        var flush2 = function flush3() {
          var items = [];
          while (length) {
            items.push(take2());
          }
          return items;
        };
        return {
          isEmpty: function isEmpty() {
            return length == 0;
          },
          put: function put2(it) {
            if (length < limit) {
              push(it);
            } else {
              var doubledLimit;
              switch (overflowAction) {
                case ON_OVERFLOW_THROW:
                  throw new Error(BUFFER_OVERFLOW);
                case ON_OVERFLOW_SLIDE:
                  arr[pushIndex] = it;
                  pushIndex = (pushIndex + 1) % limit;
                  popIndex = pushIndex;
                  break;
                case ON_OVERFLOW_EXPAND:
                  doubledLimit = 2 * limit;
                  arr = flush2();
                  length = arr.length;
                  pushIndex = arr.length;
                  popIndex = 0;
                  arr.length = doubledLimit;
                  limit = doubledLimit;
                  push(it);
                  break;
                default:
              }
            }
          },
          take: take2,
          flush: flush2
        };
      }
      var none = function none2() {
        return zeroBuffer;
      };
      var fixed = function fixed2(limit) {
        return ringBuffer(limit, ON_OVERFLOW_THROW);
      };
      var dropping = function dropping2(limit) {
        return ringBuffer(limit, ON_OVERFLOW_DROP);
      };
      var sliding = function sliding2(limit) {
        return ringBuffer(limit, ON_OVERFLOW_SLIDE);
      };
      var expanding = function expanding2(initialSize) {
        return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
      };
      var buffers = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        none: none,
        fixed: fixed,
        dropping: dropping,
        sliding: sliding,
        expanding: expanding
      });
      var TAKE = "TAKE";
      var PUT = "PUT";
      var ALL = "ALL";
      var RACE = "RACE";
      var CALL = "CALL";
      var CPS = "CPS";
      var FORK = "FORK";
      var JOIN = "JOIN";
      var CANCEL = "CANCEL";
      var SELECT = "SELECT";
      var ACTION_CHANNEL = "ACTION_CHANNEL";
      var CANCELLED = "CANCELLED";
      var FLUSH = "FLUSH";
      var GET_CONTEXT = "GET_CONTEXT";
      var SET_CONTEXT = "SET_CONTEXT";
      var effectTypes = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        TAKE: TAKE,
        PUT: PUT,
        ALL: ALL,
        RACE: RACE,
        CALL: CALL,
        CPS: CPS,
        FORK: FORK,
        JOIN: JOIN,
        CANCEL: CANCEL,
        SELECT: SELECT,
        ACTION_CHANNEL: ACTION_CHANNEL,
        CANCELLED: CANCELLED,
        FLUSH: FLUSH,
        GET_CONTEXT: GET_CONTEXT,
        SET_CONTEXT: SET_CONTEXT
      });
      var TEST_HINT = "\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)";
      var makeEffect = function makeEffect2(type, payload) {
        var _ref;
        return _ref = {}, _ref[symbols.IO] = true, _ref.combinator = false, _ref.type = type, _ref.payload = payload, _ref;
      };
      var isForkEffect = function isForkEffect2(eff) {
        return is.effect(eff) && eff.type === FORK;
      };
      var detach = function detach2(eff) {
        {
          check(eff, isForkEffect, "detach(eff): argument must be a fork effect");
        }
        return makeEffect(FORK, _extends({}, eff.payload, {
          detached: true
        }));
      };
      function take(patternOrChannel, multicastPattern) {
        if (patternOrChannel === void 0) {
          patternOrChannel = "*";
        }
        if (arguments.length) {
          check(arguments[0], is.notUndef, "take(patternOrChannel): patternOrChannel is undefined");
        }
        if (is.pattern(patternOrChannel)) {
          if (is.notUndef(multicastPattern)) {
            console.warn("take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types");
          }
          return makeEffect(TAKE, {
            pattern: patternOrChannel
          });
        }
        if (is.multicast(patternOrChannel) && is.notUndef(multicastPattern) && is.pattern(multicastPattern)) {
          return makeEffect(TAKE, {
            channel: patternOrChannel,
            pattern: multicastPattern
          });
        }
        if (is.channel(patternOrChannel)) {
          if (is.notUndef(multicastPattern)) {
            console.warn("take(channel) takes one argument but two were provided. Second argument is ignored.");
          }
          return makeEffect(TAKE, {
            channel: patternOrChannel
          });
        }
        {
          throw new Error("take(patternOrChannel): argument " + patternOrChannel + " is not valid channel or a valid pattern");
        }
      }
      var takeMaybe = function takeMaybe2() {
        var eff = take.apply(void 0, arguments);
        eff.payload.maybe = true;
        return eff;
      };
      function put(channel, action) {
        {
          if (arguments.length > 1) {
            check(channel, is.notUndef, "put(channel, action): argument channel is undefined");
            check(channel, is.channel, "put(channel, action): argument " + channel + " is not a valid channel");
            check(action, is.notUndef, "put(channel, action): argument action is undefined");
          } else {
            check(channel, is.notUndef, "put(action): argument action is undefined");
          }
        }
        if (is.undef(action)) {
          action = channel;
          channel = void 0;
        }
        return makeEffect(PUT, {
          channel: channel,
          action: action
        });
      }
      var putResolve = function putResolve2() {
        var eff = put.apply(void 0, arguments);
        eff.payload.resolve = true;
        return eff;
      };
      function all(effects) {
        var eff = makeEffect(ALL, effects);
        eff.combinator = true;
        return eff;
      }
      function race(effects) {
        var eff = makeEffect(RACE, effects);
        eff.combinator = true;
        return eff;
      }
      var validateFnDescriptor = function validateFnDescriptor2(effectName, fnDescriptor) {
        check(fnDescriptor, is.notUndef, effectName + ": argument fn is undefined or null");
        if (is.func(fnDescriptor)) {
          return;
        }
        var context = null;
        var fn;
        if (is.array(fnDescriptor)) {
          context = fnDescriptor[0];
          fn = fnDescriptor[1];
          check(fn, is.notUndef, effectName + ": argument of type [context, fn] has undefined or null `fn`");
        } else if (is.object(fnDescriptor)) {
          context = fnDescriptor.context;
          fn = fnDescriptor.fn;
          check(fn, is.notUndef, effectName + ": argument of type {context, fn} has undefined or null `fn`");
        } else {
          check(fnDescriptor, is.func, effectName + ": argument fn is not function");
          return;
        }
        if (context && is.string(fn)) {
          check(context[fn], is.func, effectName + ': context arguments has no such method - "' + fn + '"');
          return;
        }
        check(fn, is.func, effectName + ": unpacked fn argument (from [context, fn] or {context, fn}) is not a function");
      };
      function getFnCallDescriptor(fnDescriptor, args) {
        var context = null;
        var fn;
        if (is.func(fnDescriptor)) {
          fn = fnDescriptor;
        } else {
          if (is.array(fnDescriptor)) {
            context = fnDescriptor[0];
            fn = fnDescriptor[1];
          } else {
            context = fnDescriptor.context;
            fn = fnDescriptor.fn;
          }
          if (context && is.string(fn) && is.func(context[fn])) {
            fn = context[fn];
          }
        }
        return {
          context: context,
          fn: fn,
          args: args
        };
      }
      var isNotDelayEffect = function isNotDelayEffect2(fn) {
        return fn !== delay;
      };
      function call(fnDescriptor) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        {
          var arg0 = typeof args[0] === "number" ? args[0] : "ms";
          check(fnDescriptor, isNotDelayEffect, "instead of writing `yield call(delay, " + arg0 + ")` where delay is an effect from `redux-saga/effects` you should write `yield delay(" + arg0 + ")`");
          validateFnDescriptor("call", fnDescriptor);
        }
        return makeEffect(CALL, getFnCallDescriptor(fnDescriptor, args));
      }
      function apply(context, fn, args) {
        if (args === void 0) {
          args = [];
        }
        var fnDescriptor = [context, fn];
        {
          validateFnDescriptor("apply", fnDescriptor);
        }
        return makeEffect(CALL, getFnCallDescriptor([context, fn], args));
      }
      function cps(fnDescriptor) {
        {
          validateFnDescriptor("cps", fnDescriptor);
        }
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        return makeEffect(CPS, getFnCallDescriptor(fnDescriptor, args));
      }
      function fork(fnDescriptor) {
        {
          validateFnDescriptor("fork", fnDescriptor);
          check(fnDescriptor, function(arg) {
            return !is.effect(arg);
          }, "fork: argument must not be an effect");
        }
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        return makeEffect(FORK, getFnCallDescriptor(fnDescriptor, args));
      }
      function spawn(fnDescriptor) {
        {
          validateFnDescriptor("spawn", fnDescriptor);
        }
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        return detach(fork.apply(void 0, [fnDescriptor].concat(args)));
      }
      function join(taskOrTasks) {
        {
          if (arguments.length > 1) {
            throw new Error("join(...tasks) is not supported any more. Please use join([...tasks]) to join multiple tasks.");
          }
          if (is.array(taskOrTasks)) {
            taskOrTasks.forEach(function(t) {
              check(t, is.task, "join([...tasks]): argument " + t + " is not a valid Task object " + TEST_HINT);
            });
          } else {
            check(taskOrTasks, is.task, "join(task): argument " + taskOrTasks + " is not a valid Task object " + TEST_HINT);
          }
        }
        return makeEffect(JOIN, taskOrTasks);
      }
      function cancel(taskOrTasks) {
        if (taskOrTasks === void 0) {
          taskOrTasks = symbols.SELF_CANCELLATION;
        }
        {
          if (arguments.length > 1) {
            throw new Error("cancel(...tasks) is not supported any more. Please use cancel([...tasks]) to cancel multiple tasks.");
          }
          if (is.array(taskOrTasks)) {
            taskOrTasks.forEach(function(t) {
              check(t, is.task, "cancel([...tasks]): argument " + t + " is not a valid Task object " + TEST_HINT);
            });
          } else if (taskOrTasks !== symbols.SELF_CANCELLATION && is.notUndef(taskOrTasks)) {
            check(taskOrTasks, is.task, "cancel(task): argument " + taskOrTasks + " is not a valid Task object " + TEST_HINT);
          }
        }
        return makeEffect(CANCEL, taskOrTasks);
      }
      function select(selector) {
        if (selector === void 0) {
          selector = identity;
        }
        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          args[_key5 - 1] = arguments[_key5];
        }
        if (arguments.length) {
          check(arguments[0], is.notUndef, "select(selector, [...]): argument selector is undefined");
          check(selector, is.func, "select(selector, [...]): argument " + selector + " is not a function");
        }
        return makeEffect(SELECT, {
          selector: selector,
          args: args
        });
      }
      function actionChannel(pattern, buffer) {
        {
          check(pattern, is.pattern, "actionChannel(pattern,...): argument pattern is not valid");
          if (arguments.length > 1) {
            check(buffer, is.notUndef, "actionChannel(pattern, buffer): argument buffer is undefined");
            check(buffer, is.buffer, "actionChannel(pattern, buffer): argument " + buffer + " is not a valid buffer");
          }
        }
        return makeEffect(ACTION_CHANNEL, {
          pattern: pattern,
          buffer: buffer
        });
      }
      function cancelled() {
        return makeEffect(CANCELLED, {});
      }
      function flush(channel) {
        {
          check(channel, is.channel, "flush(channel): argument " + channel + " is not valid channel");
        }
        return makeEffect(FLUSH, channel);
      }
      function getContext(prop) {
        {
          check(prop, is.string, "getContext(prop): argument " + prop + " is not a string");
        }
        return makeEffect(GET_CONTEXT, prop);
      }
      function setContext(props) {
        {
          check(props, is.object, createSetContextWarning(null, props));
        }
        return makeEffect(SET_CONTEXT, props);
      }
      var delay = /* @__PURE__ */ call.bind(null, delayP);
      exports.ACTION_CHANNEL = ACTION_CHANNEL;
      exports.ALL = ALL;
      exports.CALL = CALL;
      exports.CANCEL = CANCEL;
      exports.CANCELLED = CANCELLED;
      exports.CPS = CPS;
      exports.FLUSH = FLUSH;
      exports.FORK = FORK;
      exports.GET_CONTEXT = GET_CONTEXT;
      exports.JOIN = JOIN;
      exports.PUT = PUT;
      exports.RACE = RACE;
      exports.SELECT = SELECT;
      exports.SET_CONTEXT = SET_CONTEXT;
      exports.TAKE = TAKE;
      exports.actionChannel = actionChannel;
      exports.all = all;
      exports.apply = apply;
      exports.assignWithSymbols = assignWithSymbols;
      exports.asyncIteratorSymbol = asyncIteratorSymbol;
      exports.buffers = buffers;
      exports.call = call;
      exports.cancel = cancel;
      exports.cancelled = cancelled;
      exports.check = check;
      exports.cps = cps;
      exports.createAllStyleChildCallbacks = createAllStyleChildCallbacks;
      exports.createEmptyArray = createEmptyArray;
      exports.createSetContextWarning = createSetContextWarning;
      exports.delay = delay;
      exports.detach = detach;
      exports.effectTypes = effectTypes;
      exports.expanding = expanding;
      exports.flatMap = flatMap;
      exports.flush = flush;
      exports.fork = fork;
      exports.getContext = getContext;
      exports.getLocation = getLocation;
      exports.getMetaInfo = getMetaInfo;
      exports.identity = identity;
      exports.internalErr = internalErr;
      exports.join = join;
      exports.kTrue = kTrue;
      exports.logError = logError;
      exports.makeIterator = makeIterator;
      exports.none = none;
      exports.once = once;
      exports.put = put;
      exports.putResolve = putResolve;
      exports.race = race;
      exports.remove = remove;
      exports.select = select;
      exports.setContext = setContext;
      exports.shouldCancel = shouldCancel;
      exports.shouldComplete = shouldComplete;
      exports.shouldTerminate = shouldTerminate;
      exports.sliding = sliding;
      exports.spawn = spawn;
      exports.take = take;
      exports.takeMaybe = takeMaybe;
      exports.wrapSagaDispatch = wrapSagaDispatch;
    }
  });

  // node_modules/@redux-saga/deferred/dist/redux-saga-deferred.cjs.js
  var require_redux_saga_deferred_cjs = __commonJS({
    "node_modules/@redux-saga/deferred/dist/redux-saga-deferred.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function deferred() {
        var def = {};
        def.promise = new Promise(function(resolve, reject) {
          def.resolve = resolve;
          def.reject = reject;
        });
        return def;
      }
      function arrayOfDeferred(length) {
        var arr = [];
        for (var i = 0; i < length; i++) {
          arr.push(deferred());
        }
        return arr;
      }
      exports.arrayOfDeferred = arrayOfDeferred;
      exports.default = deferred;
    }
  });

  // node_modules/@redux-saga/core/dist/redux-saga-core.dev.cjs.js
  var require_redux_saga_core_dev_cjs = __commonJS({
    "node_modules/@redux-saga/core/dist/redux-saga-core.dev.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var symbols = require_redux_saga_symbols_cjs();
      var _extends = _interopDefault(require_extends());
      var _objectWithoutPropertiesLoose = _interopDefault(require_objectWithoutPropertiesLoose());
      var is = require_redux_saga_is_cjs();
      var io = require_io_a03c6210();
      var redux = require_redux();
      var deferred = _interopDefault(require_redux_saga_deferred_cjs());
      require_redux_saga_delay_p_cjs();
      var queue = [];
      var semaphore = 0;
      function exec(task) {
        try {
          suspend();
          task();
        } finally {
          release();
        }
      }
      function asap(task) {
        queue.push(task);
        if (!semaphore) {
          suspend();
          flush();
        }
      }
      function immediately(task) {
        try {
          suspend();
          return task();
        } finally {
          flush();
        }
      }
      function suspend() {
        semaphore++;
      }
      function release() {
        semaphore--;
      }
      function flush() {
        release();
        var task;
        while (!semaphore && (task = queue.shift()) !== void 0) {
          exec(task);
        }
      }
      var array = function array2(patterns) {
        return function(input) {
          return patterns.some(function(p) {
            return matcher(p)(input);
          });
        };
      };
      var predicate = function predicate2(_predicate) {
        return function(input) {
          return _predicate(input);
        };
      };
      var string = function string2(pattern) {
        return function(input) {
          return input.type === String(pattern);
        };
      };
      var symbol = function symbol2(pattern) {
        return function(input) {
          return input.type === pattern;
        };
      };
      var wildcard = function wildcard2() {
        return io.kTrue;
      };
      function matcher(pattern) {
        var matcherCreator = pattern === "*" ? wildcard : is.string(pattern) ? string : is.array(pattern) ? array : is.stringableFunc(pattern) ? string : is.func(pattern) ? predicate : is.symbol(pattern) ? symbol : null;
        if (matcherCreator === null) {
          throw new Error("invalid pattern: " + pattern);
        }
        return matcherCreator(pattern);
      }
      var END = {
        type: symbols.CHANNEL_END_TYPE
      };
      var isEnd = function isEnd2(a) {
        return a && a.type === symbols.CHANNEL_END_TYPE;
      };
      var CLOSED_CHANNEL_WITH_TAKERS = "Cannot have a closed channel with pending takers";
      var INVALID_BUFFER = "invalid buffer passed to channel factory function";
      var UNDEFINED_INPUT_ERROR = "Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners";
      function channel(buffer) {
        if (buffer === void 0) {
          buffer = io.expanding();
        }
        var closed = false;
        var takers = [];
        {
          io.check(buffer, is.buffer, INVALID_BUFFER);
        }
        function checkForbiddenStates() {
          if (closed && takers.length) {
            throw io.internalErr(CLOSED_CHANNEL_WITH_TAKERS);
          }
          if (takers.length && !buffer.isEmpty()) {
            throw io.internalErr("Cannot have pending takers with non empty buffer");
          }
        }
        function put(input) {
          {
            checkForbiddenStates();
            io.check(input, is.notUndef, UNDEFINED_INPUT_ERROR);
          }
          if (closed) {
            return;
          }
          if (takers.length === 0) {
            return buffer.put(input);
          }
          var cb = takers.shift();
          cb(input);
        }
        function take(cb) {
          {
            checkForbiddenStates();
            io.check(cb, is.func, "channel.take's callback must be a function");
          }
          if (closed && buffer.isEmpty()) {
            cb(END);
          } else if (!buffer.isEmpty()) {
            cb(buffer.take());
          } else {
            takers.push(cb);
            cb.cancel = function() {
              io.remove(takers, cb);
            };
          }
        }
        function flush2(cb) {
          {
            checkForbiddenStates();
            io.check(cb, is.func, "channel.flush' callback must be a function");
          }
          if (closed && buffer.isEmpty()) {
            cb(END);
            return;
          }
          cb(buffer.flush());
        }
        function close() {
          {
            checkForbiddenStates();
          }
          if (closed) {
            return;
          }
          closed = true;
          var arr = takers;
          takers = [];
          for (var i = 0, len = arr.length; i < len; i++) {
            var taker = arr[i];
            taker(END);
          }
        }
        return {
          take: take,
          put: put,
          flush: flush2,
          close: close
        };
      }
      function eventChannel(subscribe, buffer) {
        if (buffer === void 0) {
          buffer = io.none();
        }
        var closed = false;
        var unsubscribe;
        var chan = channel(buffer);
        var close = function close2() {
          if (closed) {
            return;
          }
          closed = true;
          if (is.func(unsubscribe)) {
            unsubscribe();
          }
          chan.close();
        };
        unsubscribe = subscribe(function(input) {
          if (isEnd(input)) {
            close();
            return;
          }
          chan.put(input);
        });
        {
          io.check(unsubscribe, is.func, "in eventChannel: subscribe should return a function to unsubscribe");
        }
        unsubscribe = io.once(unsubscribe);
        if (closed) {
          unsubscribe();
        }
        return {
          take: chan.take,
          flush: chan.flush,
          close: close
        };
      }
      function multicastChannel() {
        var _ref;
        var closed = false;
        var currentTakers = [];
        var nextTakers = currentTakers;
        function checkForbiddenStates() {
          if (closed && nextTakers.length) {
            throw io.internalErr(CLOSED_CHANNEL_WITH_TAKERS);
          }
        }
        var ensureCanMutateNextTakers = function ensureCanMutateNextTakers2() {
          if (nextTakers !== currentTakers) {
            return;
          }
          nextTakers = currentTakers.slice();
        };
        var close = function close2() {
          {
            checkForbiddenStates();
          }
          closed = true;
          var takers = currentTakers = nextTakers;
          nextTakers = [];
          takers.forEach(function(taker) {
            taker(END);
          });
        };
        return _ref = {}, _ref[symbols.MULTICAST] = true, _ref.put = function put(input) {
          {
            checkForbiddenStates();
            io.check(input, is.notUndef, UNDEFINED_INPUT_ERROR);
          }
          if (closed) {
            return;
          }
          if (isEnd(input)) {
            close();
            return;
          }
          var takers = currentTakers = nextTakers;
          for (var i = 0, len = takers.length; i < len; i++) {
            var taker = takers[i];
            if (taker[symbols.MATCH](input)) {
              taker.cancel();
              taker(input);
            }
          }
        }, _ref.take = function take(cb, matcher2) {
          if (matcher2 === void 0) {
            matcher2 = wildcard;
          }
          {
            checkForbiddenStates();
          }
          if (closed) {
            cb(END);
            return;
          }
          cb[symbols.MATCH] = matcher2;
          ensureCanMutateNextTakers();
          nextTakers.push(cb);
          cb.cancel = io.once(function() {
            ensureCanMutateNextTakers();
            io.remove(nextTakers, cb);
          });
        }, _ref.close = close, _ref;
      }
      function stdChannel() {
        var chan = multicastChannel();
        var put = chan.put;
        chan.put = function(input) {
          if (input[symbols.SAGA_ACTION]) {
            put(input);
            return;
          }
          asap(function() {
            put(input);
          });
        };
        return chan;
      }
      var RUNNING = 0;
      var CANCELLED = 1;
      var ABORTED = 2;
      var DONE = 3;
      function resolvePromise(promise, cb) {
        var cancelPromise = promise[symbols.CANCEL];
        if (is.func(cancelPromise)) {
          cb.cancel = cancelPromise;
        }
        promise.then(cb, function(error) {
          cb(error, true);
        });
      }
      var current = 0;
      var nextSagaId = function() {
        return ++current;
      };
      var _effectRunnerMap;
      function getIteratorMetaInfo(iterator, fn) {
        if (iterator.isSagaIterator) {
          return {
            name: iterator.meta.name
          };
        }
        return io.getMetaInfo(fn);
      }
      function createTaskIterator(_ref) {
        var context = _ref.context, fn = _ref.fn, args = _ref.args;
        try {
          var result = fn.apply(context, args);
          if (is.iterator(result)) {
            return result;
          }
          var resolved = false;
          var next = function next2(arg) {
            if (!resolved) {
              resolved = true;
              return {
                value: result,
                done: !is.promise(result)
              };
            } else {
              return {
                value: arg,
                done: true
              };
            }
          };
          return io.makeIterator(next);
        } catch (err) {
          return io.makeIterator(function() {
            throw err;
          });
        }
      }
      function runPutEffect(env, _ref2, cb) {
        var channel2 = _ref2.channel, action = _ref2.action, resolve = _ref2.resolve;
        asap(function() {
          var result;
          try {
            result = (channel2 ? channel2.put : env.dispatch)(action);
          } catch (error) {
            cb(error, true);
            return;
          }
          if (resolve && is.promise(result)) {
            resolvePromise(result, cb);
          } else {
            cb(result);
          }
        });
      }
      function runTakeEffect(env, _ref3, cb) {
        var _ref3$channel = _ref3.channel, channel2 = _ref3$channel === void 0 ? env.channel : _ref3$channel, pattern = _ref3.pattern, maybe = _ref3.maybe;
        var takeCb = function takeCb2(input) {
          if (input instanceof Error) {
            cb(input, true);
            return;
          }
          if (isEnd(input) && !maybe) {
            cb(symbols.TERMINATE);
            return;
          }
          cb(input);
        };
        try {
          channel2.take(takeCb, is.notUndef(pattern) ? matcher(pattern) : null);
        } catch (err) {
          cb(err, true);
          return;
        }
        cb.cancel = takeCb.cancel;
      }
      function runCallEffect(env, _ref4, cb, _ref5) {
        var context = _ref4.context, fn = _ref4.fn, args = _ref4.args;
        var task = _ref5.task;
        try {
          var result = fn.apply(context, args);
          if (is.promise(result)) {
            resolvePromise(result, cb);
            return;
          }
          if (is.iterator(result)) {
            proc(env, result, task.context, current, io.getMetaInfo(fn), false, cb);
            return;
          }
          cb(result);
        } catch (error) {
          cb(error, true);
        }
      }
      function runCPSEffect(env, _ref6, cb) {
        var context = _ref6.context, fn = _ref6.fn, args = _ref6.args;
        try {
          var cpsCb = function cpsCb2(err, res) {
            if (is.undef(err)) {
              cb(res);
            } else {
              cb(err, true);
            }
          };
          fn.apply(context, args.concat(cpsCb));
          if (cpsCb.cancel) {
            cb.cancel = cpsCb.cancel;
          }
        } catch (error) {
          cb(error, true);
        }
      }
      function runForkEffect(env, _ref7, cb, _ref8) {
        var context = _ref7.context, fn = _ref7.fn, args = _ref7.args, detached = _ref7.detached;
        var parent = _ref8.task;
        var taskIterator = createTaskIterator({
          context: context,
          fn: fn,
          args: args
        });
        var meta = getIteratorMetaInfo(taskIterator, fn);
        immediately(function() {
          var child = proc(env, taskIterator, parent.context, current, meta, detached, void 0);
          if (detached) {
            cb(child);
          } else {
            if (child.isRunning()) {
              parent.queue.addTask(child);
              cb(child);
            } else if (child.isAborted()) {
              parent.queue.abort(child.error());
            } else {
              cb(child);
            }
          }
        });
      }
      function runJoinEffect(env, taskOrTasks, cb, _ref9) {
        var task = _ref9.task;
        var joinSingleTask = function joinSingleTask2(taskToJoin, cb2) {
          if (taskToJoin.isRunning()) {
            var joiner = {
              task: task,
              cb: cb2
            };
            cb2.cancel = function() {
              if (taskToJoin.isRunning())
                io.remove(taskToJoin.joiners, joiner);
            };
            taskToJoin.joiners.push(joiner);
          } else {
            if (taskToJoin.isAborted()) {
              cb2(taskToJoin.error(), true);
            } else {
              cb2(taskToJoin.result());
            }
          }
        };
        if (is.array(taskOrTasks)) {
          if (taskOrTasks.length === 0) {
            cb([]);
            return;
          }
          var childCallbacks = io.createAllStyleChildCallbacks(taskOrTasks, cb);
          taskOrTasks.forEach(function(t, i) {
            joinSingleTask(t, childCallbacks[i]);
          });
        } else {
          joinSingleTask(taskOrTasks, cb);
        }
      }
      function cancelSingleTask(taskToCancel) {
        if (taskToCancel.isRunning()) {
          taskToCancel.cancel();
        }
      }
      function runCancelEffect(env, taskOrTasks, cb, _ref10) {
        var task = _ref10.task;
        if (taskOrTasks === symbols.SELF_CANCELLATION) {
          cancelSingleTask(task);
        } else if (is.array(taskOrTasks)) {
          taskOrTasks.forEach(cancelSingleTask);
        } else {
          cancelSingleTask(taskOrTasks);
        }
        cb();
      }
      function runAllEffect(env, effects, cb, _ref11) {
        var digestEffect = _ref11.digestEffect;
        var effectId = current;
        var keys = Object.keys(effects);
        if (keys.length === 0) {
          cb(is.array(effects) ? [] : {});
          return;
        }
        var childCallbacks = io.createAllStyleChildCallbacks(effects, cb);
        keys.forEach(function(key) {
          digestEffect(effects[key], effectId, childCallbacks[key], key);
        });
      }
      function runRaceEffect(env, effects, cb, _ref12) {
        var digestEffect = _ref12.digestEffect;
        var effectId = current;
        var keys = Object.keys(effects);
        var response = is.array(effects) ? io.createEmptyArray(keys.length) : {};
        var childCbs = {};
        var completed = false;
        keys.forEach(function(key) {
          var chCbAtKey = function chCbAtKey2(res, isErr) {
            if (completed) {
              return;
            }
            if (isErr || io.shouldComplete(res)) {
              cb.cancel();
              cb(res, isErr);
            } else {
              cb.cancel();
              completed = true;
              response[key] = res;
              cb(response);
            }
          };
          chCbAtKey.cancel = io.noop;
          childCbs[key] = chCbAtKey;
        });
        cb.cancel = function() {
          if (!completed) {
            completed = true;
            keys.forEach(function(key) {
              return childCbs[key].cancel();
            });
          }
        };
        keys.forEach(function(key) {
          if (completed) {
            return;
          }
          digestEffect(effects[key], effectId, childCbs[key], key);
        });
      }
      function runSelectEffect(env, _ref13, cb) {
        var selector = _ref13.selector, args = _ref13.args;
        try {
          var state = selector.apply(void 0, [env.getState()].concat(args));
          cb(state);
        } catch (error) {
          cb(error, true);
        }
      }
      function runChannelEffect(env, _ref14, cb) {
        var pattern = _ref14.pattern, buffer = _ref14.buffer;
        var chan = channel(buffer);
        var match = matcher(pattern);
        var taker = function taker2(action) {
          if (!isEnd(action)) {
            env.channel.take(taker2, match);
          }
          chan.put(action);
        };
        var close = chan.close;
        chan.close = function() {
          taker.cancel();
          close();
        };
        env.channel.take(taker, match);
        cb(chan);
      }
      function runCancelledEffect(env, data, cb, _ref15) {
        var task = _ref15.task;
        cb(task.isCancelled());
      }
      function runFlushEffect(env, channel2, cb) {
        channel2.flush(cb);
      }
      function runGetContextEffect(env, prop, cb, _ref16) {
        var task = _ref16.task;
        cb(task.context[prop]);
      }
      function runSetContextEffect(env, props, cb, _ref17) {
        var task = _ref17.task;
        io.assignWithSymbols(task.context, props);
        cb();
      }
      var effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[io.TAKE] = runTakeEffect, _effectRunnerMap[io.PUT] = runPutEffect, _effectRunnerMap[io.ALL] = runAllEffect, _effectRunnerMap[io.RACE] = runRaceEffect, _effectRunnerMap[io.CALL] = runCallEffect, _effectRunnerMap[io.CPS] = runCPSEffect, _effectRunnerMap[io.FORK] = runForkEffect, _effectRunnerMap[io.JOIN] = runJoinEffect, _effectRunnerMap[io.CANCEL] = runCancelEffect, _effectRunnerMap[io.SELECT] = runSelectEffect, _effectRunnerMap[io.ACTION_CHANNEL] = runChannelEffect, _effectRunnerMap[io.CANCELLED] = runCancelledEffect, _effectRunnerMap[io.FLUSH] = runFlushEffect, _effectRunnerMap[io.GET_CONTEXT] = runGetContextEffect, _effectRunnerMap[io.SET_CONTEXT] = runSetContextEffect, _effectRunnerMap);
      function forkQueue(mainTask, onAbort, cont) {
        var tasks = [];
        var result;
        var completed = false;
        addTask(mainTask);
        var getTasks = function getTasks2() {
          return tasks;
        };
        function abort(err) {
          onAbort();
          cancelAll();
          cont(err, true);
        }
        function addTask(task) {
          tasks.push(task);
          task.cont = function(res, isErr) {
            if (completed) {
              return;
            }
            io.remove(tasks, task);
            task.cont = io.noop;
            if (isErr) {
              abort(res);
            } else {
              if (task === mainTask) {
                result = res;
              }
              if (!tasks.length) {
                completed = true;
                cont(result);
              }
            }
          };
        }
        function cancelAll() {
          if (completed) {
            return;
          }
          completed = true;
          tasks.forEach(function(t) {
            t.cont = io.noop;
            t.cancel();
          });
          tasks = [];
        }
        return {
          addTask: addTask,
          cancelAll: cancelAll,
          abort: abort,
          getTasks: getTasks
        };
      }
      function formatLocation(fileName, lineNumber) {
        return fileName + "?" + lineNumber;
      }
      function effectLocationAsString(effect) {
        var location = io.getLocation(effect);
        if (location) {
          var code = location.code, fileName = location.fileName, lineNumber = location.lineNumber;
          var source = code + "  " + formatLocation(fileName, lineNumber);
          return source;
        }
        return "";
      }
      function sagaLocationAsString(sagaMeta) {
        var name = sagaMeta.name, location = sagaMeta.location;
        if (location) {
          return name + "  " + formatLocation(location.fileName, location.lineNumber);
        }
        return name;
      }
      function cancelledTasksAsString(sagaStack2) {
        var cancelledTasks = io.flatMap(function(i) {
          return i.cancelledTasks;
        }, sagaStack2);
        if (!cancelledTasks.length) {
          return "";
        }
        return ["Tasks cancelled due to error:"].concat(cancelledTasks).join("\n");
      }
      var crashedEffect = null;
      var sagaStack = [];
      var addSagaFrame = function addSagaFrame2(frame) {
        frame.crashedEffect = crashedEffect;
        sagaStack.push(frame);
      };
      var clear = function clear2() {
        crashedEffect = null;
        sagaStack.length = 0;
      };
      var setCrashedEffect = function setCrashedEffect2(effect) {
        crashedEffect = effect;
      };
      var toString = function toString2() {
        var firstSaga = sagaStack[0], otherSagas = sagaStack.slice(1);
        var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;
        var errorMessage = "The above error occurred in task " + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? " \n when executing effect " + crashedEffectLocation : "");
        return [errorMessage].concat(otherSagas.map(function(s) {
          return "    created by " + sagaLocationAsString(s.meta);
        }), [cancelledTasksAsString(sagaStack)]).join("\n");
      };
      function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {
        var _task;
        if (cont === void 0) {
          cont = io.noop;
        }
        var status = RUNNING;
        var taskResult;
        var taskError;
        var deferredEnd = null;
        var cancelledDueToErrorTasks = [];
        var context = Object.create(parentContext);
        var queue2 = forkQueue(mainTask, function onAbort() {
          cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue2.getTasks().map(function(t) {
            return t.meta.name;
          }));
        }, end);
        function cancel() {
          if (status === RUNNING) {
            status = CANCELLED;
            queue2.cancelAll();
            end(symbols.TASK_CANCEL, false);
          }
        }
        function end(result, isErr) {
          if (!isErr) {
            if (result === symbols.TASK_CANCEL) {
              status = CANCELLED;
            } else if (status !== CANCELLED) {
              status = DONE;
            }
            taskResult = result;
            deferredEnd && deferredEnd.resolve(result);
          } else {
            status = ABORTED;
            addSagaFrame({
              meta: meta,
              cancelledTasks: cancelledDueToErrorTasks
            });
            if (task.isRoot) {
              var sagaStack2 = toString();
              clear();
              env.onError(result, {
                sagaStack: sagaStack2
              });
            }
            taskError = result;
            deferredEnd && deferredEnd.reject(result);
          }
          task.cont(result, isErr);
          task.joiners.forEach(function(joiner) {
            joiner.cb(result, isErr);
          });
          task.joiners = null;
        }
        function setContext(props) {
          {
            io.check(props, is.object, io.createSetContextWarning("task", props));
          }
          io.assignWithSymbols(context, props);
        }
        function toPromise() {
          if (deferredEnd) {
            return deferredEnd.promise;
          }
          deferredEnd = deferred();
          if (status === ABORTED) {
            deferredEnd.reject(taskError);
          } else if (status !== RUNNING) {
            deferredEnd.resolve(taskResult);
          }
          return deferredEnd.promise;
        }
        var task = (_task = {}, _task[symbols.TASK] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context, _task.joiners = [], _task.queue = queue2, _task.cancel = cancel, _task.cont = cont, _task.end = end, _task.setContext = setContext, _task.toPromise = toPromise, _task.isRunning = function isRunning() {
          return status === RUNNING;
        }, _task.isCancelled = function isCancelled() {
          return status === CANCELLED || status === RUNNING && mainTask.status === CANCELLED;
        }, _task.isAborted = function isAborted() {
          return status === ABORTED;
        }, _task.result = function result() {
          return taskResult;
        }, _task.error = function error() {
          return taskError;
        }, _task);
        return task;
      }
      function proc(env, iterator, parentContext, parentEffectId, meta, isRoot, cont) {
        if (iterator[io.asyncIteratorSymbol]) {
          throw new Error("redux-saga doesn't support async generators, please use only regular ones");
        }
        var finalRunEffect = env.finalizeRunEffect(runEffect);
        next.cancel = io.noop;
        var mainTask = {
          meta: meta,
          cancel: cancelMain,
          status: RUNNING
        };
        var task = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);
        var executingContext = {
          task: task,
          digestEffect: digestEffect
        };
        function cancelMain() {
          if (mainTask.status === RUNNING) {
            mainTask.status = CANCELLED;
            next(symbols.TASK_CANCEL);
          }
        }
        if (cont) {
          cont.cancel = task.cancel;
        }
        next();
        return task;
        function next(arg, isErr) {
          try {
            var result;
            if (isErr) {
              result = iterator.throw(arg);
              clear();
            } else if (io.shouldCancel(arg)) {
              mainTask.status = CANCELLED;
              next.cancel();
              result = is.func(iterator.return) ? iterator.return(symbols.TASK_CANCEL) : {
                done: true,
                value: symbols.TASK_CANCEL
              };
            } else if (io.shouldTerminate(arg)) {
              result = is.func(iterator.return) ? iterator.return() : {
                done: true
              };
            } else {
              result = iterator.next(arg);
            }
            if (!result.done) {
              digestEffect(result.value, parentEffectId, next);
            } else {
              if (mainTask.status !== CANCELLED) {
                mainTask.status = DONE;
              }
              mainTask.cont(result.value);
            }
          } catch (error) {
            if (mainTask.status === CANCELLED) {
              throw error;
            }
            mainTask.status = ABORTED;
            mainTask.cont(error, true);
          }
        }
        function runEffect(effect, effectId, currCb) {
          if (is.promise(effect)) {
            resolvePromise(effect, currCb);
          } else if (is.iterator(effect)) {
            proc(env, effect, task.context, effectId, meta, false, currCb);
          } else if (effect && effect[symbols.IO]) {
            var effectRunner = effectRunnerMap[effect.type];
            effectRunner(env, effect.payload, currCb, executingContext);
          } else {
            currCb(effect);
          }
        }
        function digestEffect(effect, parentEffectId2, cb, label) {
          if (label === void 0) {
            label = "";
          }
          var effectId = nextSagaId();
          env.sagaMonitor && env.sagaMonitor.effectTriggered({
            effectId: effectId,
            parentEffectId: parentEffectId2,
            label: label,
            effect: effect
          });
          var effectSettled;
          function currCb(res, isErr) {
            if (effectSettled) {
              return;
            }
            effectSettled = true;
            cb.cancel = io.noop;
            if (env.sagaMonitor) {
              if (isErr) {
                env.sagaMonitor.effectRejected(effectId, res);
              } else {
                env.sagaMonitor.effectResolved(effectId, res);
              }
            }
            if (isErr) {
              setCrashedEffect(effect);
            }
            cb(res, isErr);
          }
          currCb.cancel = io.noop;
          cb.cancel = function() {
            if (effectSettled) {
              return;
            }
            effectSettled = true;
            currCb.cancel();
            currCb.cancel = io.noop;
            env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);
          };
          finalRunEffect(effect, effectId, currCb);
        }
      }
      var RUN_SAGA_SIGNATURE = "runSaga(options, saga, ...args)";
      var NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
      function runSaga(_ref, saga) {
        var _ref$channel = _ref.channel, channel2 = _ref$channel === void 0 ? stdChannel() : _ref$channel, dispatch = _ref.dispatch, getState = _ref.getState, _ref$context = _ref.context, context = _ref$context === void 0 ? {} : _ref$context, sagaMonitor = _ref.sagaMonitor, effectMiddlewares = _ref.effectMiddlewares, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? io.logError : _ref$onError;
        {
          io.check(saga, is.func, NON_GENERATOR_ERR);
        }
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        var iterator = saga.apply(void 0, args);
        {
          io.check(iterator, is.iterator, NON_GENERATOR_ERR);
        }
        var effectId = nextSagaId();
        if (sagaMonitor) {
          sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || io.noop;
          sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || io.noop;
          sagaMonitor.effectResolved = sagaMonitor.effectResolved || io.noop;
          sagaMonitor.effectRejected = sagaMonitor.effectRejected || io.noop;
          sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || io.noop;
          sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || io.noop;
          sagaMonitor.rootSagaStarted({
            effectId: effectId,
            saga: saga,
            args: args
          });
        }
        {
          if (is.notUndef(dispatch)) {
            io.check(dispatch, is.func, "dispatch must be a function");
          }
          if (is.notUndef(getState)) {
            io.check(getState, is.func, "getState must be a function");
          }
          if (is.notUndef(effectMiddlewares)) {
            var MIDDLEWARE_TYPE_ERROR = "effectMiddlewares must be an array of functions";
            io.check(effectMiddlewares, is.array, MIDDLEWARE_TYPE_ERROR);
            effectMiddlewares.forEach(function(effectMiddleware) {
              return io.check(effectMiddleware, is.func, MIDDLEWARE_TYPE_ERROR);
            });
          }
          io.check(onError, is.func, "onError passed to the redux-saga is not a function!");
        }
        var finalizeRunEffect;
        if (effectMiddlewares) {
          var middleware = redux.compose.apply(void 0, effectMiddlewares);
          finalizeRunEffect = function finalizeRunEffect2(runEffect) {
            return function(effect, effectId2, currCb) {
              var plainRunEffect = function plainRunEffect2(eff) {
                return runEffect(eff, effectId2, currCb);
              };
              return middleware(plainRunEffect)(effect);
            };
          };
        } else {
          finalizeRunEffect = io.identity;
        }
        var env = {
          channel: channel2,
          dispatch: io.wrapSagaDispatch(dispatch),
          getState: getState,
          sagaMonitor: sagaMonitor,
          onError: onError,
          finalizeRunEffect: finalizeRunEffect
        };
        return immediately(function() {
          var task = proc(env, iterator, context, effectId, io.getMetaInfo(saga), true, void 0);
          if (sagaMonitor) {
            sagaMonitor.effectResolved(effectId, task);
          }
          return task;
        });
      }
      function sagaMiddlewareFactory(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$context = _ref.context, context = _ref$context === void 0 ? {} : _ref$context, _ref$channel = _ref.channel, channel2 = _ref$channel === void 0 ? stdChannel() : _ref$channel, sagaMonitor = _ref.sagaMonitor, options = _objectWithoutPropertiesLoose(_ref, ["context", "channel", "sagaMonitor"]);
        var boundRunSaga;
        {
          io.check(channel2, is.channel, "options.channel passed to the Saga middleware is not a channel");
        }
        function sagaMiddleware(_ref2) {
          var getState = _ref2.getState, dispatch = _ref2.dispatch;
          boundRunSaga = runSaga.bind(null, _extends({}, options, {
            context: context,
            channel: channel2,
            dispatch: dispatch,
            getState: getState,
            sagaMonitor: sagaMonitor
          }));
          return function(next) {
            return function(action) {
              if (sagaMonitor && sagaMonitor.actionDispatched) {
                sagaMonitor.actionDispatched(action);
              }
              var result = next(action);
              channel2.put(action);
              return result;
            };
          };
        }
        sagaMiddleware.run = function() {
          if (!boundRunSaga) {
            throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware");
          }
          return boundRunSaga.apply(void 0, arguments);
        };
        sagaMiddleware.setContext = function(props) {
          {
            io.check(props, is.object, io.createSetContextWarning("sagaMiddleware", props));
          }
          io.assignWithSymbols(context, props);
        };
        return sagaMiddleware;
      }
      Object.defineProperty(exports, "CANCEL", {
        enumerable: true,
        get: function() {
          return symbols.CANCEL;
        }
      });
      Object.defineProperty(exports, "SAGA_LOCATION", {
        enumerable: true,
        get: function() {
          return symbols.SAGA_LOCATION;
        }
      });
      exports.buffers = io.buffers;
      exports.detach = io.detach;
      exports.END = END;
      exports.channel = channel;
      exports.default = sagaMiddlewareFactory;
      exports.eventChannel = eventChannel;
      exports.isEnd = isEnd;
      exports.multicastChannel = multicastChannel;
      exports.runSaga = runSaga;
      exports.stdChannel = stdChannel;
    }
  });

  // node_modules/@redux-saga/core/dist/redux-saga-core.cjs.js
  var require_redux_saga_core_cjs = __commonJS({
    "node_modules/@redux-saga/core/dist/redux-saga-core.cjs.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_redux_saga_core_dev_cjs();
      }
    }
  });

  // node_modules/redux-saga/dist/redux-saga-core-npm-proxy.cjs.js
  var require_redux_saga_core_npm_proxy_cjs = __commonJS({
    "node_modules/redux-saga/dist/redux-saga-core-npm-proxy.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var createSagaMiddleware = require_redux_saga_core_cjs();
      var createSagaMiddleware__default = _interopDefault(createSagaMiddleware);
      Object.keys(createSagaMiddleware).forEach(function(k) {
        if (k !== "default")
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return createSagaMiddleware[k];
            }
          });
      });
      exports.default = createSagaMiddleware__default;
    }
  });

  // lib/landing/data/action/setDirectLineAppServiceExtensionStatus.js
  var require_setDirectLineAppServiceExtensionStatus = __commonJS({
    "lib/landing/data/action/setDirectLineAppServiceExtensionStatus.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS = void 0;
      exports["default"] = setDirectLineAppServiceExtensionStatus;
      var SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS = "SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS";
      exports.SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS = SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS;
      function setDirectLineAppServiceExtensionStatus(status, reason) {
        return {
          payload: {
            reason: status === "error" || status === "ready" ? reason : void 0,
            status: status === "error" || status === "ready" ? status : "checking"
          },
          type: SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS
        };
      }
    }
  });

  // lib/landing/data/reducer/directLineAppServiceExtensionStatus.js
  var require_directLineAppServiceExtensionStatus = __commonJS({
    "lib/landing/data/reducer/directLineAppServiceExtensionStatus.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = directLineAppServiceExtensionStatus;
      var _setDirectLineAppServiceExtensionStatus = require_setDirectLineAppServiceExtensionStatus();
      function directLineAppServiceExtensionStatus() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
          status: "checking"
        };
        var _ref = arguments.length > 1 ? arguments[1] : void 0, payload = _ref.payload, type = _ref.type;
        if (type === _setDirectLineAppServiceExtensionStatus.SET_DIRECT_LINE_APP_SERVICE_EXTENSION_STATUS) {
          var reason = payload.reason, status = payload.status;
          if (status === "error") {
            return {
              reason: reason,
              status: status
            };
          } else if (status === "ready") {
            return {
              reason: reason,
              status: status
            };
          }
          return {
            status: "checking"
          };
        }
        return state;
      }
    }
  });

  // node_modules/core-js-pure/internals/delete-property-or-throw.js
  var require_delete_property_or_throw = __commonJS({
    "node_modules/core-js-pure/internals/delete-property-or-throw.js": function(exports, module) {
      "use strict";
      var tryToString = require_try_to_string();
      var $TypeError = TypeError;
      module.exports = function(O, P) {
        if (!delete O[P])
          throw $TypeError("Cannot delete property " + tryToString(P) + " of " + tryToString(O));
      };
    }
  });

  // node_modules/core-js-pure/internals/engine-ff-version.js
  var require_engine_ff_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-ff-version.js": function(exports, module) {
      var userAgent = require_engine_user_agent();
      var firefox = userAgent.match(/firefox\/(\d+)/i);
      module.exports = !!firefox && +firefox[1];
    }
  });

  // node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
  var require_engine_is_ie_or_edge = __commonJS({
    "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js": function(exports, module) {
      var UA = require_engine_user_agent();
      module.exports = /MSIE|Trident/.test(UA);
    }
  });

  // node_modules/core-js-pure/internals/engine-webkit-version.js
  var require_engine_webkit_version = __commonJS({
    "node_modules/core-js-pure/internals/engine-webkit-version.js": function(exports, module) {
      var userAgent = require_engine_user_agent();
      var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
      module.exports = !!webkit && +webkit[1];
    }
  });

  // node_modules/core-js-pure/modules/es.array.sort.js
  var require_es_array_sort = __commonJS({
    "node_modules/core-js-pure/modules/es.array.sort.js": function() {
      "use strict";
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var deletePropertyOrThrow = require_delete_property_or_throw();
      var toString = require_to_string();
      var fails = require_fails();
      var internalSort = require_array_sort();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var FF = require_engine_ff_version();
      var IE_OR_EDGE = require_engine_is_ie_or_edge();
      var V8 = require_engine_v8_version();
      var WEBKIT = require_engine_webkit_version();
      var test = [];
      var nativeSort = uncurryThis(test.sort);
      var push = uncurryThis(test.push);
      var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(void 0);
      });
      var FAILS_ON_NULL = fails(function() {
        test.sort(null);
      });
      var STRICT_METHOD = arrayMethodIsStrict("sort");
      var STABLE_SORT = !fails(function() {
        if (V8)
          return V8 < 70;
        if (FF && FF > 3)
          return;
        if (IE_OR_EDGE)
          return true;
        if (WEBKIT)
          return WEBKIT < 603;
        var result = "";
        var code, chr, value, index;
        for (code = 65; code < 76; code++) {
          chr = String.fromCharCode(code);
          switch (code) {
            case 66:
            case 69:
            case 70:
            case 72:
              value = 3;
              break;
            case 68:
            case 71:
              value = 4;
              break;
            default:
              value = 2;
          }
          for (index = 0; index < 47; index++) {
            test.push({ k: chr + index, v: value });
          }
        }
        test.sort(function(a, b) {
          return b.v - a.v;
        });
        for (index = 0; index < test.length; index++) {
          chr = test[index].k.charAt(0);
          if (result.charAt(result.length - 1) !== chr)
            result += chr;
        }
        return result !== "DGBEFHACIJK";
      });
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
      var getSortCompare = function(comparefn) {
        return function(x, y) {
          if (y === void 0)
            return -1;
          if (x === void 0)
            return 1;
          if (comparefn !== void 0)
            return +comparefn(x, y) || 0;
          return toString(x) > toString(y) ? 1 : -1;
        };
      };
      $({ target: "Array", proto: true, forced: FORCED }, {
        sort: function sort(comparefn) {
          if (comparefn !== void 0)
            aCallable(comparefn);
          var array = toObject(this);
          if (STABLE_SORT)
            return comparefn === void 0 ? nativeSort(array) : nativeSort(array, comparefn);
          var items = [];
          var arrayLength = lengthOfArrayLike(array);
          var itemsLength, index;
          for (index = 0; index < arrayLength; index++) {
            if (index in array)
              push(items, array[index]);
          }
          internalSort(items, getSortCompare(comparefn));
          itemsLength = lengthOfArrayLike(items);
          index = 0;
          while (index < itemsLength)
            array[index] = items[index++];
          while (index < arrayLength)
            deletePropertyOrThrow(array, index++);
          return array;
        }
      });
    }
  });

  // node_modules/core-js-pure/es/array/virtual/sort.js
  var require_sort = __commonJS({
    "node_modules/core-js-pure/es/array/virtual/sort.js": function(exports, module) {
      require_es_array_sort();
      var entryVirtual = require_entry_virtual();
      module.exports = entryVirtual("Array").sort;
    }
  });

  // node_modules/core-js-pure/es/instance/sort.js
  var require_sort2 = __commonJS({
    "node_modules/core-js-pure/es/instance/sort.js": function(exports, module) {
      var isPrototypeOf = require_object_is_prototype_of();
      var method = require_sort();
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        var own = it.sort;
        return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
      };
    }
  });

  // node_modules/core-js-pure/stable/instance/sort.js
  var require_sort3 = __commonJS({
    "node_modules/core-js-pure/stable/instance/sort.js": function(exports, module) {
      var parent = require_sort2();
      module.exports = parent;
    }
  });

  // node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
  var require_sort4 = __commonJS({
    "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js": function(exports, module) {
      module.exports = require_sort3();
    }
  });

  // node_modules/math-random/browser/crypto.js
  var require_crypto = __commonJS({
    "node_modules/math-random/browser/crypto.js": function(exports, module) {
      var global2 = typeof window !== "undefined" ? window : self;
      module.exports = global2.crypto || global2.msCrypto;
    }
  });

  // node_modules/math-random/browser/index.js
  var require_browser = __commonJS({
    "node_modules/math-random/browser/index.js": function(exports, module) {
      module.exports = function(crypto) {
        if (!crypto)
          return Math.random;
        var max = Math.pow(2, 32);
        var u32 = new Uint32Array(1);
        return function random() {
          return crypto.getRandomValues(u32)[0] / max;
        };
      }(require_crypto());
    }
  });

  // lib/landing/util/caseInsensitiveCompare.js
  var require_caseInsensitiveCompare = __commonJS({
    "lib/landing/util/caseInsensitiveCompare.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = caseInsensitiveCompare;
      function caseInsensitiveCompare(x, y) {
        x = x && x.toLowerCase();
        y = y && y.toLowerCase();
        return x > y ? 1 : x < y ? -1 : 0;
      }
    }
  });

  // lib/landing/data/action/setConversationId.js
  var require_setConversationId = __commonJS({
    "lib/landing/data/action/setConversationId.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.SET_CONVERSATION_ID = void 0;
      exports["default"] = setConversationId;
      var SET_CONVERSATION_ID = "SET_CONVERSATION_ID";
      exports.SET_CONVERSATION_ID = SET_CONVERSATION_ID;
      function setConversationId(conversationId) {
        return {
          payload: {
            conversationId: conversationId
          },
          type: SET_CONVERSATION_ID
        };
      }
    }
  });

  // lib/landing/data/reducer/directLineCredentials.js
  var require_directLineCredentials = __commonJS({
    "lib/landing/data/reducer/directLineCredentials.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = directLineCredentials;
      var _toConsumableArray2 = _interopRequireDefault2(require_toConsumableArray());
      var _sort = _interopRequireDefault2(require_sort4());
      var _concat = _interopRequireDefault2(require_concat4());
      var _mathRandom = _interopRequireDefault2(require_browser());
      var _simpleUpdateIn = _interopRequireDefault2(require_simple_update_in_production_min());
      var _caseInsensitiveCompare = _interopRequireDefault2(require_caseInsensitiveCompare());
      var _setConversationId = require_setConversationId();
      var _setDirectLineDomainHost = require_setDirectLineDomainHost();
      var _setDirectLineSecret = require_setDirectLineSecret();
      var _setDirectLineToken = require_setDirectLineToken();
      var _setDirectLineUserId = require_setDirectLineUserId();
      var _saveDirectLineSecret = require_saveDirectLineSecret();
      var _removeSavedDirectLineSecret = require_removeSavedDirectLineSecret();
      var DEFAULT_STATE = {
        conversationId: "",
        domainHost: "webchat-mockbot-se.azurewebsites.net",
        savedSecrets: [],
        secret: "",
        token: "",
        tokenURL: "",
        userId: "r_".concat((0, _mathRandom["default"])().toString(36).substr(2, 10))
      };
      function directLineCredentials() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_STATE;
        var _ref = arguments.length > 1 ? arguments[1] : void 0, payload = _ref.payload, type = _ref.type;
        if (type === _removeSavedDirectLineSecret.REMOVE_SAVED_DIRECT_LINE_SECRET) {
          var secret = payload.secret;
          state = (0, _simpleUpdateIn["default"])(state, ["savedSecrets", function(value) {
            return value === secret;
          }]);
        } else if (type === _saveDirectLineSecret.SAVE_DIRECT_LINE_SECRET) {
          var _secret = payload.secret;
          state = (0, _simpleUpdateIn["default"])(state, ["savedSecrets", function(value) {
            return value === _secret;
          }]);
          state = (0, _simpleUpdateIn["default"])(state, ["savedSecrets"], function(secrets) {
            var _context, _context2;
            return (0, _sort["default"])(_context = (0, _concat["default"])(_context2 = []).call(_context2, (0, _toConsumableArray2["default"])(secrets), [_secret])).call(_context, _caseInsensitiveCompare["default"]);
          });
        } else if (type === _setConversationId.SET_CONVERSATION_ID) {
          state = (0, _simpleUpdateIn["default"])(state, ["conversationId"], function() {
            return payload.conversationId;
          });
        } else if (type === _setDirectLineDomainHost.SET_DIRECT_LINE_DOMAIN_HOST) {
          state = (0, _simpleUpdateIn["default"])(state, ["domainHost"], function() {
            return payload.host;
          });
        } else if (type === _setDirectLineSecret.SET_DIRECT_LINE_SECRET) {
          if (typeof payload.secret === "string") {
            state = (0, _simpleUpdateIn["default"])(state, ["secret"], function() {
              return payload.secret;
            });
          }
        } else if (type === _setDirectLineToken.SET_DIRECT_LINE_TOKEN) {
          state = (0, _simpleUpdateIn["default"])(state, ["token"], function() {
            return payload.token;
          });
        } else if (type === _setDirectLineUserId.SET_DIRECT_LINE_USER_ID) {
          state = (0, _simpleUpdateIn["default"])(state, ["userId"], function() {
            return payload.userId;
          });
        }
        return state;
      }
    }
  });

  // lib/landing/data/reducer/protocol.js
  var require_protocol = __commonJS({
    "lib/landing/data/reducer/protocol.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = protocol;
      var _setProtocolAppServiceExtension = require_setProtocolAppServiceExtension();
      var _setProtocolAppServiceExtensionInsecure = require_setProtocolAppServiceExtensionInsecure();
      var _setProtocolDirectLineSpeech = require_setProtocolDirectLineSpeech();
      var _setProtocolREST = require_setProtocolREST();
      var _setProtocolTranscript = require_setProtocolTranscript();
      var _setProtocolWebSocket = require_setProtocolWebSocket();
      function protocol() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "web socket";
        var _ref = arguments.length > 1 ? arguments[1] : void 0, type = _ref.type;
        if (type === _setProtocolAppServiceExtension.SET_PROTOCOL_APP_SERVICE_EXTENSION) {
          state = "app service extension";
        } else if (type === _setProtocolAppServiceExtensionInsecure.SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE) {
          state = "app service extension insecure";
        } else if (type === _setProtocolDirectLineSpeech.SET_PROTOCOL_DIRECT_LINE_SPEECH) {
          state = "direct line speech";
        } else if (type === _setProtocolREST.SET_PROTOCOL_REST) {
          state = "rest";
        } else if (type === _setProtocolTranscript.SET_PROTOCOL_TRANSCRIPT) {
          state = "transcript";
        } else if (type === _setProtocolWebSocket.SET_PROTOCOL_WEB_SOCKET) {
          state = "web socket";
        }
        return state;
      }
    }
  });

  // lib/landing/data/reducer/speechCredentials.js
  var require_speechCredentials = __commonJS({
    "lib/landing/data/reducer/speechCredentials.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = setSpeechKey;
      var _toConsumableArray2 = _interopRequireDefault2(require_toConsumableArray());
      var _sort = _interopRequireDefault2(require_sort4());
      var _concat = _interopRequireDefault2(require_concat4());
      var _simpleUpdateIn = _interopRequireDefault2(require_simple_update_in_production_min());
      var _caseInsensitiveCompare = _interopRequireDefault2(require_caseInsensitiveCompare());
      var _setSpeechAuthorizationToken = require_setSpeechAuthorizationToken();
      var _setSpeechRegion = require_setSpeechRegion();
      var _setSpeechSubscriptionKey = require_setSpeechSubscriptionKey();
      var _removeSavedSpeechSubscriptionKey = require_removeSavedSpeechSubscriptionKey();
      var _saveSpeechSubscriptionKey = require_saveSpeechSubscriptionKey();
      var DEFAULT_STATE = {
        authorizationToken: "",
        region: "westus",
        savedSubscriptionKeys: [],
        subscriptionKey: ""
      };
      function setSpeechKey() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_STATE;
        var _ref = arguments.length > 1 ? arguments[1] : void 0, payload = _ref.payload, type = _ref.type;
        if (type === _removeSavedSpeechSubscriptionKey.REMOVE_SAVED_SPEECH_SUBSCRIPTION_KEY) {
          state = (0, _simpleUpdateIn["default"])(state, ["savedSubscriptionKeys", function(value) {
            return value === payload.subscriptionKey;
          }]);
        } else if (type === _saveSpeechSubscriptionKey.SAVE_SPEECH_SUBSCRIPTION_KEY) {
          var subscriptionKey = payload.subscriptionKey;
          state = (0, _simpleUpdateIn["default"])(state, ["savedSubscriptionKeys", function(value) {
            return value === subscriptionKey;
          }]);
          state = (0, _simpleUpdateIn["default"])(state, ["savedSubscriptionKeys"], function(keys) {
            var _context, _context2;
            return (0, _sort["default"])(_context = (0, _concat["default"])(_context2 = []).call(_context2, (0, _toConsumableArray2["default"])(keys || []), [subscriptionKey])).call(_context, _caseInsensitiveCompare["default"]);
          });
        } else if (type === _setSpeechAuthorizationToken.SET_SPEECH_AUTHORIZATION_TOKEN) {
          state = (0, _simpleUpdateIn["default"])(state, ["authorizationToken"], function() {
            return payload.authorizationToken;
          });
        } else if (type === _setSpeechRegion.SET_SPEECH_REGION) {
          state = (0, _simpleUpdateIn["default"])(state, ["region"], function() {
            return payload.region;
          });
        } else if (type === _setSpeechSubscriptionKey.SET_SPEECH_SUBSCRIPTION_KEY) {
          state = (0, _simpleUpdateIn["default"])(state, ["subscriptionKey"], function() {
            return payload.subscriptionKey;
          });
        }
        return state;
      }
    }
  });

  // lib/landing/data/reducer/transcript.js
  var require_transcript = __commonJS({
    "lib/landing/data/reducer/transcript.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = transcript;
      var _simpleUpdateIn = _interopRequireDefault2(require_simple_update_in_production_min());
      var _hideTranscriptDialog = require_hideTranscriptDialog();
      var _saveTranscriptDialogContent = require_saveTranscriptDialogContent();
      var _showTranscriptDialog = require_showTranscriptDialog();
      var DEFAULT_STATE = {
        content: "",
        visible: false
      };
      function transcript() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : DEFAULT_STATE;
        var _ref = arguments.length > 1 ? arguments[1] : void 0, payload = _ref.payload, type = _ref.type;
        if (type === _hideTranscriptDialog.HIDE_TRANSCRIPT_DIALOG) {
          state = (0, _simpleUpdateIn["default"])(state, ["visible"], function() {
            return false;
          });
        } else if (type === _saveTranscriptDialogContent.SAVE_TRANSCRIPT_DIALOG_CONTENT) {
          state = (0, _simpleUpdateIn["default"])(state, ["content"], function() {
            return payload.content;
          });
        } else if (type === _showTranscriptDialog.SHOW_TRANSCRIPT_DIALOG) {
          state = (0, _simpleUpdateIn["default"])(state, ["visible"], function() {
            return true;
          });
        }
        return state;
      }
    }
  });

  // lib/landing/data/reducer/version.js
  var require_version = __commonJS({
    "lib/landing/data/reducer/version.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = _default;
      var _setVersion = require_setVersion();
      function _default() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "dev";
        var action = arguments.length > 1 ? arguments[1] : void 0;
        if (action.type === _setVersion.SET_VERSION) {
          state = action.payload.version;
        }
        return state;
      }
    }
  });

  // lib/landing/data/reducer.js
  var require_reducer = __commonJS({
    "lib/landing/data/reducer.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _redux = require_redux();
      var _directLineAppServiceExtensionStatus = _interopRequireDefault2(require_directLineAppServiceExtensionStatus());
      var _directLineCredentials = _interopRequireDefault2(require_directLineCredentials());
      var _protocol = _interopRequireDefault2(require_protocol());
      var _speechCredentials = _interopRequireDefault2(require_speechCredentials());
      var _transcript = _interopRequireDefault2(require_transcript());
      var _version = _interopRequireDefault2(require_version());
      var _default = (0, _redux.combineReducers)({
        directLineAppServiceExtensionStatus: _directLineAppServiceExtensionStatus["default"],
        directLineCredentials: _directLineCredentials["default"],
        protocol: _protocol["default"],
        speechCredentials: _speechCredentials["default"],
        transcript: _transcript["default"],
        version: _version["default"]
      });
      exports["default"] = _default;
    }
  });

  // node_modules/@redux-saga/core/dist/redux-saga-effects.dev.cjs.js
  var require_redux_saga_effects_dev_cjs = __commonJS({
    "node_modules/@redux-saga/core/dist/redux-saga-effects.dev.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      require_redux_saga_symbols_cjs();
      require_extends();
      var is = require_redux_saga_is_cjs();
      var io = require_io_a03c6210();
      require_redux_saga_delay_p_cjs();
      var done = function done2(value) {
        return {
          done: true,
          value: value
        };
      };
      var qEnd = {};
      function safeName(patternOrChannel) {
        if (is.channel(patternOrChannel)) {
          return "channel";
        }
        if (is.stringableFunc(patternOrChannel)) {
          return String(patternOrChannel);
        }
        if (is.func(patternOrChannel)) {
          return patternOrChannel.name;
        }
        return String(patternOrChannel);
      }
      function fsmIterator(fsm, startState, name) {
        var stateUpdater, errorState, effect, nextState = startState;
        function next(arg, error) {
          if (nextState === qEnd) {
            return done(arg);
          }
          if (error && !errorState) {
            nextState = qEnd;
            throw error;
          } else {
            stateUpdater && stateUpdater(arg);
            var currentState = error ? fsm[errorState](error) : fsm[nextState]();
            nextState = currentState.nextState;
            effect = currentState.effect;
            stateUpdater = currentState.stateUpdater;
            errorState = currentState.errorState;
            return nextState === qEnd ? done(arg) : effect;
          }
        }
        return io.makeIterator(next, function(error) {
          return next(null, error);
        }, name);
      }
      function takeEvery(patternOrChannel, worker) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        var yTake = {
          done: false,
          value: io.take(patternOrChannel)
        };
        var yFork = function yFork2(ac) {
          return {
            done: false,
            value: io.fork.apply(void 0, [worker].concat(args, [ac]))
          };
        };
        var action, setAction = function setAction2(ac) {
          return action = ac;
        };
        return fsmIterator({
          q1: function q1() {
            return {
              nextState: "q2",
              effect: yTake,
              stateUpdater: setAction
            };
          },
          q2: function q2() {
            return {
              nextState: "q1",
              effect: yFork(action)
            };
          }
        }, "q1", "takeEvery(" + safeName(patternOrChannel) + ", " + worker.name + ")");
      }
      function takeLatest(patternOrChannel, worker) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        var yTake = {
          done: false,
          value: io.take(patternOrChannel)
        };
        var yFork = function yFork2(ac) {
          return {
            done: false,
            value: io.fork.apply(void 0, [worker].concat(args, [ac]))
          };
        };
        var yCancel = function yCancel2(task2) {
          return {
            done: false,
            value: io.cancel(task2)
          };
        };
        var task, action;
        var setTask = function setTask2(t) {
          return task = t;
        };
        var setAction = function setAction2(ac) {
          return action = ac;
        };
        return fsmIterator({
          q1: function q1() {
            return {
              nextState: "q2",
              effect: yTake,
              stateUpdater: setAction
            };
          },
          q2: function q2() {
            return task ? {
              nextState: "q3",
              effect: yCancel(task)
            } : {
              nextState: "q1",
              effect: yFork(action),
              stateUpdater: setTask
            };
          },
          q3: function q3() {
            return {
              nextState: "q1",
              effect: yFork(action),
              stateUpdater: setTask
            };
          }
        }, "q1", "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
      }
      function takeLeading(patternOrChannel, worker) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        var yTake = {
          done: false,
          value: io.take(patternOrChannel)
        };
        var yCall = function yCall2(ac) {
          return {
            done: false,
            value: io.call.apply(void 0, [worker].concat(args, [ac]))
          };
        };
        var action;
        var setAction = function setAction2(ac) {
          return action = ac;
        };
        return fsmIterator({
          q1: function q1() {
            return {
              nextState: "q2",
              effect: yTake,
              stateUpdater: setAction
            };
          },
          q2: function q2() {
            return {
              nextState: "q1",
              effect: yCall(action)
            };
          }
        }, "q1", "takeLeading(" + safeName(patternOrChannel) + ", " + worker.name + ")");
      }
      function throttle(delayLength, patternOrChannel, worker) {
        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          args[_key - 3] = arguments[_key];
        }
        var action, channel;
        var yTake = function yTake2() {
          return {
            done: false,
            value: io.take(channel)
          };
        };
        var yFork = function yFork2(ac) {
          return {
            done: false,
            value: io.fork.apply(void 0, [worker].concat(args, [ac]))
          };
        };
        var yDelay = {
          done: false,
          value: io.delay(delayLength)
        };
        var setAction = function setAction2(ac) {
          return action = ac;
        };
        var setChannel = function setChannel2(ch) {
          return channel = ch;
        };
        var needsChannel = !is.channel(patternOrChannel);
        if (!needsChannel) {
          setChannel(patternOrChannel);
        }
        return fsmIterator({
          q1: function q1() {
            var yActionChannel = {
              done: false,
              value: io.actionChannel(patternOrChannel, io.sliding(1))
            };
            return {
              nextState: "q2",
              effect: yActionChannel,
              stateUpdater: setChannel
            };
          },
          q2: function q2() {
            return {
              nextState: "q3",
              effect: yTake(),
              stateUpdater: setAction
            };
          },
          q3: function q3() {
            return {
              nextState: "q4",
              effect: yFork(action)
            };
          },
          q4: function q4() {
            return {
              nextState: "q2",
              effect: yDelay
            };
          }
        }, needsChannel ? "q1" : "q2", "throttle(" + safeName(patternOrChannel) + ", " + worker.name + ")");
      }
      function retry(maxTries, delayLength, fn) {
        var counter = maxTries;
        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          args[_key - 3] = arguments[_key];
        }
        var yCall = {
          done: false,
          value: io.call.apply(void 0, [fn].concat(args))
        };
        var yDelay = {
          done: false,
          value: io.delay(delayLength)
        };
        return fsmIterator({
          q1: function q1() {
            return {
              nextState: "q2",
              effect: yCall,
              errorState: "q10"
            };
          },
          q2: function q2() {
            return {
              nextState: qEnd
            };
          },
          q10: function q10(error) {
            counter -= 1;
            if (counter <= 0) {
              throw error;
            }
            return {
              nextState: "q1",
              effect: yDelay
            };
          }
        }, "q1", "retry(" + fn.name + ")");
      }
      function debounceHelper(delayLength, patternOrChannel, worker) {
        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          args[_key - 3] = arguments[_key];
        }
        var action, raceOutput;
        var yTake = {
          done: false,
          value: io.take(patternOrChannel)
        };
        var yRace = {
          done: false,
          value: io.race({
            action: io.take(patternOrChannel),
            debounce: io.delay(delayLength)
          })
        };
        var yFork = function yFork2(ac) {
          return {
            done: false,
            value: io.fork.apply(void 0, [worker].concat(args, [ac]))
          };
        };
        var yNoop = function yNoop2(value) {
          return {
            done: false,
            value: value
          };
        };
        var setAction = function setAction2(ac) {
          return action = ac;
        };
        var setRaceOutput = function setRaceOutput2(ro) {
          return raceOutput = ro;
        };
        return fsmIterator({
          q1: function q1() {
            return {
              nextState: "q2",
              effect: yTake,
              stateUpdater: setAction
            };
          },
          q2: function q2() {
            return {
              nextState: "q3",
              effect: yRace,
              stateUpdater: setRaceOutput
            };
          },
          q3: function q3() {
            return raceOutput.debounce ? {
              nextState: "q1",
              effect: yFork(action)
            } : {
              nextState: "q2",
              effect: yNoop(raceOutput.action),
              stateUpdater: setAction
            };
          }
        }, "q1", "debounce(" + safeName(patternOrChannel) + ", " + worker.name + ")");
      }
      var validateTakeEffect = function validateTakeEffect2(fn, patternOrChannel, worker) {
        io.check(patternOrChannel, is.notUndef, fn.name + " requires a pattern or channel");
        io.check(worker, is.notUndef, fn.name + " requires a saga parameter");
      };
      function takeEvery$1(patternOrChannel, worker) {
        {
          validateTakeEffect(takeEvery$1, patternOrChannel, worker);
        }
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        return io.fork.apply(void 0, [takeEvery, patternOrChannel, worker].concat(args));
      }
      function takeLatest$1(patternOrChannel, worker) {
        {
          validateTakeEffect(takeLatest$1, patternOrChannel, worker);
        }
        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }
        return io.fork.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));
      }
      function takeLeading$1(patternOrChannel, worker) {
        {
          validateTakeEffect(takeLeading$1, patternOrChannel, worker);
        }
        for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          args[_key3 - 2] = arguments[_key3];
        }
        return io.fork.apply(void 0, [takeLeading, patternOrChannel, worker].concat(args));
      }
      function throttle$1(ms, patternOrChannel, worker) {
        {
          io.check(patternOrChannel, is.notUndef, "throttle requires a pattern or channel");
          io.check(worker, is.notUndef, "throttle requires a saga parameter");
        }
        for (var _len4 = arguments.length, args = new Array(_len4 > 3 ? _len4 - 3 : 0), _key4 = 3; _key4 < _len4; _key4++) {
          args[_key4 - 3] = arguments[_key4];
        }
        return io.fork.apply(void 0, [throttle, ms, patternOrChannel, worker].concat(args));
      }
      function retry$1(maxTries, delayLength, worker) {
        for (var _len5 = arguments.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
          args[_key5 - 3] = arguments[_key5];
        }
        return io.call.apply(void 0, [retry, maxTries, delayLength, worker].concat(args));
      }
      function debounce(delayLength, pattern, worker) {
        for (var _len6 = arguments.length, args = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
          args[_key6 - 3] = arguments[_key6];
        }
        return io.fork.apply(void 0, [debounceHelper, delayLength, pattern, worker].concat(args));
      }
      exports.actionChannel = io.actionChannel;
      exports.all = io.all;
      exports.apply = io.apply;
      exports.call = io.call;
      exports.cancel = io.cancel;
      exports.cancelled = io.cancelled;
      exports.cps = io.cps;
      exports.delay = io.delay;
      exports.effectTypes = io.effectTypes;
      exports.flush = io.flush;
      exports.fork = io.fork;
      exports.getContext = io.getContext;
      exports.join = io.join;
      exports.put = io.put;
      exports.putResolve = io.putResolve;
      exports.race = io.race;
      exports.select = io.select;
      exports.setContext = io.setContext;
      exports.spawn = io.spawn;
      exports.take = io.take;
      exports.takeMaybe = io.takeMaybe;
      exports.debounce = debounce;
      exports.retry = retry$1;
      exports.takeEvery = takeEvery$1;
      exports.takeLatest = takeLatest$1;
      exports.takeLeading = takeLeading$1;
      exports.throttle = throttle$1;
    }
  });

  // node_modules/@redux-saga/core/dist/redux-saga-effects.cjs.js
  var require_redux_saga_effects_cjs = __commonJS({
    "node_modules/@redux-saga/core/dist/redux-saga-effects.cjs.js": function(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_redux_saga_effects_dev_cjs();
      }
    }
  });

  // node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.cjs.js
  var require_redux_saga_effects_npm_proxy_cjs = __commonJS({
    "node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.cjs.js": function(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var effects = require_redux_saga_effects_cjs();
      Object.keys(effects).forEach(function(k) {
        if (k !== "default")
          Object.defineProperty(exports, k, {
            enumerable: true,
            get: function() {
              return effects[k];
            }
          });
      });
    }
  });

  // lib/landing/data/saga/autoRefreshDirectLineToken.js
  var require_autoRefreshDirectLineToken = __commonJS({
    "lib/landing/data/saga/autoRefreshDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = autoRefreshDirectLineTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _promise = _interopRequireDefault2(require_promise8());
      var _setTimeout2 = _interopRequireDefault2(require_set_timeout2());
      var _now = _interopRequireDefault2(require_now3());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _setDirectLineToken = require_setDirectLineToken();
      var _refreshDirectLineToken = _interopRequireDefault2(require_refreshDirectLineToken());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(autoRefreshDirectLineTokenSaga);
      var REFRESH_TOKEN_IF_EXPIRING_IN = 6e4 * 20;
      var WAKE_INTERVAL = 3e4;
      function sleep(durationInMS) {
        return new _promise["default"](function(resolve) {
          return (0, _setTimeout2["default"])(resolve, durationInMS);
        });
      }
      function autoRefreshDirectLineTokenSaga() {
        var task, token, _yield$take;
        return (0, _regeneratorRuntime2["default"])().wrap(function autoRefreshDirectLineTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.select)(function(_ref) {
                  var token2 = _ref.directLineCredentials.token;
                  return token2;
                });
              case 2:
                token = _context2.sent;
                if (!task) {
                  _context2.next = 6;
                  break;
                }
                _context2.next = 6;
                return (0, _effects.cancel)(task);
              case 6:
                _context2.t0 = token;
                if (!_context2.t0) {
                  _context2.next = 11;
                  break;
                }
                _context2.next = 10;
                return (0, _effects.fork)(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(token2) {
                  var expiringIn;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          expiringIn = (((0, _tryDecodeJWT["default"])(token2) || {}).exp || 0) * 1e3 - (0, _now["default"])();
                          _context.t0 = expiringIn > 0 && expiringIn < REFRESH_TOKEN_IF_EXPIRING_IN;
                          if (!_context.t0) {
                            _context.next = 5;
                            break;
                          }
                          _context.next = 5;
                          return (0, _effects.put)((0, _refreshDirectLineToken["default"])());
                        case 5:
                          _context.next = 7;
                          return (0, _effects.call)(sleep, WAKE_INTERVAL);
                        case 7:
                          _context.next = 0;
                          break;
                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }), token);
              case 10:
                _context2.t0 = _context2.sent;
              case 11:
                task = _context2.t0;
                _context2.next = 14;
                return (0, _effects.take)(_setDirectLineToken.SET_DIRECT_LINE_TOKEN);
              case 14:
                _yield$take = _context2.sent;
                token = _yield$take.payload.token;
              case 16:
                _context2.next = 0;
                break;
              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/util/fetchDirectLineToken.js
  var require_fetchDirectLineToken2 = __commonJS({
    "lib/landing/util/fetchDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = fetchDirectLineToken;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _whatwgFetch = require_fetch_umd();
      function fetchDirectLineToken(_x) {
        return _fetchDirectLineToken.apply(this, arguments);
      }
      function _fetchDirectLineToken() {
        _fetchDirectLineToken = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(url) {
          var res, contentType;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return (0, _whatwgFetch.fetch)(url, {
                    method: "POST"
                  });
                case 2:
                  res = _context.sent;
                  if (res.ok) {
                    _context.next = 5;
                    break;
                  }
                  throw new Error("Server returned ".concat(res.status, " while fetching Direct Line token."));
                case 5:
                  contentType = res.headers.get("content-type");
                  if (!(contentType === "application/json")) {
                    _context.next = 12;
                    break;
                  }
                  _context.next = 9;
                  return res.json();
                case 9:
                  return _context.abrupt("return", _context.sent);
                case 12:
                  _context.next = 14;
                  return res.text();
                case 14:
                  _context.t0 = _context.sent;
                  return _context.abrupt("return", {
                    token: _context.t0
                  });
                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _fetchDirectLineToken.apply(this, arguments);
      }
    }
  });

  // lib/landing/data/saga/fetchDirectLineToken.js
  var require_fetchDirectLineToken3 = __commonJS({
    "lib/landing/data/saga/fetchDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = fetchDirectLineTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _url = _interopRequireDefault2(require_url3());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _fetchDirectLineToken = require_fetchDirectLineToken();
      var _fetchDirectLineToken2 = _interopRequireDefault2(require_fetchDirectLineToken2());
      var _setDirectLineToken = _interopRequireDefault2(require_setDirectLineToken());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(fetchDirectLineTokenSaga);
      function fetchDirectLineTokenSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function fetchDirectLineTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_fetchDirectLineToken.FETCH_DIRECT_LINE_TOKEN, /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                  var _yield$select, secret, userId, url, _yield$call, token;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return (0, _effects.select)(function(_ref) {
                            var _ref$directLineCreden = _ref.directLineCredentials, secret2 = _ref$directLineCreden.secret, userId2 = _ref$directLineCreden.userId;
                            return {
                              secret: secret2,
                              userId: userId2
                            };
                          });
                        case 3:
                          _yield$select = _context.sent;
                          secret = _yield$select.secret;
                          userId = _yield$select.userId;
                          url = secret;
                          if (/^https?:/.test(url)) {
                            _context.next = 9;
                            break;
                          }
                          return _context.abrupt("return");
                        case 9:
                          url = url.replace(/\{u[s\u017F]erid\}/gi, userId);
                          _context.next = 12;
                          return (0, _effects.call)(_fetchDirectLineToken2["default"], url);
                        case 12:
                          _yield$call = _context.sent;
                          token = _yield$call.token;
                          if (new _url["default"](url).hostname === "covid19healthbot.cdc.gov") {
                            token = (tryDecodeJWT(token) || {}).connectorToken;
                          }
                          _context.next = 17;
                          return (0, _effects.put)((0, _setDirectLineToken["default"])(token));
                        case 17:
                          _context.next = 22;
                          break;
                        case 19:
                          _context.prev = 19;
                          _context.t0 = _context["catch"](0);
                          console.error(_context.t0);
                        case 22:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[0, 19]]);
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/util/fetchSpeechAuthorizationToken.js
  var require_fetchSpeechAuthorizationToken2 = __commonJS({
    "lib/landing/util/fetchSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = fetchSpeechAuthorizationToken;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _whatwgFetch = require_fetch_umd();
      function fetchSpeechAuthorizationToken(_x) {
        return _fetchSpeechAuthorizationToken.apply(this, arguments);
      }
      function _fetchSpeechAuthorizationToken() {
        _fetchSpeechAuthorizationToken = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(url) {
          var res, contentType;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return (0, _whatwgFetch.fetch)(url, {
                    method: "POST"
                  });
                case 2:
                  res = _context.sent;
                  if (res.ok) {
                    _context.next = 5;
                    break;
                  }
                  throw new Error("Server returned ".concat(res.status, " while fetching Speech authorization token."));
                case 5:
                  contentType = res.headers.get("content-type");
                  if (!(contentType === "application/json")) {
                    _context.next = 12;
                    break;
                  }
                  _context.next = 9;
                  return res.json();
                case 9:
                  return _context.abrupt("return", _context.sent);
                case 12:
                  _context.next = 14;
                  return res.text();
                case 14:
                  _context.t0 = _context.sent;
                  return _context.abrupt("return", {
                    token: _context.t0
                  });
                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _fetchSpeechAuthorizationToken.apply(this, arguments);
      }
    }
  });

  // lib/landing/data/saga/fetchSpeechAuthorizationToken.js
  var require_fetchSpeechAuthorizationToken3 = __commonJS({
    "lib/landing/data/saga/fetchSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = fetchSpeechAuthorizationTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _fetchSpeechAuthorizationToken = require_fetchSpeechAuthorizationToken();
      var _fetchSpeechAuthorizationToken2 = _interopRequireDefault2(require_fetchSpeechAuthorizationToken2());
      var _setSpeechAuthorizationToken = _interopRequireDefault2(require_setSpeechAuthorizationToken());
      var _setSpeechRegion = _interopRequireDefault2(require_setSpeechRegion());
      var _tryDecodeJWT = _interopRequireDefault2(require_tryDecodeJWT());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(fetchSpeechAuthorizationTokenSaga);
      function fetchSpeechAuthorizationTokenSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function fetchSpeechAuthorizationTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_fetchSpeechAuthorizationToken.FETCH_SPEECH_AUTHORIZATION_TOKEN, /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                  var url, _yield$call, token, _ref2, region;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return (0, _effects.select)(function(_ref) {
                            var subscriptionKey = _ref.speechCredentials.subscriptionKey;
                            return subscriptionKey;
                          });
                        case 3:
                          url = _context.sent;
                          if (/^https?:/.test(url)) {
                            _context.next = 6;
                            break;
                          }
                          return _context.abrupt("return");
                        case 6:
                          _context.next = 8;
                          return (0, _effects.call)(_fetchSpeechAuthorizationToken2["default"], url);
                        case 8:
                          _yield$call = _context.sent;
                          token = _yield$call.token;
                          _ref2 = (0, _tryDecodeJWT["default"])(token) || {}, region = _ref2.region;
                          _context.next = 13;
                          return (0, _effects.put)((0, _setSpeechRegion["default"])(region));
                        case 13:
                          _context.next = 15;
                          return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(token));
                        case 15:
                          _context.next = 20;
                          break;
                        case 17:
                          _context.prev = 17;
                          _context.t0 = _context["catch"](0);
                          console.error(_context.t0);
                        case 20:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[0, 17]]);
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/util/generateUserId.js
  var require_generateUserId = __commonJS({
    "lib/landing/util/generateUserId.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = generateUserId;
      var _concat = _interopRequireDefault2(require_concat4());
      var _mathRandom = _interopRequireDefault2(require_browser());
      function generateUserId() {
        var _context;
        var directLinePrefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        return (0, _concat["default"])(_context = "".concat(directLinePrefix ? "dl" : "r", "_")).call(_context, (0, _mathRandom["default"])().toString(36).substr(2));
      }
    }
  });

  // lib/landing/util/generateDirectLineToken.js
  var require_generateDirectLineToken2 = __commonJS({
    "lib/landing/util/generateDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = generateDirectLineToken;
      var _url = _interopRequireDefault2(require_url3());
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _objectSpread2 = _interopRequireDefault2(require_objectSpread22());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _whatwgFetch = require_fetch_umd();
      var _generateUserId = _interopRequireDefault2(require_generateUserId());
      function generateDirectLineToken(_x) {
        return _generateDirectLineToken.apply(this, arguments);
      }
      function _generateDirectLineToken() {
        _generateDirectLineToken = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(_ref) {
          var domainURL, secret, userId, res, json;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  domainURL = _ref.domainURL, secret = _ref.secret;
                  userId = (0, _generateUserId["default"])(true);
                  _context.next = 4;
                  return (0, _whatwgFetch.fetch)(new _url["default"]("directline/tokens/generate", domainURL).href, {
                    body: (0, _stringify["default"])({
                      User: {
                        Id: userId
                      }
                    }),
                    headers: {
                      authorization: "Bearer ".concat(secret),
                      "Content-Type": "application/json"
                    },
                    method: "POST"
                  });
                case 4:
                  res = _context.sent;
                  if (res.ok) {
                    _context.next = 7;
                    break;
                  }
                  throw new Error("Direct Line returned ".concat(res.status, " while generating token"));
                case 7:
                  _context.next = 9;
                  return res.json();
                case 9:
                  json = _context.sent;
                  if (!("error" in json)) {
                    _context.next = 12;
                    break;
                  }
                  throw new Error("Direct Line responded ".concat((0, _stringify["default"])(json.error), " while generating new token"));
                case 12:
                  return _context.abrupt("return", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, json), {}, {
                    userId: userId
                  }));
                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _generateDirectLineToken.apply(this, arguments);
      }
    }
  });

  // lib/landing/data/saga/generateDirectLineToken.js
  var require_generateDirectLineToken3 = __commonJS({
    "lib/landing/data/saga/generateDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = generateDirectLineTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _generateDirectLineToken = require_generateDirectLineToken();
      var _generateDirectLineToken2 = _interopRequireDefault2(require_generateDirectLineToken2());
      var _getDomainURL = _interopRequireDefault2(require_getDomainURL());
      var _setDirectLineToken = _interopRequireDefault2(require_setDirectLineToken());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(generateDirectLineTokenSaga);
      function generateDirectLineTokenSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function generateDirectLineTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_generateDirectLineToken.GENERATE_DIRECT_LINE_TOKEN, /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                  var _yield$select, domainHost, protocol, secret, _yield$call, token;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return (0, _effects.select)(function(_ref) {
                            var _ref$directLineCreden = _ref.directLineCredentials, domainHost2 = _ref$directLineCreden.domainHost, secret2 = _ref$directLineCreden.secret, protocol2 = _ref.protocol;
                            return {
                              domainHost: domainHost2,
                              protocol: protocol2,
                              secret: secret2
                            };
                          });
                        case 2:
                          _yield$select = _context.sent;
                          domainHost = _yield$select.domainHost;
                          protocol = _yield$select.protocol;
                          secret = _yield$select.secret;
                          _context.prev = 6;
                          _context.next = 9;
                          return (0, _effects.call)(_generateDirectLineToken2["default"], {
                            domainURL: (0, _getDomainURL["default"])(domainHost, protocol),
                            secret: secret
                          });
                        case 9:
                          _yield$call = _context.sent;
                          token = _yield$call.token;
                          _context.next = 13;
                          return (0, _effects.put)((0, _setDirectLineToken["default"])(token));
                        case 13:
                          _context.next = 19;
                          break;
                        case 15:
                          _context.prev = 15;
                          _context.t0 = _context["catch"](6);
                          _context.next = 19;
                          return (0, _effects.put)((0, _setDirectLineToken["default"])("<Failed to fetch token>"));
                        case 19:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[6, 15]]);
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/util/generateSpeechAuthorizationToken.js
  var require_generateSpeechAuthorizationToken2 = __commonJS({
    "lib/landing/util/generateSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = generateDirectLineToken;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _whatwgFetch = require_fetch_umd();
      function generateDirectLineToken(_x) {
        return _generateDirectLineToken.apply(this, arguments);
      }
      function _generateDirectLineToken() {
        _generateDirectLineToken = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(_ref) {
          var region, subscriptionKey, res, text;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  region = _ref.region, subscriptionKey = _ref.subscriptionKey;
                  _context.next = 3;
                  return (0, _whatwgFetch.fetch)("https://".concat(region, ".api.cognitive.microsoft.com/sts/v1.0/issueToken"), {
                    headers: {
                      "Ocp-Apim-Subscription-Key": subscriptionKey
                    },
                    method: "POST"
                  });
                case 3:
                  res = _context.sent;
                  if (res.ok) {
                    _context.next = 6;
                    break;
                  }
                  throw new Error("Cognitive Services returned ".concat(res.status, " while generating token"));
                case 6:
                  _context.next = 8;
                  return res.text();
                case 8:
                  text = _context.sent;
                  return _context.abrupt("return", {
                    authorizationToken: text
                  });
                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _generateDirectLineToken.apply(this, arguments);
      }
    }
  });

  // lib/landing/data/saga/generateSpeechAuthorizationToken.js
  var require_generateSpeechAuthorizationToken3 = __commonJS({
    "lib/landing/data/saga/generateSpeechAuthorizationToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = generateDirectLineTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _generateSpeechAuthorizationToken = require_generateSpeechAuthorizationToken();
      var _generateSpeechAuthorizationToken2 = _interopRequireDefault2(require_generateSpeechAuthorizationToken2());
      var _setSpeechAuthorizationToken = _interopRequireDefault2(require_setSpeechAuthorizationToken());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(generateDirectLineTokenSaga);
      function generateDirectLineTokenSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function generateDirectLineTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_generateSpeechAuthorizationToken.GENERATE_SPEECH_AUTHORIZATION_TOKEN, /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                  var _yield$select, region, subscriptionKey, _yield$call, authorizationToken;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return (0, _effects.select)(function(_ref) {
                            var _ref$speechCredential = _ref.speechCredentials, region2 = _ref$speechCredential.region, subscriptionKey2 = _ref$speechCredential.subscriptionKey;
                            return {
                              region: region2,
                              subscriptionKey: subscriptionKey2
                            };
                          });
                        case 2:
                          _yield$select = _context.sent;
                          region = _yield$select.region;
                          subscriptionKey = _yield$select.subscriptionKey;
                          _context.prev = 5;
                          _context.next = 8;
                          return (0, _effects.call)(_generateSpeechAuthorizationToken2["default"], {
                            region: region,
                            subscriptionKey: subscriptionKey
                          });
                        case 8:
                          _yield$call = _context.sent;
                          authorizationToken = _yield$call.authorizationToken;
                          _context.next = 12;
                          return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(authorizationToken));
                        case 12:
                          _context.next = 18;
                          break;
                        case 14:
                          _context.prev = 14;
                          _context.t0 = _context["catch"](5);
                          _context.next = 18;
                          return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])("<Failed to fetch authorization token>"));
                        case 18:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[5, 14]]);
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/saga/generateUserIdOnCredentialChange.js
  var require_generateUserIdOnCredentialChange = __commonJS({
    "lib/landing/data/saga/generateUserIdOnCredentialChange.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = _callee;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _marked = /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(_callee);
      function _callee() {
        return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
              case "end":
                return _context.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/saga/loadBotPreset.js
  var require_loadBotPreset2 = __commonJS({
    "lib/landing/data/saga/loadBotPreset.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = loadBotPresetSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _loadBotPreset = require_loadBotPreset();
      var _fetchDirectLineToken = _interopRequireDefault2(require_fetchDirectLineToken());
      var _fetchSpeechAuthorizationToken = _interopRequireDefault2(require_fetchSpeechAuthorizationToken());
      var _setDirectLineDomainHost = _interopRequireDefault2(require_setDirectLineDomainHost());
      var _setDirectLineSecret = _interopRequireDefault2(require_setDirectLineSecret());
      var _setDirectLineToken = _interopRequireDefault2(require_setDirectLineToken());
      var _setProtocolAppServiceExtension = _interopRequireDefault2(require_setProtocolAppServiceExtension());
      var _setProtocolDirectLineSpeech = _interopRequireDefault2(require_setProtocolDirectLineSpeech());
      var _setProtocolWebSocket = _interopRequireDefault2(require_setProtocolWebSocket());
      var _setSpeechAuthorizationToken = _interopRequireDefault2(require_setSpeechAuthorizationToken());
      var _setSpeechSubscriptionKey = _interopRequireDefault2(require_setSpeechSubscriptionKey());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(loadBotPresetSaga);
      function loadBotPresetSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function loadBotPresetSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_loadBotPreset.LOAD_BOT_PRESET, function(_ref) {
                  var name = _ref.payload.name;
                  return /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                    return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!(name === "mockbot")) {
                              _context.next = 17;
                              break;
                            }
                            _context.next = 3;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 3:
                            _context.next = 5;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])("https://webchat-mockbot.azurewebsites.net/directline/token"));
                          case 5:
                            _context.next = 7;
                            return (0, _effects.put)((0, _fetchDirectLineToken["default"])());
                          case 7:
                            _context.next = 9;
                            return (0, _effects.put)((0, _setProtocolWebSocket["default"])());
                          case 9:
                            _context.next = 11;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 11:
                            _context.next = 13;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])("https://webchat-mockbot.azurewebsites.net/speechservices/token"));
                          case 13:
                            _context.next = 15;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 15:
                            _context.next = 119;
                            break;
                          case 17:
                            if (!(name === "mockbot3")) {
                              _context.next = 34;
                              break;
                            }
                            _context.next = 20;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 20:
                            _context.next = 22;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])("https://webchat-mockbot3.azurewebsites.net/api/token/directline"));
                          case 22:
                            _context.next = 24;
                            return (0, _effects.put)((0, _fetchDirectLineToken["default"])());
                          case 24:
                            _context.next = 26;
                            return (0, _effects.put)((0, _setProtocolWebSocket["default"])());
                          case 26:
                            _context.next = 28;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 28:
                            _context.next = 30;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])(""));
                          case 30:
                            _context.next = 32;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 32:
                            _context.next = 119;
                            break;
                          case 34:
                            if (!(name === "mockbot3-dlase")) {
                              _context.next = 53;
                              break;
                            }
                            _context.next = 37;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 37:
                            _context.next = 39;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])("https://webchat-mockbot3.azurewebsites.net/api/token/directlinease"));
                          case 39:
                            _context.next = 41;
                            return (0, _effects.put)((0, _fetchDirectLineToken["default"])());
                          case 41:
                            _context.next = 43;
                            return (0, _effects.put)((0, _setProtocolAppServiceExtension["default"])());
                          case 43:
                            _context.next = 45;
                            return (0, _effects.put)((0, _setDirectLineDomainHost["default"])("webchat-mockbot3.azurewebsites.net"));
                          case 45:
                            _context.next = 47;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 47:
                            _context.next = 49;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])(""));
                          case 49:
                            _context.next = 51;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 51:
                            _context.next = 119;
                            break;
                          case 53:
                            if (!(name === "mockbot-dls")) {
                              _context.next = 68;
                              break;
                            }
                            _context.next = 56;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 56:
                            _context.next = 58;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])(""));
                          case 58:
                            _context.next = 60;
                            return (0, _effects.put)((0, _setProtocolDirectLineSpeech["default"])());
                          case 60:
                            _context.next = 62;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 62:
                            _context.next = 64;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])("https://webchat-mockbot-streaming.azurewebsites.net/speechservices/token"));
                          case 64:
                            _context.next = 66;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 66:
                            _context.next = 119;
                            break;
                          case 68:
                            if (!(name === "mockbot-ase")) {
                              _context.next = 87;
                              break;
                            }
                            _context.next = 71;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 71:
                            _context.next = 73;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])("https://webchat-mockbot-streaming.azurewebsites.net/directline/token"));
                          case 73:
                            _context.next = 75;
                            return (0, _effects.put)((0, _fetchDirectLineToken["default"])());
                          case 75:
                            _context.next = 77;
                            return (0, _effects.put)((0, _setProtocolAppServiceExtension["default"])());
                          case 77:
                            _context.next = 79;
                            return (0, _effects.put)((0, _setDirectLineDomainHost["default"])("webchat-mockbot-streaming.azurewebsites.net"));
                          case 79:
                            _context.next = 81;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 81:
                            _context.next = 83;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])("https://webchat-mockbot-streaming.azurewebsites.net/speechservices/token"));
                          case 83:
                            _context.next = 85;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 85:
                            _context.next = 119;
                            break;
                          case 87:
                            if (!(name === "dev")) {
                              _context.next = 104;
                              break;
                            }
                            _context.next = 90;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 90:
                            _context.next = 92;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])("http://localhost:3978/directline/token"));
                          case 92:
                            _context.next = 94;
                            return (0, _effects.put)((0, _fetchDirectLineToken["default"])());
                          case 94:
                            _context.next = 96;
                            return (0, _effects.put)((0, _setProtocolWebSocket["default"])());
                          case 96:
                            _context.next = 98;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 98:
                            _context.next = 100;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])("https://localhost:3978/speechservices/token"));
                          case 100:
                            _context.next = 102;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 102:
                            _context.next = 119;
                            break;
                          case 104:
                            if (!(name === "mockbot-proxy")) {
                              _context.next = 119;
                              break;
                            }
                            _context.next = 107;
                            return (0, _effects.put)((0, _setDirectLineToken["default"])(""));
                          case 107:
                            _context.next = 109;
                            return (0, _effects.put)((0, _setProtocolAppServiceExtension["default"])());
                          case 109:
                            _context.next = 111;
                            return (0, _effects.put)((0, _setDirectLineDomainHost["default"])("webchat-mockbot-proxy.azurewebsites.net"));
                          case 111:
                            _context.next = 113;
                            return (0, _effects.put)((0, _setDirectLineSecret["default"])(""));
                          case 113:
                            _context.next = 115;
                            return (0, _effects.put)((0, _setSpeechAuthorizationToken["default"])(""));
                          case 115:
                            _context.next = 117;
                            return (0, _effects.put)((0, _setSpeechSubscriptionKey["default"])("https://webchat-mockbot.azurewebsites.net/speechservices/token"));
                          case 117:
                            _context.next = 119;
                            return (0, _effects.put)((0, _fetchSpeechAuthorizationToken["default"])());
                          case 119:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  })();
                });
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/action/pingDirectLineAppServiceExtension.js
  var require_pingDirectLineAppServiceExtension = __commonJS({
    "lib/landing/data/action/pingDirectLineAppServiceExtension.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PING_DIRECT_LINE_APP_SERVICE_EXTENSION = void 0;
      exports["default"] = pingDirectLineAppServiceExtension;
      var PING_DIRECT_LINE_APP_SERVICE_EXTENSION = "PING_DIRECT_LINE_APP_SERVICE_EXTENSION";
      exports.PING_DIRECT_LINE_APP_SERVICE_EXTENSION = PING_DIRECT_LINE_APP_SERVICE_EXTENSION;
      function pingDirectLineAppServiceExtension(domainHost, protocol) {
        return {
          payload: {
            domainHost: domainHost,
            protocol: protocol
          },
          type: PING_DIRECT_LINE_APP_SERVICE_EXTENSION
        };
      }
    }
  });

  // lib/landing/data/saga/pingDirectLineAppServiceExtension.js
  var require_pingDirectLineAppServiceExtension2 = __commonJS({
    "lib/landing/data/saga/pingDirectLineAppServiceExtension.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = pingDirectLineAppServiceExtensionSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _url = _interopRequireDefault2(require_url3());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _pingDirectLineAppServiceExtension = require_pingDirectLineAppServiceExtension();
      var _getDomainURL = _interopRequireDefault2(require_getDomainURL());
      var _setDirectLineAppServiceExtensionStatus = _interopRequireDefault2(require_setDirectLineAppServiceExtensionStatus());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(pingDirectLineAppServiceExtensionSaga);
      function pingDirectLineAppServiceExtensionSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function pingDirectLineAppServiceExtensionSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeLatest)(_pingDirectLineAppServiceExtension.PING_DIRECT_LINE_APP_SERVICE_EXTENSION, function(_ref) {
                  var _ref$payload = _ref.payload, domainHost = _ref$payload.domainHost, protocol = _ref$payload.protocol;
                  return /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                    var abortController, res, response, ib, initialized, k, ob;
                    return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            abortController = new AbortController();
                            _context.prev = 1;
                            _context.next = 4;
                            return (0, _effects.put)((0, _setDirectLineAppServiceExtensionStatus["default"])("checking"));
                          case 4:
                            _context.next = 6;
                            return (0, _effects.call)(fetch, new _url["default"]("..", (0, _getDomainURL["default"])(domainHost, protocol)), {
                              signal: abortController.signal
                            });
                          case 6:
                            res = _context.sent;
                            if (res.ok) {
                              _context.next = 9;
                              break;
                            }
                            throw new Error("Direct Line App Service Extension returned ".concat(res.status, "."));
                          case 9:
                            _context.next = 11;
                            return (0, _effects.call)([res, res.json]);
                          case 11:
                            response = _context.sent;
                            ib = response.ib, initialized = response.initialized, k = response.k, ob = response.ob;
                            if (initialized) {
                              _context.next = 17;
                              break;
                            }
                            throw new Error("Direct Line App Service Extension adapter is unavailable.");
                          case 17:
                            if (k) {
                              _context.next = 21;
                              break;
                            }
                            throw new Error("Direct Line App Service Extension adapter is not properly configured.");
                          case 21:
                            if (!(!ib || !ob)) {
                              _context.next = 23;
                              break;
                            }
                            throw new Error("Direct Line App Service Extension adapter could not connect to the bot.");
                          case 23:
                            _context.next = 25;
                            return (0, _effects.put)((0, _setDirectLineAppServiceExtensionStatus["default"])("ready", response));
                          case 25:
                            _context.next = 32;
                            break;
                          case 27:
                            _context.prev = 27;
                            _context.t0 = _context["catch"](1);
                            abortController.abort();
                            _context.next = 32;
                            return (0, _effects.put)((0, _setDirectLineAppServiceExtensionStatus["default"])("error", _context.t0.message));
                          case 32:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[1, 27]]);
                  })();
                });
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/saga/pingDirectLineAppServiceExtensionOnChange.js
  var require_pingDirectLineAppServiceExtensionOnChange = __commonJS({
    "lib/landing/data/saga/pingDirectLineAppServiceExtensionOnChange.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = pingDirectLineAppServiceExtensionOnChangeSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _slicedToArray2 = _interopRequireDefault2(require_slicedToArray());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _setDirectLineDomainHost = require_setDirectLineDomainHost();
      var _setProtocolAppServiceExtension = require_setProtocolAppServiceExtension();
      var _setProtocolAppServiceExtensionInsecure = require_setProtocolAppServiceExtensionInsecure();
      var _pingDirectLineAppServiceExtension = _interopRequireDefault2(require_pingDirectLineAppServiceExtension());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(dispatchPingDirectLineAppServiceExtension);
      var _marked2 = /* @__PURE__ */ _regeneratorRuntime3().mark(pingDirectLineAppServiceExtensionOnChangeSaga);
      function dispatchPingDirectLineAppServiceExtension() {
        var _yield$select, _yield$select2, domainHost, protocol;
        return (0, _regeneratorRuntime2["default"])().wrap(function dispatchPingDirectLineAppServiceExtension$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _effects.select)(function(_ref) {
                  var domainHost2 = _ref.directLineCredentials.domainHost, protocol2 = _ref.protocol;
                  return [domainHost2, protocol2];
                });
              case 2:
                _yield$select = _context.sent;
                _yield$select2 = (0, _slicedToArray2["default"])(_yield$select, 2);
                domainHost = _yield$select2[0];
                protocol = _yield$select2[1];
                if (!(domainHost && (protocol === "app service extension" || protocol === "app service extension insecure"))) {
                  _context.next = 9;
                  break;
                }
                _context.next = 9;
                return (0, _effects.put)((0, _pingDirectLineAppServiceExtension["default"])(domainHost, protocol));
              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _marked);
      }
      function pingDirectLineAppServiceExtensionOnChangeSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function pingDirectLineAppServiceExtensionOnChangeSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(function(_ref2) {
                  var type = _ref2.type;
                  return type === _setDirectLineDomainHost.SET_DIRECT_LINE_DOMAIN_HOST || type === _setProtocolAppServiceExtension.SET_PROTOCOL_APP_SERVICE_EXTENSION || type === _setProtocolAppServiceExtensionInsecure.SET_PROTOCOL_APP_SERVICE_EXTENSION_INSECURE;
                }, dispatchPingDirectLineAppServiceExtension);
              case 2:
                _context2.next = 4;
                return (0, _effects.fork)(dispatchPingDirectLineAppServiceExtension);
              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked2);
      }
    }
  });

  // lib/landing/util/refreshDirectLineToken.js
  var require_refreshDirectLineToken2 = __commonJS({
    "lib/landing/util/refreshDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = refreshDirectLineToken;
      var _url = _interopRequireDefault2(require_url3());
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _asyncToGenerator2 = _interopRequireDefault2(require_asyncToGenerator());
      var _whatwgFetch = require_fetch_umd();
      function refreshDirectLineToken(_x) {
        return _refreshDirectLineToken.apply(this, arguments);
      }
      function _refreshDirectLineToken() {
        _refreshDirectLineToken = (0, _asyncToGenerator2["default"])(/* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee(_ref) {
          var domainURL, token, res, json;
          return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  domainURL = _ref.domainURL, token = _ref.token;
                  _context.next = 3;
                  return (0, _whatwgFetch.fetch)(new _url["default"]("directline/tokens/refresh", domainURL).href, {
                    headers: {
                      authorization: "Bearer ".concat(token),
                      "Content-Type": "application/json"
                    },
                    method: "POST"
                  });
                case 3:
                  res = _context.sent;
                  if (res.ok) {
                    _context.next = 6;
                    break;
                  }
                  throw new Error("Direct Line returned ".concat(res.status, " while refreshing token"));
                case 6:
                  _context.next = 8;
                  return res.json();
                case 8:
                  json = _context.sent;
                  if (!("error" in json)) {
                    _context.next = 11;
                    break;
                  }
                  throw new Error("Direct Line responded ".concat((0, _stringify["default"])(json.error), " while refreshing new token"));
                case 11:
                  return _context.abrupt("return", json);
                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return _refreshDirectLineToken.apply(this, arguments);
      }
    }
  });

  // lib/landing/data/saga/refreshDirectLineToken.js
  var require_refreshDirectLineToken3 = __commonJS({
    "lib/landing/data/saga/refreshDirectLineToken.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      var _regeneratorRuntime3 = require_regeneratorRuntime()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = refreshDirectLineTokenSaga;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _refreshDirectLineToken = require_refreshDirectLineToken();
      var _getDomainURL = _interopRequireDefault2(require_getDomainURL());
      var _refreshDirectLineToken2 = _interopRequireDefault2(require_refreshDirectLineToken2());
      var _setDirectLineToken = _interopRequireDefault2(require_setDirectLineToken());
      var _marked = /* @__PURE__ */ _regeneratorRuntime3().mark(refreshDirectLineTokenSaga);
      function refreshDirectLineTokenSaga() {
        return (0, _regeneratorRuntime2["default"])().wrap(function refreshDirectLineTokenSaga$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0, _effects.takeEvery)(_refreshDirectLineToken.REFRESH_DIRECT_LINE_TOKEN, /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(function _callee() {
                  var _yield$select, domainHost, protocol, token, domainURL, _yield$call, refreshedToken;
                  return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return (0, _effects.select)(function(_ref) {
                            var _ref$directLineCreden = _ref.directLineCredentials, domainHost2 = _ref$directLineCreden.domainHost, token2 = _ref$directLineCreden.token, protocol2 = _ref.protocol;
                            return {
                              domainHost: domainHost2,
                              protocol: protocol2,
                              token: token2
                            };
                          });
                        case 3:
                          _yield$select = _context.sent;
                          domainHost = _yield$select.domainHost;
                          protocol = _yield$select.protocol;
                          token = _yield$select.token;
                          if (token) {
                            _context.next = 9;
                            break;
                          }
                          return _context.abrupt("return");
                        case 9:
                          domainURL = (0, _getDomainURL["default"])(domainHost, protocol);
                          _context.next = 12;
                          return (0, _effects.call)(_refreshDirectLineToken2["default"], {
                            domainURL: domainURL,
                            token: token
                          });
                        case 12:
                          _yield$call = _context.sent;
                          refreshedToken = _yield$call.token;
                          _context.next = 16;
                          return (0, _effects.put)((0, _setDirectLineToken["default"])(refreshedToken));
                        case 16:
                          _context.next = 21;
                          break;
                        case 18:
                          _context.prev = 18;
                          _context.t0 = _context["catch"](0);
                          console.error(_context.t0);
                        case 21:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[0, 18]]);
                }));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/saga.js
  var require_saga = __commonJS({
    "lib/landing/data/saga.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = _callee;
      var _regeneratorRuntime2 = _interopRequireDefault2(require_regeneratorRuntime());
      var _effects = require_redux_saga_effects_npm_proxy_cjs();
      var _autoRefreshDirectLineToken = _interopRequireDefault2(require_autoRefreshDirectLineToken());
      var _fetchDirectLineToken = _interopRequireDefault2(require_fetchDirectLineToken3());
      var _fetchSpeechAuthorizationToken = _interopRequireDefault2(require_fetchSpeechAuthorizationToken3());
      var _generateDirectLineToken = _interopRequireDefault2(require_generateDirectLineToken3());
      var _generateSpeechAuthorizationToken = _interopRequireDefault2(require_generateSpeechAuthorizationToken3());
      var _generateUserIdOnCredentialChange = _interopRequireDefault2(require_generateUserIdOnCredentialChange());
      var _loadBotPreset = _interopRequireDefault2(require_loadBotPreset2());
      var _pingDirectLineAppServiceExtension = _interopRequireDefault2(require_pingDirectLineAppServiceExtension2());
      var _pingDirectLineAppServiceExtensionOnChange = _interopRequireDefault2(require_pingDirectLineAppServiceExtensionOnChange());
      var _refreshDirectLineToken = _interopRequireDefault2(require_refreshDirectLineToken3());
      var _marked = /* @__PURE__ */ (0, _regeneratorRuntime2["default"])().mark(_callee);
      function _callee() {
        return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _effects.fork)(_autoRefreshDirectLineToken["default"]);
              case 2:
                _context.next = 4;
                return (0, _effects.fork)(_fetchDirectLineToken["default"]);
              case 4:
                _context.next = 6;
                return (0, _effects.fork)(_fetchSpeechAuthorizationToken["default"]);
              case 6:
                _context.next = 8;
                return (0, _effects.fork)(_generateDirectLineToken["default"]);
              case 8:
                _context.next = 10;
                return (0, _effects.fork)(_generateSpeechAuthorizationToken["default"]);
              case 10:
                _context.next = 12;
                return (0, _effects.fork)(_generateUserIdOnCredentialChange["default"]);
              case 12:
                _context.next = 14;
                return (0, _effects.fork)(_loadBotPreset["default"]);
              case 14:
                _context.next = 16;
                return (0, _effects.fork)(_pingDirectLineAppServiceExtension["default"]);
              case 16:
                _context.next = 18;
                return (0, _effects.fork)(_pingDirectLineAppServiceExtensionOnChange["default"]);
              case 18:
                _context.next = 20;
                return (0, _effects.fork)(_refreshDirectLineToken["default"]);
              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _marked);
      }
    }
  });

  // lib/landing/data/createStore.js
  var require_createStore = __commonJS({
    "lib/landing/data/createStore.js": function(exports) {
      "use strict";
      var _Object$defineProperty = require_define_property7();
      var _interopRequireDefault2 = require_interopRequireDefault()["default"];
      _Object$defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = _default;
      var _stringify = _interopRequireDefault2(require_stringify3());
      var _redux = require_redux();
      var _reduxSaga = _interopRequireDefault2(require_redux_saga_core_npm_proxy_cjs());
      var _simpleUpdateIn = _interopRequireDefault2(require_simple_update_in_production_min());
      var _reducer = _interopRequireDefault2(require_reducer());
      var _saga = _interopRequireDefault2(require_saga());
      var LOCAL_STORAGE_KEY = "REDUX_STORE";
      function onErrorResumeNext(fn) {
        try {
          return fn();
        } catch (err) {
        }
      }
      function _default() {
        var sagaMiddleware = (0, _reduxSaga["default"])();
        var store = (0, _redux.createStore)(_reducer["default"], onErrorResumeNext(function() {
          var _window$localStorage, _window$localStorage$;
          return JSON.parse((_window$localStorage = window.localStorage) === null || _window$localStorage === void 0 ? void 0 : (_window$localStorage$ = _window$localStorage.getItem) === null || _window$localStorage$ === void 0 ? void 0 : _window$localStorage$.call(_window$localStorage, LOCAL_STORAGE_KEY));
        }) || {}, (0, _redux.applyMiddleware)(sagaMiddleware));
        sagaMiddleware.run(_saga["default"]);
        store.subscribe(function() {
          var state = store.getState();
          var persistedState = (0, _simpleUpdateIn["default"])(state, ["transcript", "visible"], function() {
            return false;
          });
          try {
            window.localStorage.setItem(LOCAL_STORAGE_KEY, (0, _stringify["default"])(persistedState));
          } catch (error) {
            console.error(error);
          }
        });
        return store;
      }
    }
  });

  // lib/landing/index.js
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _interopRequireWildcard = require_interopRequireWildcard()["default"];
  require_promise5();
  var _reactRedux = require_lib();
  var _reactDom = require_react_dom();
  var _react = _interopRequireWildcard(require_react());
  var _App = _interopRequireDefault(require_App());
  var _createStore = _interopRequireDefault(require_createStore());
  var Main = function Main2() {
    var store = (0, _react.useMemo)(_createStore["default"], []);
    return /* @__PURE__ */ _react["default"].createElement(_reactRedux.Provider, {
      store: store
    }, /* @__PURE__ */ _react["default"].createElement(_App["default"], null));
  };
  (0, _reactDom.render)(/* @__PURE__ */ _react["default"].createElement(Main, null), document.getElementById("root"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
